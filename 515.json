[
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------5f4e0edb_bec4_473e_b907_705bc73bcf54-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------5f4e0edb_bec4_473e_b907_705bc73bcf54-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------5f4e0edb_bec4_473e_b907_705bc73bcf54-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------5f4e0edb_bec4_473e_b907_705bc73bcf54-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------5f4e0edb_bec4_473e_b907_705bc73bcf54-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://hjauquet.medium.com/i-am-a-pro-life-housewife-1ff2cf1b05ec?source=extreme_main_feed---------0-74--------------------30c04e72_3c13_4fd4_860d_6fbba0678241-------",
    "title": "I am a Pro-Life Housewife",
    "publish_date": "2020-10-15 13:43:33",
    "authors": [
      "Heather Jauquet"
    ],
    "summary": "I am a Pro-Life HousewifeAnd I’m not voting for TrumpPicture by Maria Oswalt on UnsplashAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\nThey are seeing that while Trump is considered the pro-life candidate, he is not pro-life.\nBeing pro-life means having a consistent life ethic from womb to tomb.\nPro-life means honoring the sanctity of life at all stages.\nDon’t discount the vote of the pro-life housewife who is working towards change.",
    "text": "I am a Pro-Life Housewife\n\nAnd I’m not voting for Trump\n\nPicture by Maria Oswalt on Unsplash\n\nAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\n\nI acknowledge that I hate discussing politics and often hesitate to share my views. On the rare occasions I do, it’s usually about my support for the sanctity of human life. I have been admonished by friends from both political parties telling me that I am not pro-life enough, or I’m anti-woman, or I’m not Christian enough, or that I’m too naive. One person, went even so far as to tell me about her “great disappointment” in me and suggested I shouldn’t share my views or should only share them with like-minded people. But if I do as she suggested, my views go in an echo chamber and I forgo the opportunity for rich discussion and to see another perspective. While I might not change someone’s mind, I hope we walk away with a different perspective and the willingness to view every story with grace and compassion.\n\nI grew up loving Jesus and loving my country And now, as a pro-life religious conservative, I’m feeling bereft, without a political party who represents me. To be honest, I felt that way at the last election and even more so now. I disagree with the democratic platform on the issue of abortion. But I abhor the ongoing lack of respect for human life as demonstrated by the current president.\n\nAs we get closer to the U.S. Presidential election there is a contingent of pro-life Catholics and evangelicals who are making their departure from supporting Trump known. They are seeing that while Trump is considered the pro-life candidate, he is not pro-life. His actions against the marginalized show the truth.\n\nBeing pro-life means having a consistent life ethic from womb to tomb. It means valuing human life at all stages, not just when it’s convenient. Often when a new election looms on the horizon the discussion of life becomes a heated topic of debate: When should life be valued? Who is valued?\n\nI cannot in good conscience vote for a man who doesn’t value human dignity and decency. I cannot embrace the politics of a man who is willing to put children in cages and has not, as of yet, addressed the allegations of forced hysterectomies on Immigration and Custom Enforcement (ICE) detainees.\n\nI cannot support a leader who refuses to face the pandemic head on in hopes that it will disappear. The leader of our country mocked his political opponent for wearing a mask and then came down with the very plague he tried to ignore. Then he exposed his staff to the virus. That is not pro-life. It’s a flagrant display of ego and of disrespect for the people who work for him and the 209,000 dead that preceded his diagnosis.\n\nI cannot support a man who is unwilling to denounce white supremacy. It is not pro-life when President Trump refused to denounce white supremacy, but instead told the Proud Boys to “Stand back and stand by.” Pope Francis said in a message to the people of the United States after the killing of George Floyd: “We cannot tolerate or turn a blind eye to racism and exclusion in any form and yet claim to defend the sacredness of every human life.”\n\nWhen then candidate Trump mocked a disabled journalist during the 2016 campaign some people laughed, more were disgusted. His mockery is not pro-life. It points fingers and makes fun of people who are not neurotypical. I have a neurodivergent son and to know that he would be mocked or have his disability used against him is infuriating and heart wrenching. I expect more out of a leader. I expect compassion and restraint.\n\nHow can we support a pro-life candidate who is anything but? His hypocrisy is blatant.\n\nI am ardently pro-life. I hold that position because I believe in the dignity and the sanctity of human life. I believe we are made in the image of God and when we love one another we share the love of Jesus. I believe life is sacred. All life. I believe it begins in the womb and ends at natural death. At a lecture at Fordham University, Cardinal Joseph Bernardin shared this consistent life ethic: “The spectrum of life cuts across the issues of genetics, abortion, capital punishment, modern warfare and the care of the terminally ill.” In short, it’s valuing all life: the infirm, the dying, the disabled, the ones in cages whether they be prisons or at the border, the mentally ill.\n\nWe should show empathy, compassion, and grace when we talk to people about their situations. If we refuse to acknowledge the humanity, do people’s stories simply become pawns in our political stances?\n\nI believe we are called to serve one another. I believe in grace. I believe we shouldn’t be reduced to our mistakes. I believe that we are all broken, and that in our brokenness we can learn to see the whole person and embrace grace. Bryan Stevenson beautifully articulates how brokenness brings about compassion in his book Just Mercy: A story of Justice and Redemption. In his book, Stevenson describes our broken judicial system where too many are given a death sentence for crimes that they did not commit or crimes that do not warrant it.\n\nThe most politically active part of the pro-life position seeks an end to abortion. I fervently wish for an end for abortion. We also need to put in resources to empower women. This means consistent and available health care. This means jobs and housing. This means education. It means giving women the ability to support themselves and their children. It means support. We cannot demonize women for their decisions if we turn a blind eye to their needs. There are religious organizations that help women in crisis pregnancies and one of my favorites is The Gabriel Network whose slogan is “Empower Women.” They not only provide housing, but also angel friends who take women to their appointments, spend time with them getting to know them, and help by anticipating their needs whether it be friendship, baby supplies, or a hand to hold. The Gabriel Network also provides scholarships to help women further their education and careers.\n\nMany people see a pro-life position as a religious one. It is for me, but, it doesn’t have to be. Pro-life means honoring the sanctity of life at all stages. There are other organizations not affiliated with any religion that support a consistent life ethic such as New Wave Feminists and Rehumanize International. New Wave Feminists recognizes the “…full humanity of both the unborn child and the mother and looks to rebuild a culture that embodies legitimate justice for all.” Rehumanize International is a “…human rights organization dedicated to creating a culture of peace and life, and in so doing…seek to bring an end to all aggressive violence against humans through education, discourse, and action.”\n\nWhat if we set aside the presuppositions that being pro-life means that it is only a religious issue or a political stance? What if we used our time and energy to support, encourage, and embrace the sanctity of human life? When we stop pitting pro-choice and pro-life advocates against one another, we could do beautiful work together and shelter the homeless, clothe the naked, and feed the hungry. We can empower women, provide adequate healthcare, end racism, and advocate for social justice.\n\nAs I continue to read, listen, and learn, I embrace the dignity and sanctity of all human life. I acknowledge that if we want to change minds and change hearts, we have to be willing to listen to one another. Don’t discount the vote of the pro-life housewife who is working towards change.",
    "keywords": [
      "life",
      "women",
      "trump",
      "housewife",
      "human",
      "prolife",
      "believe",
      "support",
      "means",
      "sanctity",
      "political"
    ]
  },
  {
    "url": "https://level.medium.com/what-spike-lees-get-on-the-bus-got-right-and-wrong-about-the-million-man-march-2add4af00fc0?source=extreme_main_feed---------2-74--------------------30c04e72_3c13_4fd4_860d_6fbba0678241-------",
    "title": "25 Years After the Million Man March, the Same Struggles for Black Liberation Persist",
    "publish_date": "2020-10-16 15:15:53",
    "authors": [
      "Julian Kimble"
    ],
    "summary": "And while many Black men agree that they need to do better for the sake of Black people, there’s rarely agreement about the particulars.\nThe movie follows a group of Black men who trek from South Central Los Angeles to Washington, D.C., for the events of October 16, 1995.\nWhile the Million Man March looms large in the film, it’s simply as backdrop; instead, Get on the Bus focuses on the interactions between the travelers.\nWhile the Million Man March may have been established in the spirit of progress, it wasn’t a progressive effort.\nAnd you can’t claim to want what’s best for Black people unless you want it for all Black people.",
    "text": "What Spike Lee’s ‘Get on the Bus’ Got Right — and Wrong — About the Million Man March\n\nA revisiting of the film highlights hurdles Black Americans have yet to overcome\n\nOssie Davis, Isaiah Washington, Andre Braugher, Charles S. Dutton, and a group of men standing next to a bus in a scene from the film ‘Get on the Bus,’ 1996. Photo: Universal/Getty Images\n\nBlack liberation has long been hindered by Black masculinity. Too often, ideas about how Black people can improve their circumstances don’t benefit anyone who isn’t male and heterosexual. And while many Black men agree that they need to do better for the sake of Black people, there’s rarely agreement about the particulars. This reality is one of the driving themes of Spike Lee’s 1996 film, Get on the Bus, which dropped exactly one year after its source of inspiration: the Million Man March.\n\nThe movie follows a group of Black men who trek from South Central Los Angeles to Washington, D.C., for the events of October 16, 1995. Among them are Evan (Thomas Jefferson Byrd), who as part of a court order is literally shackled to the son he neglected (De’Aundre Bonds); Xavier (Hill Harper), an idealistic film student who’s documenting the trip; Flip (Andre Braugher), an obnoxious working actor; Gary (Roger Guenveur Smith), a self-righteous LAPD officer; Kyle (Isaiah Washington) and Randall (Harry Lennix), a couple whose relationship is in dire straits; and Jeremiah (Ossie Davis), the moral center who regrets not attending the March on Washington more than 30 years prior.\n\nBy the end of the film, it’s unclear whether the dial has moved for certain characters — but 24 years later, several of the societal issues those characters represent are still stuck in place.\n\nWhile the Million Man March looms large in the film, it’s simply as backdrop; instead, Get on the Bus focuses on the interactions between the travelers. “People from all different socioeconomic, political backgrounds — which is a combustible mix,” Lee told Charlie Rose of the characters in 1996. Lee and writer Reggie Rock Bythewood depict the trip as a spiritual and emotional journey for the group based on the inevitable conflicts while they’re on the road. The characters represent a variety of issues and perspectives, some of which reveal a lingering resistance to change. By the end of the film, it’s unclear whether the dial has moved for certain characters — but 24 years later, several of the societal issues those characters represent are still stuck in place.\n\nWhile the Million Man March may have been established in the spirit of progress, it wasn’t a progressive effort. Its organizer, Nation of Islam leader Louis Farrakhan, is notorious for his sexism, homophobia, and anti-Semitism. Yet, despite the conservatism at its core, the march stands as a significant display of unity. Given the circumstances at the time — the persistent fallout from the crack epidemic, the 1994 crime bill that led to a surge in mass incarceration, and the notion that Black men were “under attack” in general — many chose to overlook Farrakhan’s radioactive history in favor of the greater good for which he fought.\n\nSome of the characters in Get on the Bus are willing to follow Farrakhan’s lead due to desperation. When Craig (Albert Hall), the original bus driver, tells trip organizer George (Charles S. Dutton) about his teenage daughter’s pregnancy, he acknowledges that he’ll be “all ears” if Farrakhan has a way to deal with the situation. It’s a shortsighted consideration, but Farrakhan and the NOI have long appealed to Black people who feel they’re out of options for whatever reason, so his outlook might catch the ear of a father who feels his daughter has strayed from the values he’d attempted to instill in her.\n\nHowever, the idea that the overarching principle of the march was bigger than Farrakhan himself is also expressed in Get on the Bus. “I guess if the brothers are gettin’ together — you know, talkin’ about some things, tryin’ to work things out — I wanna be there,” Gary tells Xavier, who’s interviewing as many people as he can about their decision to attend the march. Gary is guided by the idea that anyone interested in the march is willing to put whatever differences they have aside, but that proves extremely difficult in an atmosphere of people with different backgrounds, lifestyles, and personality types.\n\nTensions arise within the group as its members get to know one another. Gary’s father, who was also a cop, was murdered by a gang member; when Jamal (Gabriel Casseus) reveals that he’s a reformed Crip who found Islam after committing several murders, Gary vows to put Jamal behind bars once they return to L.A. It doesn’t matter that Jamal works to prevent kids from making the mistakes he made — Gary only sees a murderer akin to his dad’s killer. Meanwhile, Flip serves as a consistently volatile presence throughout Get on the Bus. He craves attention, so when Flip isn’t questioning Gary’s Blackness (his mother is White), he’s name-dropping, overcompensating for his insecurity through misogyny, and being brazenly homophobic. He attacks Randall and Kyle, neither of whom back down. And when the confrontation turns physical, he falls victim to his own hubris.\n\nYou can’t call for empowerment without understanding that capitalism isn’t the solution. You can’t vow to do better by Black women, then not only fail to do so, but fail to understand why they don’t feel safe. And you can’t claim to want what’s best for Black people unless you want it for all Black people.\n\nAs reprehensible as Flip is at times, he’s far more tolerable than Wendell (Wendell Pierce), a car dealership owner who joins the bus in Memphis and then quickly draws the ire of the group. “Every brother ain’t righteous,” a skeptical George says of Wendell, a proud Black Republican who disparages HBCUs as “nigga schools” and rants about bootstrapping his way to success in between cigar puffs. Wendell, who sees the march as a massive networking opportunity, is an example of how capitalism can be a gateway drug to Republicanism, and his diatribe leads to him being forcefully removed from the bus.\n\nThe overall message isn’t subtle: On the way to atonement, these men confront several issues inhibiting progress for Black people as a whole. They don’t make it to the march, but the ordeal still provides a sense of fellowship. Before their journey home, George gives an impassioned speech about the real work beginning once they return. Alas, camaraderie doesn’t equate to evolution or progress. While attitudes on some issues presented in Get on the Bus have shifted slightly — especially across generational lines — many of the same conversations still take place regularly because of how deeply matters like capitalism, sexism, misogyny, and homophobia are embedded in society.\n\nYou can’t call for empowerment without understanding that capitalism isn’t the solution. You can’t vow to do better by Black women, then not only fail to do so, but fail to understand why they don’t feel safe. And you can’t claim to want what’s best for Black people unless you want it for all Black people. Some of these problems are structural and thus difficult to change in 25 years’ time — but others require more personal accountability, and genuine progress is impossible if accountability is treated like a prison.\n\nGet on the Bus leaves viewers with the image of Evan Sr. and Evan Jr.’s shackles lying in front of the Lincoln Memorial. It’s a callback to the shackles, chains, and handcuffs seen at the beginning of the film, which imply that the experience has brought forth liberation, or at least the foundation for it. But with some distance from both the film and the Million Man March that inspired it, the state of the world suggests that in certain instances, the shackles remain in place — locked by the very hands they bind.",
    "keywords": [
      "persist",
      "characters",
      "liberation",
      "men",
      "black",
      "25",
      "million",
      "bus",
      "man",
      "struggles",
      "film",
      "cant",
      "issues",
      "isnt"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------30c04e72_3c13_4fd4_860d_6fbba0678241-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------4-73--------------------30c04e72_3c13_4fd4_860d_6fbba0678241-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------5-73--------------------30c04e72_3c13_4fd4_860d_6fbba0678241-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------6-73--------------------30c04e72_3c13_4fd4_860d_6fbba0678241-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/26-year-old-coder-built-a-1-billion-app-in-2-years-after-following-his-girlfriends-advice-c6f378db1fd1?source=extreme_main_feed---------7-73--------------------30c04e72_3c13_4fd4_860d_6fbba0678241-------",
    "title": "26-Year-Old Programmer Built a $1 Billion App In 2 Years — After Following His Girlfriend’s Advice",
    "publish_date": "2020-10-07 08:45:21",
    "authors": [
      "Alan Trapulionis"
    ],
    "summary": "26-Year-Old Programmer Built a $1 Billion App In 2 Years — After Following His Girlfriend’s AdviceHow a failed passion project turned into one of the most iconic apps of our timeKevin Systrom at Techcrunch Disrupt 2011.\nHis next stop was NextStop, a location recommendation app startup.\nAfter a year of honing his coding skills at the startup, Kevin decided to create a check-in app of his own.\n“I didn’t have a specific idea in mind… I mean, the idea was basically to start a check-in app… Who wasn’t starting a check-in app at that time?\nThat second ticket would become the best investment Kevin Systrom ever made.",
    "text": "26-Year-Old Programmer Built a $1 Billion App In 2 Years — After Following His Girlfriend’s Advice\n\nHow a failed passion project turned into one of the most iconic apps of our time\n\nKevin Systrom at Techcrunch Disrupt 2011. JD Lasica’s image\n\nKevin Systrom left Google frustrated.\n\nHaving spent almost three years as a product manager at the company, Kevin was eager to take on more responsibility and apply his nuclear drive to something tangible. Instead, he was offered by his boss to take up golf.\n\nHis next stop was NextStop, a location recommendation app startup. With FourSquare leading the way, check-in apps were all the rage in the late 2000s, and a small team meant Kevin could get more responsibility and take initiative.\n\nHe did. After a year of honing his coding skills at the startup, Kevin decided to create a check-in app of his own.\n\n“I didn’t have a specific idea in mind… I mean, the idea was basically to start a check-in app… Who wasn’t starting a check-in app at that time? […] It was probably the worst idea we could’ve been working on at the time.”\n\nA hostel in Mexico seemed like the right place to pursue his terrible idea, so Kevin packed his flip-flops and bought two tickets out of California — one for himself, one for his girlfriend. That second ticket would become the best investment Kevin Systrom ever made.\n\nKevin’s life story and quotes taken from these four sources.",
    "keywords": [
      "checkin",
      "girlfriends",
      "worst",
      "working",
      "responsibility",
      "billion",
      "startup",
      "following",
      "built",
      "programmer",
      "26yearold",
      "advice",
      "idea",
      "systrom",
      "kevin",
      "apps",
      "app"
    ]
  },
  {
    "url": "https://medium.com/the-ascent/how-to-make-enough-money-to-retire-in-the-next-5-years-6a7683ce5a16?source=extreme_main_feed---------9-73--------------------30c04e72_3c13_4fd4_860d_6fbba0678241-------",
    "title": "How To Make Enough Money to Retire in the Next 5 Years",
    "publish_date": "2020-09-22 13:02:22",
    "authors": [
      "Tim Denning"
    ],
    "summary": "Take the money from your online business and pour it into cars and free drinks for attractive people you want to sleep with.\nWatch yourself lose your mind from all the money and the thought of it been taken away from you.\nTrade in the luxury life for a simple life that is enforced by how much money you have in your back pocket.\nServe people who have money, and who don’t have money.\nHave money allow you to buy back your time, instead of spending money on things that create a never-ending trail of debt.",
    "text": "1. Invest your money rather than save.\n\nSaving your money is stupid. Inflation will eat away at your money. You make money when you invest what you have in real assets.\n\n2. Understand the idea of purchasing power.\n\nGovernments print money to fight recessions, and fund wars. When they do, they take away the purchasing power of the money you have earned. The only way to repay the huge debt the US Government has racked up is by either: 1) Raising taxes 2) Printing money out of thin air.\n\nIncreasing taxes won’t repay the debt. That leaves option two which we’ve been doing as a global economy since 2008. You can overcome the attack on your purchasing power when you learn about inflation hedge assets.\n\n3. Lose all of your money.\n\nLet money show you another side to life. Start a business with your family. Choose a marketplace to sell on. Import goods from China. Buy low and sell high. Let the business become huge. Bring on investors and see that they are like having a boss whip you with a whip.\n\nBelieve you were destined to be a hot shot entrepreneur. Take the money from your online business and pour it into cars and free drinks for attractive people you want to sleep with. Become a total ass in the process. Treat people like absolute dirt. Tell poor people to work harder. Abuse random charities and tell them to stop asking for donations. Let your ego run your life.\n\nStart a second business using your overconfidence from the first business. Park your car each morning in the reserved car space for BMWs and Mercs only. Get out of the car and slam the door like a boss. Keep your head up so you look confident. Walk into the office and give advice to people twice your age. Take the intersection of luck and the rise of the internet for granted. Tell yourself you’re amazing and you built this empire because you’re brilliant.\n\nGo out on the weekends and try and pickup using your money. Flash $100 bills. Talk down to the bar staff. Tip service workers like they’re your slaves and you’re the emperor. Wear loafers that cost twice the weekly minimum wage of a person you call a ‘worker.’\n\nWhile all of this is going on, get greedy. Not just a little bit greedy. Treat your family like they serve you now. Don’t visit your grandparents or repair broken relationships with aunties and uncles. You’re too busy hustling and making money. Keep making the money. Watch the problems enter your life. Watch those problems get out of control.\n\nSee, in a matter of months, your money-making machine almost crumble because of one bad decision. Realize the end is near. Find yourself out on the streets late at night talking to your employees and predicting conspiracies. Watch yourself lose your mind from all the money and the thought of it been taken away from you. Watch your self-worth become your net-worth.\n\nShow up to the office one day and realize it’s all over. Say goodbye to the employees while you hold back tears. Pretend to be strong when you know you’re weak. Offer to give them references for their next job, knowing you’ll be lucky to find a job yourself.\n\nGo home when it’s all over. Sell the luxury car. Catch trains to visit friends. Learn what it’s like to have nothing. Check your bank account and see your savings evaporate fast. Trade in the luxury life for a simple life that is enforced by how much money you have in your back pocket. Accept the gift of an old car from a kind family member you neglected when you had your business.\n\nDrive their car back to your empty home. Pick up the car cleaning accessories you had for your BMW. Take the car down to the local car wash and see if you can shine it into something that resembles the BMW. Watch your worst nightmare, a big spider, jump out from underneath the car. Scream at the top of your voice and then watch it crawl away.\n\nFinish cleaning the car and notice how it hasn’t morphed into anything you could imagine in your dreams. Feel slightly grateful you even have a car for a few brief moments.\n\nReturn home and look for a job. Apply for everything. Watch the phone never ring and the thought of moving in with distant family, to survive, become a reality. Keep trying. Pick up the phone one Monday morning and talk to a nice lady named Fiona on the other end. Say hi and pretend to be okay when you’re not okay. Say yes to the job interview knowing something is wrong… you feel sick.\n\nSee the doctor. Try and find out what is wrong with you. Try all of their suggestions: a change in diet, fructose tests, colon inspections. Roll up the following week for the job interview. Have the thought of presenting your failed business journey almost bring you to tears. Watch your hands shake and feel the sweat drip down your back and stink out the interview room.\n\nGet a call saying you made it. You got a job in a call center working for a bank. Notice the contrast between making loads of money and earning minimum wage. Work at the bank for eight years. Learn about how money works. Serve people who have money, and who don’t have money.\n\nSpend your time after work learning about different assets: stocks, real estate, gold, digital currencies, bonds, cash. Apply the knowledge and invest what you earn. Take the money you earn from being a part-time writer and invest it, too. Feel like you’re smart with money. Watch the money grow. Make enough money to cover all of your expenses for a year, in advance. Feel no different.\n\nSimultaneously, work on yourself. Face your inner demons. Get help. Face mental illness too. Be kind to yourself. Realize you’re doing the best you can. Forgive yourself for your messy past, where you acted like a dictator with too much money. Say sorry to the people you hurt. Forgive people who you banned for life because they violated one of your rules. Forgive people for no reason at all.\n\nLook at what makes you happy now: family, your partner, messages from readers, mending of broken relationships.\n\nFeel what it’s like not to run towards money. Notice how fancy cars, houses and luxury goods have zero appeal to you. Take the simple things in life and let them change your life.\n\nHave money allow you to buy back your time, instead of spending money on things that create a never-ending trail of debt. Make the acquisition of wealth secondary. Focus on how you can be helpful. Get excited by all the people you can meet and do life with.\n\nLearn to make a difference rather than a profit.\n\n4. Become a content creator.\n\nContent creators are part of one of the biggest wealth transfers in history. Everything is content. Storytelling through words, videos, audio, photography and illustrations is a booming business.",
    "keywords": [
      "life",
      "family",
      "job",
      "retire",
      "car",
      "money",
      "watch",
      "feel",
      "work",
      "business",
      "youre"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------d1279853_ec3d_4ed8_9149_fbc5aeae80f4-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------d1279853_ec3d_4ed8_9149_fbc5aeae80f4-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------d1279853_ec3d_4ed8_9149_fbc5aeae80f4-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------d1279853_ec3d_4ed8_9149_fbc5aeae80f4-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------d1279853_ec3d_4ed8_9149_fbc5aeae80f4-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------0-74--------------------7904dafb_4dba_4a4c_948f_9d5757a6ad2b-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://humanparts.medium.com/how-well-get-over-going-to-the-upper-room-with-donald-j-trump-4d63f2e9741a?source=extreme_main_feed---------1-74--------------------7904dafb_4dba_4a4c_948f_9d5757a6ad2b-------",
    "title": "How We’ll Get Over: Going to the Upper Room With Donald J. Trump",
    "publish_date": "2020-10-15 21:12:55",
    "authors": [
      "Max S. Gordon"
    ],
    "summary": "What we are facing is bigger than Donald Trump.\nOr maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose.\nPolitically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved.\nIf, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.",
    "text": "We’ve been here before. Our ancestors knew, when you can’t control the evil of the world, you must become the weather. A howling wind through the trees, a blistering sun, an irresistible force. Our democracy is on a respirator now, and we must defend it.\n\nJustice and nonviolent resistance became an electrifying force in 1955 when working-class Blacks who relied on the buses in Montgomery, Alabama, shut down the discriminatory system for an entire year, permanently changing the laws in that city. We need the spirit of transcendence that led these heroic women and men, many of them maids and laborers, to walk to work each day and say, “I can’t feel the hurt in my feet when there is a balm for my soul. And I will walk five more miles to work if it means a better life for my children.”\n\nWe need the Holy Ghost power that stopped Eugene “Bull” O’Connor, the commissioner of public safety in Birmingham, Alabama, when he ordered a battalion of firefighters to turn hoses on a crowd of protesters, including children, on May 5, 1963, often called “Miracle Sunday.” The firefighters not only resisted the order—it was reported that some of them cried.\n\nThe power of the crowd, who had walked from a local church, was both vulnerable and authoritative — a compelling, mystical combination. Whatever racist trance had possessed those firefighters when they’d hosed the same crowds only days before, it was broken, perhaps when they looked at the children and thought, “The little girl I am aiming this hose at could be mine.” Rev. Martin Luther King, Jr. later wrote, “I felt there, for the first time, the pride and the power of nonviolence.”\n\nThe alchemy of grace and conviction works. It has worked. I know because I am alive. I write these words with the knowledge that once upon a time someone who belonged to my family would have been whipped or worse for even trying to learn the alphabet. Yet I read, I write. Something they did to survive must have worked — because I’m here.\n\nNo matter how much they try to distort the truth on Fox News or make us feel like fools for believing, the sacrifices of earlier generations matter. How many women had to die on kitchen floors and back alleys for just one woman to walk into a care facility, protected by Roe v. Wade, and make an appointment for her health — legally and safely? We will not go back. Their sacrifices matter. And we owe them our determination to see that Roe v. Wade is not overturned. A persuasive river of courage flows through history, from Harriet Tubman to the suffragettes to the rioters at Stonewall. We’ll never know all the names, but we know that river exists — because we’re here.\n\nHistory has always had rogues, scoundrels, reprobates, damn fools, men who have acted as children. Bullies. Dictators. As a human family, we’ve seen astounding acts of evil. But the thing about evil is not to make it personal or to take it personally. We have to look beyond the actors. The only way to combat evil is not to respond with evil, but to invest in a more compelling vision. Because of someone’s vision, I am married to the man I love.\n\n7\n\nWelcome to Niggerland. A place on the outskirts of town where there has been crime and poverty and drugs and lack of health care and denied educational opportunities. My white friends, you were once untouched by the pain of the people who live there. But please know, those divisions no longer exist the way they once did. Perhaps Donald Trump’s greatest achievement is that he’s turned every American into a nigger, black or white (including a few people who are convinced they hate niggers). One way or another, we’re all in the soup now.\n\nNigger. It’s an unpleasant word, and forgive me for using it, but it’s the right word. It’s not a Black person’s shame, but a white society’s shame for its ugliness. It’s a word meant to terrorize a group of people within a system of oppression and make them feel powerless so they won’t act and try to change it. In other words, in Donald Trump’s eyes, we’re all niggers now. There isn’t a single person or institution he doesn’t have contempt for.\n\nWhat we are facing is bigger than Donald Trump. Perhaps he is the fulfillment of America’s karma in the world, our political shadow finally come to life. Or maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose. He is the personification of the Ugly American trope, vulgarity incarnate, an ambling Frankenstein monster ripping the village apart with his bare hands. Politically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\n\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved. His message isn’t really new—it’s his malevolence that’s profound. Maybe one day we will perceive his legacy as an opportunity that afforded fundamental change. If, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.\n\nWe may not change his heart, but we need to alter ourselves so we are different when and if the next monster arrives. In the aftermath of what happens, assessments will be made, and we will have to acknowledge that while solidarity eventually came from unexpected sources — Republicans willing to abandon their tribe — this went on for far too long, and too many lives were lost.\n\n8\n\nThere is a Black teenage girl who studies her lipstick one more time in the mirror before cutting off the bathroom light. She is going to a demonstration. There may be violence. But she believes in that preacher, Dr. King, and the sermon he preached on racial equality last Sunday. She knows it is dangerous; they’ve unleashed dogs on protestors; they turned hoses on families, pinning them against buildings and cars. People have been jailed, students have been clubbed, just for having the audacity to want to go to school with whites, to vote without retaliation.\n\nIt is 1957, and only a girl herself, she has no way of knowing that one day her daughter will look back at her through history. Her daughter will move into her dorm at a public university, buy her books, and although every battle won’t have been won, she will walk into the classroom her mother envisioned for her, without having to be escorted by the National Guard. She will claim the seat her mother earned.\n\nWe have a legacy to uphold; we have ancestors to honor. We’ve been here before. The names are always different. But whenever justice is threatened anywhere, there are always brave ones.\n\n9\n\nRevolution begins with a flower. Hold it your hand. And know that the man who owns real estate and golf courses all over world, in all his presumed omnipotence, doesn’t have the power to make a single flower.\n\nAnd if he chooses to destroy that flower, there’s another flower next to it in the field. There will always be flowers. Legions of them, as there are legions of us.\n\nAnd when your hope is restored and you remember who you are and what is possible to achieve with fortitude and grace, step out the door with that flower in your hair.\n\nAnd act.",
    "keywords": [
      "trump",
      "world",
      "way",
      "weve",
      "upper",
      "evil",
      "j",
      "going",
      "know",
      "power",
      "walk",
      "white",
      "room",
      "donald"
    ]
  },
  {
    "url": "https://coronavirus.medium.com/the-company-set-to-roll-out-americas-future-vaccine-cb56ea9691fa?source=extreme_main_feed---------2-74--------------------7904dafb_4dba_4a4c_948f_9d5757a6ad2b-------",
    "title": "The Company Set to Roll Out America’s Future Vaccine",
    "publish_date": "2020-10-15 20:44:45",
    "authors": [
      "Yasmin Tayag"
    ],
    "summary": "The Company Set to Roll Out America’s Future VaccineThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccinesMario Tama / Getty ImagesWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages.\nIt’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history.\nIn August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\nAt the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention.\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made.",
    "text": "The Company Set to Roll Out America’s Future Vaccine\n\nThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccines\n\nMario Tama / Getty Images\n\nWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages. It’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history. To do the job, the White House has contracted a company called McKesson Corporation. In August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\n\nThis isn’t McKesson Corporation’s first vaccine-distribution rodeo. The company, founded 187 years ago and the seventh-largest U.S. company in terms of revenue in 2019, was also responsible for managing the distribution of the H1N1 vaccine to as many as 90,000 sites across the U.S. during the 2009 swine flu outbreak. At the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention. The company has also had an existing contract with the CDC to distribute childrens’ vaccines since 2016, and its role in distributing vaccines during the pandemic is based on that contract. Its success during the H1N1 epidemic bodes well for Covid-19 rollout, but U.S. public health infrastructure may continue to pose problems.\n\nAs I wrote previously, the specifics of how a vaccine will be distributed by McKesson — and who will get it first — are not yet clear. In an email to the Medium Coronavirus Blog, Robert Redfield, PhD, director of the CDC, said: “Through the Advisory Committee on Immunization Practices, CDC will play a vital role in deciding, based on input from experts and stakeholders, how initial, limited vaccine doses will be allocated and distributed while reliably producing more than 100 million doses by January 2021.” McKesson shared its public statement about its CDC partnership with the Blog but did not answer questions.\n\nThere does seem to be a plan to determine where exactly McKesson will distribute vaccines, according to the HHS. A spokesperson for the agency tells the Blog that ensuring easy access for all Americans, notably minority communities and medically underserved populations, is a top priority. “Whether it’s at a doctor’s office, retail pharmacy, federally qualified health center, or hospital,” they said, “thousands of outlets will be available so no American must travel far to be vaccinated.”\n\nThe plan is that McKesson will deliver a specific amount of vaccine to a designated location once it’s allocated to a given jurisdiction or authorized partner. In many instances, says the spokesperson, these will be sites where the vaccine will actually be administered; in others, McKesson will deliver vaccines to sites where health departments will pick up the vaccine and further distribute it within their networks. National retail pharmacies will also use a similar system. “This system,” says the spokesperson, “will be scalable to meet demand.”\n\nUntil more is known about the vaccine to be distributed, it’s not clear how it will be transported. Some vaccines are more delicate than others, and sometimes they require refrigeration. According to HHS, if the vaccine has ultra-cold storage requirements, it may be shipped directly from the manufacturer to administration sites, but this too will be managed within McKesson’s centralized system. The contract the company has with the CDC covers the transportation of both refrigerated (2–8º Celsius) and frozen (-20ºC) vaccines.\n\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made. The HHS spokesperson says the U.S. government is “committed to working with other countries friendly to our national security to ensure safe and effective Covid-19 vaccines are developed as fast as possible, however, the vaccine and therapeutic candidates [Operation Warp Speed] has invested in are the candidates OWS believes to be the most promising, and all of those candidates are being manufactured in the U.S.”\n\nMcKesson’s performance during the H1N1 epidemic in 2009 bodes well for the Covid-19 pandemic: During that time, it distributed almost 81 million H1N1 vaccine doses to 90,000 sites. However, notes journalist Michele Cohen Marill in the medical publication Medscape this week, distribution ran into obstacles at the public health level: “Public health officials struggled with the mechanics of designating priority groups and reaching out to them for vaccination while asking others to wait.”\n\n“I’m not sure there’s much difference between 1976, 2009, and 2020–2021,” Rebecca Wurtz, MD, MPH, of the University of Minnesota School of Public Health in Minneapolis, told Medscape. “The issues around organizing a massive distribution of a new vaccine are pretty similar.”\n\nThe U.S. can’t afford to make administrative errors during the Covid-19 pandemic, especially as the fall surge continues and the death toll mounts. States ultimately shape the actual vaccination programs, notes Marill in Medscape, and it’s up to them to decide who can administer the vaccine, and where. The hope is that state governments authorize as many people as possible to safely administer the vaccine and make access to it widespread and equitable. Neighborhood pharmacies will likely play a key role, as the HHS spokesperson suggests: “For example, during H1N1, once vaccines became widely available pharmacies played an important role in the vaccine distribution,” they said, adding that pharmacies’ role “is even more critical to vaccinations today and will be fully integrated into the distribution plan.”",
    "keywords": [
      "role",
      "future",
      "company",
      "mckesson",
      "public",
      "set",
      "roll",
      "distribution",
      "vaccines",
      "vaccine",
      "health",
      "spokesperson",
      "americas",
      "covid19"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------7904dafb_4dba_4a4c_948f_9d5757a6ad2b-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------4-73--------------------7904dafb_4dba_4a4c_948f_9d5757a6ad2b-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------5-73--------------------7904dafb_4dba_4a4c_948f_9d5757a6ad2b-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------6-73--------------------7904dafb_4dba_4a4c_948f_9d5757a6ad2b-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/steve-jobss-definition-of-smart-will-make-you-rethink-your-actions-6b1d7873fd46?source=extreme_main_feed---------7-73--------------------7904dafb_4dba_4a4c_948f_9d5757a6ad2b-------",
    "title": "Steve Jobs’s Definition of “Smart” Will Reprogram Your Idea of Intelligence",
    "publish_date": "2020-09-10 17:51:04",
    "authors": [
      "Alan Trapulionis"
    ],
    "summary": "Steve Jobs: “You have to not have the same bag of experiences as everyone else does”Recently, I’ve come across a video where a young Steve Jobs explains a key characteristic of what he considers to be a smart person.\nHow do you increase your intelligence to become what Jobs considers to be a “smart” person?\nAccording to the visionary — it’s all about having unique life experiences.\nOn Ferriss’s podcast, Lütke went in-depth about the books that changed his life — carefully describing each one of them.\nBooks are the easiest way for introverts to gather unique insights that shape their own worldview.",
    "text": "Steve Jobs: “You have to not have the same bag of experiences as everyone else does”\n\nRecently, I’ve come across a video where a young Steve Jobs explains a key characteristic of what he considers to be a smart person.\n\nI expected to hear something among the lines of “thinking out of the box” and “unflinching dedication.” Instead, I discovered one of the most profound pieces of advice I’ve ever heard.\n\n“A lot of [what it means to be smart] is the ability to zoom out, like you’re in a city and you could look at the whole thing from the 80th floor down at the city. And while other people are trying to figure out how to get from point A to point B reading these stupid little maps, you could just see it in front of you. You can see the whole thing.”\n\nJobs masterfully notes that smart people often make connections that seem obvious to them, but perplexing to others — simply because they have developed the skill of “zooming out” to get a better view of the big picture.\n\nThis, of course, sounds great and we can all agree that in order to change the world you need to clearly see the world. But how do you do that? How do you increase your intelligence to become what Jobs considers to be a “smart” person?\n\nAccording to the visionary — it’s all about having unique life experiences.\n\n“You have to not have the same bag of experiences as everyone else does, or else you’re gonna make the same connections and you won’t be innovative. […] You might want to think about going to Paris and being a poet for a few years. Or you might want to go to a third-world country — I’d highly advise that. Falling in love with two people at once. Walt Disney took LSD, do you know that?”\n\nIt makes sense. A 2015 study has concluded that openness to experience was the best predictor for “job performance in situations requiring creativity,” which is every entrepreneur’s bread and butter. It’s also safe to say that any significant career step up will require a decisive innovative move.\n\nThe study also found that extraversion “played a key role in contexts involving social interactions,” which is hardly a surprise, but a healthy reminder nonetheless. These findings tie in nicely with what Jobs said — people who are open to experience and extroverted will seek out the most interesting, non-standard situations in life — and gain invaluable perspectives as a result.\n\nJobs’ idea also helps explain why so many successful entrepreneurs are avid readers. Divyank Turakhia, a 35-year old Indian tech billionaire, has once said that since the age of 15 he has read for 800 hours a year, every year. Tobias Lütke, Shopify’s billionaire founder, was described by Tim Ferriss as one of the most aggressive readers he’d ever met.\n\nIt’s probably not the information itself that these leaders value about books, but rather how they change their perspective. On Ferriss’s podcast, Lütke went in-depth about the books that changed his life — carefully describing each one of them.\n\nBooks are the easiest way for introverts to gather unique insights that shape their own worldview. They expand your mental horizons, so it makes sense that someone who’s read 100 classic business books can spot a rising trend or a missed opportunity before anyone else.",
    "keywords": [
      "life",
      "youre",
      "world",
      "situations",
      "jobss",
      "books",
      "study",
      "unique",
      "intelligence",
      "idea",
      "jobs",
      "reprogram",
      "steve",
      "smart",
      "definition"
    ]
  },
  {
    "url": "https://towardsdatascience.com/25-lesser-known-java-libraries-you-should-try-ff8abd354a94?source=extreme_main_feed---------8-73--------------------7904dafb_4dba_4a4c_948f_9d5757a6ad2b-------",
    "title": "25 lesser-known Java libraries you should try in 2020",
    "publish_date": "2020-10-07 22:09:24",
    "authors": [
      "Md Kamaruzzaman"
    ],
    "summary": "JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape.\nIn enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform.\nWiremockHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development.\nLink:ConclusionIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries.\nThere are many excellent Java libraries that I have not listed here but worth a try.",
    "text": "1. RxJava\n\nReactive Extensions (ReactiveX) is a popular software development paradigm to deal with asynchronous and event-driven programming. RxJava is the Java VM implementations of the Reactive Extensions by using Observables. It extends the Observer Pattern to support event-driven programming by adding composable operators on a sequence of events/data in a declarative way. It also hides the low-level complexities like threading, thread-safety, synchronization, and concurrent data structure.\n\nIf you want to do reactive programming in Java, it is a must-have library.\n\nLink:\n\n2. OkHttp\n\nHTTP is by far the most used Application layer protocol. There are many excellent Java-based HTTP client libraries out there. But OkHttp is the simplest yet powerful HTTP client library in the JVM. It offers fluent and clean API to develop HTTP client in Java.\n\nIt also supports some advanced features: Connection pooling, GZIP shrink, response caching, modern TLS features, and many more.\n\nLink:\n\n3. MyBatis\n\nIn most Software development projects, we need to store data. Although there are many types of data storage, SQL is still the most used data storage type. As a Java developer, we need to match our Java object to the SQL table. One way to achieve the mapping is to use ORM (e.g., Hibernate). But there are many use cases when you want to have full control over the Object-Table mapping (e.g., Performance). In those cases, you can directly use JDBC and write the SQL query. The other way is to use MyBatis to map Java Object to Stored Procedure or SQL statements. It offers both annotation-based or XML descriptor based mapping.\n\nI prefer MyBatis over plain JDBC, especially in larger projects, as it improves the separation of concerns.\n\nLink:\n\n4. HikariCP\n\nHikariCP is the second library in this list related to Database. Establishing a JDBC connection is resource expensive. If you create a new connection every time you access the Database and close it once you are done, it can severely impact your application performance. Not to mention that failure to close the connection properly or allowing limitless database connection can crash your application.\n\nUsing Connection Pooling means connections are reused rather than created each time a connection is requested. HikariCP is a very fast yet lightweight Database connection pooling in JVM. It is also very reliable and a “zero-overhead” JDBC connection pool.\n\nLink:\n\n5. Lombok\n\nIn modern days, Java is often criticized as a verbose and bloated programming language. Compared to other popular languages (JavaScript, Python, Scala, Kotlin), a developer needs to write lots of boilerplate code in Java. Although Java has introduced Records in JDK 15 to reduce boilerplate code in Java, it is not an LTS release. Fortunately, a library can already reduce your boilerplate code in Java significantly: Project Lombok. You can generate getters, setters, hashcode, equals, toString, Builder classes by adding a few annotations. Additionally, it offers null pointer check, logger, and many more.\n\nLink:\n\n6. VAVR\n\nJava finally released the much-awaited functional programming via Lambda and Streaming in version 8. If you are used to functional programming or want to dive deep into functional programming, you may find Java’s functional programming wanting. Compared to many other functional programming languages (Haskell, Scala), Java is pale. VAVR is a library that can fill the gap of the functional programming features in Java. It provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nLink:\n\n7. Gson\n\nOver the years, JSON has become the de-facto data exchange format. In Java, there also exist several excellent libraries to deal with JSON. One of them is Jackson, which I have covered in my previous article. The other excellent library is Google’s Gson. Unlike Jackson, it is a minimalistic library and only supports JSON. It offers Data Binding, extensive Generic support, flexible customization. One of the major advantage (or disadvantage depending on your liking) of Gson is that it does not need annotation.\n\nLink:\n\n8. jsoup\n\nIf you are developing your application in Java and need to deal with HTML, you should use jsoup. It is a Java library to work with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data. It implements the WHATWG HTML5 specification and parses HTML using the best of HTML5 DOM methods. It supports parsing HTML from URL/string, find and extract data, manipulate the HTML elements, clean HTML, output HTML.\n\nLink:\n\n9. JIB\n\nIf you are working on an enterprise-grade application, it should be at least Cloud-ready. The first step to make your application cloud-ready is to containerize your application, i.e., put your artifactory binary into Docker image. Dockerizing a Java application is a bit tedious work: you need to have deep knowledge of Docker, you need to create a Dockerfile, and you will need Docker Daemon. Fortunately for the Java developers, Google has created an Open-source Java containerizer using already existing tools. You can use JIB as a Java library to build an optimized Docker and OCI image.\n\nLink\n\n10. Tink\n\nTink is yet another handy Java library in this list from Google. Cryptography and security are becoming increasingly more important in Software Development. Cryptographic techniques are used to secure user data. Implementing cryptography correctly requires a lot of expertise and effort. A group of Cryptographers and security engineers in Google has written the multi-language cryptographic library Tink. It offers easy-to-use but hard to misuse security API. Tink offers cryptographic functionalities via different primitives. It provides symmetric key encryption, streaming symmetric key encryption, deterministic symmetric key encryption, digital signature, hybrid encryption, and many other encryption functionalities.\n\nLink:\n\n11. Webmagic\n\nIf you work on Web crawling, you can write your own crawler, which is time-consuming and tedious. In Java, Webmagic is an excellent Web crawler library that covers the complete life-cycle of crawler: downloading, URL management, content extraction, persistence. It offers a simple yet flexible core, Annotation support, multi-threaded, and easy-to-use API.\n\nLink:\n\n12. ANTLR 4\n\nIf you work on parsing and processing data, then the ANTLR library could be handy. It is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It does this by giving us access to language processing primitives like lexers, grammars, parsers, and the runtime to process text against them.\n\nIt’s often used to build tools and frameworks.\n\nLink:\n\n13. Caffeine\n\nIf your application is read-heavy, then caching can dramatically improve your application’s data access performance. Java has many great caching libraries. Caffeine is the best among the lot. It is a high-performance, near-optimal caching library based on Java. It offers a fluent caching API and some advanced features like asynchronous loading of entries, asynchronous refresh, weak referenced keys, etc.\n\nLink:\n\n14. Metrics\n\nOnce your Java application runs into production, you will want to have insight into your application's critical components. Metrics from the Dropwizard framework is a simple yet compelling Java library that provides insight into your application and JVMs KPI, e.g., rate of events, pending jobs, service health check, and more. It is modular and offers modules for other libraries/frameworks.\n\nLink:\n\n15. gRPC-Java\n\nGoogle has created gRPC as a modern Remote Procedure Call system in 2015. Since then, gRPC became extremely popular and one of the most used RPC system in modern software development. The library gRPC-Java is the Java implementation of the gRPC client. If you want to use gRPC in Java, then this library can be handy for you.\n\nLink:\n\n16. Java WebSocket\n\nTraditional Client-Server communications unidirectional. WebSocket is a bi-directional communication protocol over a single TCP connection. Java WebSocket is a barebone WebSocket server and client implementation in Java. If you are a Java developer and want to work with WebSocket, this library is highly recommended.\n\nLink:\n\n17. JJWT\n\nJSON Web Token (JWT) is the de-facto Authorization and secure Information exchange format in modern software development. Whether you are using a simple session-based Authorization or highly advanced OAuth2 based Authorization, you will probably use JWT. JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape. It is fully RFC specification compliant on all implemented functionality. It supports readable and convenient fluent API.\n\nLink:\n\n18. Swagger-Core\n\nOpenAPI is the specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. Swagger-Core is the Java implementation of the OpenAPI specification. If you are exposing REST API in your Java/JavaEE application, you can automatically provide and expose your API definitions using Swagger-Core.\n\nLink:\n\n19. Async Http Client\n\nAsynchronous programming is becoming increasingly popular of late because of its non-blocking nature. Most of the popular Java HTTP client libraries offer limited to no asynchronous HTTP response processing. Async Http Client is a popular Java library that offers asynchronous HTTP response processing. As a bonus feature, this library also supports the WebSocket protocol.\n\nLink:\n\n20. Liquibase\n\nAs a software developer, we all know the importance of version control, DevOps, and CI/CD of our code. In a blog post: Evolutionary Database Design, the great Martin Fowler argued that we also need version control and CI/CD of our code. Liquibase is a tool that supports tracking, version controlling, and deployment of SQL database changes in Java Applications. If you are working with an SQL database where the database is evolving, this tool can greatly simplify your database migration.\n\nLink:\n\n21. Springfox\n\nI have already listed Swagger-Core in this list, which can automatically generate REST API documentation for vanilla Java or Java EE application. In enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform. In Spring-based Java applications, the Springfox library can automatically generate REST API documentation from the source code.\n\nLink:\n\n22. JavaCV\n\nOpenCV is a computer vision and machine learning software library. It is open-source and was built to provide a common infrastructure for computer vision applications. JavaCV is a wrapper on OpenCV and many other popular libraries (FFmpeg, libdc 1394, PGR FlyCapture) in the field of computer vision. JavaCV also comes with hardware accelerated full-screen image display, easy-to-use methods to execute code in parallel on multiple cores, user-friendly geometric and the color calibration of cameras and projectors, detection and matching of feature points, and many other features.\n\nLink:\n\n23. Joda Time\n\nJava had a poor date and time functionalities in the pre-Java8 core library. Java8 released much needed advanced date and time functionalities in its java.time package. If you are working with an older version of Java (pre Java8), Joda time can provide you the advanced date and time functionalities. However, if you are working in a newer version of Java, you may not need this library.\n\nLink:\n\n24. Wiremock\n\nHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development. During the writing Unit test, it is best to focus on SUT (System Under Test) and mock the services used in the SUT. Wiremock is a simulator for REST API and enables developers to write code against an API that does not exist or incomplete. In microservice-based software development, Wiremock can significantly boost development velocity.\n\nLink:\n\n25. MapStruct\n\nIn Java application development, you often need to convert one type of POJO to another type of POJO. One way to achieve this POJO or Bean conversion is to explicitly code the transformation, which is tedious. The smart way is to use a library that is specifically developed to transform POJO/Bean. MapStruct is a code generator that implements mapping between POJO/Bean on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe, and easy to understand.\n\nLink:\n\nConclusion\n\nIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries. These libraries are not domain-specific and can help you whether you are developing Software for Business applications, Robotics, Android Apps or Personal projects. Please note that for a large and wide eco-system like Java, this list is not conclusive. There are many excellent Java libraries that I have not listed here but worth a try. But this list of libraries can provide a quick peek into the world of the Java eco-system.",
    "keywords": [
      "2020",
      "development",
      "lesserknown",
      "libraries",
      "try",
      "library",
      "25",
      "application",
      "java",
      "need",
      "offers",
      "programming",
      "software",
      "data"
    ]
  },
  {
    "url": "https://towardsdatascience.com/fastapi-has-ruined-flask-forever-for-me-73916127da?source=extreme_main_feed---------9-73--------------------7904dafb_4dba_4a4c_948f_9d5757a6ad2b-------",
    "title": "FastAPI has Ruined Flask Forever for Me",
    "publish_date": "2020-10-11 09:01:22",
    "authors": [
      "Fahmi Nurfikri"
    ],
    "summary": "FastAPI has Ruined Flask Forever for MeWhy I prefer using FastAPI instead of FlaskFastAPI Logo — https://fastapi.tiangolo.comWhat do you like best about being a data scientist?\nIf you need to look for something about FastAPI, you usually don’t need to look anywhere else.\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running.\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords.\nFastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.",
    "text": "FastAPI has Ruined Flask Forever for Me\n\nWhy I prefer using FastAPI instead of Flask\n\nFastAPI Logo — https://fastapi.tiangolo.com\n\nWhat do you like best about being a data scientist? It’s definitely modeling and fine-tuning for optimal results. But what does it mean to be a good model if it’s never used or never deployed?\n\nTo produce a machine learning model, the typical approach is to wrap it in a REST API and use it as a microservice. One of the most widely used frameworks for creating APIs is Flask.\n\nThe main reason Flask is widely used is its simplicity. In general, we only use the API to model predictions, so we don’t need a complex architecture (example: Django). Another reason is that Flask is written in Python, which is the language used to do machine learning modeling in general, so we are familiar with it.\n\nHowever, if you want to create a REST API with clear, static, inputs that are validated, you must include several different packages from several third parties that do not cooperate with each other. And you have to create custom code to get everything running.\n\nThis is what caused me to look for alternatives for my needs, where finally I found a framework called FastAPI and it became my new favorite framework. Here are the reasons why I like to use FastAPI.\n\nDocumentation\n\nThe first thing I notice from FastAPI is the documentation. FastAPI has very extensive documentation and rich examples, which makes things easier. If you need to look for something about FastAPI, you usually don’t need to look anywhere else.\n\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running. So that we don’t need to write the API documentation that we created ourselves. As we all know, writing API documentation is annoying, not only because there is a lot of detail to go into, but also nothing more frustrating when the end-users are implementing but not match up the documentation. So that with the automatic generation of API documentation it will be very helpful\n\nBelow is a display example of the API documentation (provided by Swagger UI)\n\nAlternative automatic documentation is also provided (provided by ReDoc)\n\nTo define the created schema, it uses Pydantic, which is another awesome Python library, used for data validation. Its purpose is to validate the input that goes to FastAPI. If the input/request is incorrect then the appropriate error code will be returned.\n\nPerformance\n\nAs the name implies, this is indeed FastAPI. Based on data from techempower benchmarks, FastAPI beats every framework when it comes to performance. Where the most commonly used frameworks like Flask and Django lag behind.\n\nFramework performance — techempower\n\nYeah, it blazingly fast.\n\nAsynchronous\n\nOne of the drawbacks of Flask is the lack of asynchronous I/O support. Asynchronous is pretty important for HTTP endpoints, which tend to do a lot of waiting for I/O and network chat, making it a good one candidate for concurrency using async.\n\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords. FastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.\n\nAll you have to do is declare the endpoints with the async keyword like this:",
    "keywords": [
      "api",
      "dont",
      "using",
      "forever",
      "framework",
      "documentation",
      "flask",
      "need",
      "used",
      "ruined",
      "asynchronous",
      "fastapi"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------7012206e_2568_4a2f_9039_35c0c6522498-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------7012206e_2568_4a2f_9039_35c0c6522498-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------7012206e_2568_4a2f_9039_35c0c6522498-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------7012206e_2568_4a2f_9039_35c0c6522498-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------7012206e_2568_4a2f_9039_35c0c6522498-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://williamfleitch.medium.com/there-will-be-no-laughing-on-election-night-3d1d498afc38?source=extreme_main_feed---------1-74--------------------b4ea9e7b_5036_412c_9420_4a0bc2e05a2a-------",
    "title": "There Will Be No Laughing on Election Night",
    "publish_date": "2020-10-13 20:34:19",
    "authors": [
      "Will Leitch"
    ],
    "summary": "But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off.\nBut one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000.\nAlready cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious.\nThere is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified.\nBut I damn sure know it won’t be funny.",
    "text": "NBC\n\nIn November 2000, I fell asleep to Al Gore being declared the next president, woke up to George W. Bush having won, and by lunchtime no one had any idea who had won or what was going on. What I remember the most is finding the whole thing very funny. And it was funny.\n\nI know now that being able to find such chaos amusing was a privilege, and an ugly one, of being an aimless but mostly comfortable white kid in his early 20s. One can argue about the specific differences of how the world would have turned out had Al Gore become president instead of George W. Bush, but there’s no question there were definite differences. But if you followed the race in 2000, this was not what everybody thought. I covered protests at the Democratic National Convention in Los Angeles that year — the same one Barack Obama couldn’t even get into — and the one thing every protestor believed, along with most young Gen Xers like myself, was that it didn’t matter whether the next president was Bush or Gore: They were two variations of the same flavor. That the race ended up so close sure didn’t feel like an accident. If you ask 300 million people whether they’d prefer two nickels or a dime, you shouldn’t be surprised when the results are 50–50. The madness that followed the close vote felt not like a moment of democratic peril. It felt like the logical conclusion to an incredibly stupid process. You just had to laugh.\n\nWhile watching 537 Votes, a new documentary about the 2000 Florida recount (and specifically the Miami-Dade county non-recount) that airs on HBO on October 21, I was reminded that it wasn’t just snarky former grunge kids who thought all this was ridiculous. The documentary itself is mediocre, more interested in cheap nostalgia and sight gags than the psychology of the era (director Billy Corben of Cocaine Cowboys has a persistent habit of dressing up his films with gimmicks rather than trusting his story to tell itself), but its ability to mine cultural artifacts of that time is remarkable. There’s a ton of clips from The Daily Show, and they each make a strong argument that the smugness that ultimately drove us all away from Jon Stewart was there from the get-go. There’s a reminder that Craig Kilborn used to host a late-night talk show. And there is a Wanda Sykes riff on Florida that is even rawer and more cutting 20 years later. But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off. Seriously, they found all of this hilarious. The most famous voice that night was Dan Rather and all his goofy homespun sayings—“If a frog had side pockets, he’d carry a hand gun”—but everyone was yucking it up. Second place was Tim Russert, the evening’s breakout star, with his whiteboards and his red states and blue states, with a big giddy grin on his face throughout, even at 3:17 a.m., like this was the most fun he’s ever had in his life. Isn’t this a blast? You hear the crew cackling off stage. What a night!\n\nIt sure seems less funny now.\n\nThere are many, many ways that 2020 is worse than 2000. (Sheesh, in 2000, Joe Rogan was just that guy from “NewsRadio.”) As Clare Malone pointed out in a fantastic piece for FiveThirtyEight, we’re a lot more polarized and a lot less likely to just give up and accept it if our preferred candidate loses in a tightly contested election. But one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000. Already cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious. There is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified. There is an awareness that if we are not careful about this democratic process, the whole thing could collapse.\n\nThere was none of that in 2000. It was all just a wacky story—this election is crazy close!—that was covered as if the stakes were a lot lower than they were. (Within three years, the NASDAQ collapsed, 9/11 happened and we were in multiple wars. The stakes turned out to be pretty freaking high.) What has changed, of course, is that we now know what a difference it can make when one candidate wins and one loses, that the entire nation is a fire just waiting for kindling, and that there are bad actors eager to pounce at the first sign of uncertainty. History will be made, and our anchors and analysts, by all accounts, understand how precise and meticulous they will need to be. And they understand, mostly, just how ungodly serious this is. And that’s where we’ve changed the most. In 2000, it felt like America would be around, and strong, forever, no matter who won, that the democratic process would do its job and we’d all be fine. Twenty years later, we’ve had 9/11 and endless wars and economic collapses and pandemics and Donald Trump. There are no illusions that America will just automatically land on its feet anymore. I don’t know how the networks, or the public, will react to what happens on November 3. But I damn sure know it won’t be funny.\n\nWill Leitch will be writing multiple pieces a week for Medium. He lives in Athens, Georgia, with his family, and is the author of five books, including the upcoming novel “How Lucky,” released by Harper next May. He also writes a free weekly newsletter that you might enjoy.",
    "keywords": [
      "sure",
      "2000",
      "lot",
      "night",
      "laughing",
      "democratic",
      "know",
      "thing",
      "election",
      "watching",
      "won"
    ]
  },
  {
    "url": "https://marquisele.medium.com/we-do-not-deserve-hospitals-abd8756d7bbf?source=extreme_main_feed---------2-74--------------------b4ea9e7b_5036_412c_9420_4a0bc2e05a2a-------",
    "title": "We Do Not Deserve Hospitals",
    "publish_date": "2020-10-15 03:05:18",
    "authors": [
      "Marquisele Mercedes"
    ],
    "summary": "We Do Not Deserve HospitalsMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\nAt one point, I was sent to another room nearby that was a little larger and had no extra chairs.\nMy mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy.\nHave you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum?\nHas a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?",
    "text": "We Do Not Deserve Hospitals\n\nMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\n\nSource: Unsplash\n\nOn a night in my early teens, I went to the Pediatric Emergency Department at Montefiore’s Children’s Hospital for intense cramps. I was expecting my period in a few days, but had never felt that way before — like a heat lamp was burning into the meat of my pelvis.\n\nMy mother and I spent the better part of 9 hours in a tiny room with speckled vinyl floors and too-bright fluorescents. At one point, I was sent to another room nearby that was a little larger and had no extra chairs. My mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy. A nurse told me to undress from the waist down and wait for the doctor.\n\nMy doctor came in and asked me — in a few different ways — if I’d ever been “penetrated”. I had not and said so — repeatedly. She referenced the development of my body, implied the crudeness of the boys around me. It was an unsaid question, but one that still required an answer. “No,” I said, “I’ve never put anything in there.” She said “if you say so”, before telling me to lay down, scoot my butt towards the end of the examination table, and spread my legs so she could “take a look.”\n\nI didn’t know what that meant, but she was the doctor, so I did what she told me to do.\n\nHave you ever screamed “no!” and “stop!” at the top of your lungs while being penetrated by an unidentified object that scraped at your most intimate insides? Have you ever been told to “be still” and “hold on” like your pain was the most mundane thing that had ever happened? Have you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum? Have you ever redressed yourself afterwards with shaky hands and legs and raucously laughed about it to your mom who was just a few feet away getting a cup of water when she heard the tail-end of your screams? Has a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?\n\nI was sent home with instructions to take Motrin and “stay out of trouble”. My mother and I rode the bus while she angrily pondered on whether I was still a virgin. I wrapped my arms around my middle and tried to protect something that felt like pierced cellophane. The tests for STIs came back clean.",
    "keywords": [
      "sent",
      "doctor",
      "mother",
      "required",
      "penetrated",
      "hospitals",
      "stop",
      "wait",
      "told",
      "deserve",
      "room",
      "say"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------b4ea9e7b_5036_412c_9420_4a0bc2e05a2a-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------4-73--------------------b4ea9e7b_5036_412c_9420_4a0bc2e05a2a-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------5-73--------------------b4ea9e7b_5036_412c_9420_4a0bc2e05a2a-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------6-73--------------------b4ea9e7b_5036_412c_9420_4a0bc2e05a2a-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/the-ascent/how-to-make-enough-money-to-retire-in-the-next-5-years-6a7683ce5a16?source=extreme_main_feed---------7-73--------------------b4ea9e7b_5036_412c_9420_4a0bc2e05a2a-------",
    "title": "How To Make Enough Money to Retire in the Next 5 Years",
    "publish_date": "2020-09-22 13:02:22",
    "authors": [
      "Tim Denning"
    ],
    "summary": "Take the money from your online business and pour it into cars and free drinks for attractive people you want to sleep with.\nWatch yourself lose your mind from all the money and the thought of it been taken away from you.\nTrade in the luxury life for a simple life that is enforced by how much money you have in your back pocket.\nServe people who have money, and who don’t have money.\nHave money allow you to buy back your time, instead of spending money on things that create a never-ending trail of debt.",
    "text": "1. Invest your money rather than save.\n\nSaving your money is stupid. Inflation will eat away at your money. You make money when you invest what you have in real assets.\n\n2. Understand the idea of purchasing power.\n\nGovernments print money to fight recessions, and fund wars. When they do, they take away the purchasing power of the money you have earned. The only way to repay the huge debt the US Government has racked up is by either: 1) Raising taxes 2) Printing money out of thin air.\n\nIncreasing taxes won’t repay the debt. That leaves option two which we’ve been doing as a global economy since 2008. You can overcome the attack on your purchasing power when you learn about inflation hedge assets.\n\n3. Lose all of your money.\n\nLet money show you another side to life. Start a business with your family. Choose a marketplace to sell on. Import goods from China. Buy low and sell high. Let the business become huge. Bring on investors and see that they are like having a boss whip you with a whip.\n\nBelieve you were destined to be a hot shot entrepreneur. Take the money from your online business and pour it into cars and free drinks for attractive people you want to sleep with. Become a total ass in the process. Treat people like absolute dirt. Tell poor people to work harder. Abuse random charities and tell them to stop asking for donations. Let your ego run your life.\n\nStart a second business using your overconfidence from the first business. Park your car each morning in the reserved car space for BMWs and Mercs only. Get out of the car and slam the door like a boss. Keep your head up so you look confident. Walk into the office and give advice to people twice your age. Take the intersection of luck and the rise of the internet for granted. Tell yourself you’re amazing and you built this empire because you’re brilliant.\n\nGo out on the weekends and try and pickup using your money. Flash $100 bills. Talk down to the bar staff. Tip service workers like they’re your slaves and you’re the emperor. Wear loafers that cost twice the weekly minimum wage of a person you call a ‘worker.’\n\nWhile all of this is going on, get greedy. Not just a little bit greedy. Treat your family like they serve you now. Don’t visit your grandparents or repair broken relationships with aunties and uncles. You’re too busy hustling and making money. Keep making the money. Watch the problems enter your life. Watch those problems get out of control.\n\nSee, in a matter of months, your money-making machine almost crumble because of one bad decision. Realize the end is near. Find yourself out on the streets late at night talking to your employees and predicting conspiracies. Watch yourself lose your mind from all the money and the thought of it been taken away from you. Watch your self-worth become your net-worth.\n\nShow up to the office one day and realize it’s all over. Say goodbye to the employees while you hold back tears. Pretend to be strong when you know you’re weak. Offer to give them references for their next job, knowing you’ll be lucky to find a job yourself.\n\nGo home when it’s all over. Sell the luxury car. Catch trains to visit friends. Learn what it’s like to have nothing. Check your bank account and see your savings evaporate fast. Trade in the luxury life for a simple life that is enforced by how much money you have in your back pocket. Accept the gift of an old car from a kind family member you neglected when you had your business.\n\nDrive their car back to your empty home. Pick up the car cleaning accessories you had for your BMW. Take the car down to the local car wash and see if you can shine it into something that resembles the BMW. Watch your worst nightmare, a big spider, jump out from underneath the car. Scream at the top of your voice and then watch it crawl away.\n\nFinish cleaning the car and notice how it hasn’t morphed into anything you could imagine in your dreams. Feel slightly grateful you even have a car for a few brief moments.\n\nReturn home and look for a job. Apply for everything. Watch the phone never ring and the thought of moving in with distant family, to survive, become a reality. Keep trying. Pick up the phone one Monday morning and talk to a nice lady named Fiona on the other end. Say hi and pretend to be okay when you’re not okay. Say yes to the job interview knowing something is wrong… you feel sick.\n\nSee the doctor. Try and find out what is wrong with you. Try all of their suggestions: a change in diet, fructose tests, colon inspections. Roll up the following week for the job interview. Have the thought of presenting your failed business journey almost bring you to tears. Watch your hands shake and feel the sweat drip down your back and stink out the interview room.\n\nGet a call saying you made it. You got a job in a call center working for a bank. Notice the contrast between making loads of money and earning minimum wage. Work at the bank for eight years. Learn about how money works. Serve people who have money, and who don’t have money.\n\nSpend your time after work learning about different assets: stocks, real estate, gold, digital currencies, bonds, cash. Apply the knowledge and invest what you earn. Take the money you earn from being a part-time writer and invest it, too. Feel like you’re smart with money. Watch the money grow. Make enough money to cover all of your expenses for a year, in advance. Feel no different.\n\nSimultaneously, work on yourself. Face your inner demons. Get help. Face mental illness too. Be kind to yourself. Realize you’re doing the best you can. Forgive yourself for your messy past, where you acted like a dictator with too much money. Say sorry to the people you hurt. Forgive people who you banned for life because they violated one of your rules. Forgive people for no reason at all.\n\nLook at what makes you happy now: family, your partner, messages from readers, mending of broken relationships.\n\nFeel what it’s like not to run towards money. Notice how fancy cars, houses and luxury goods have zero appeal to you. Take the simple things in life and let them change your life.\n\nHave money allow you to buy back your time, instead of spending money on things that create a never-ending trail of debt. Make the acquisition of wealth secondary. Focus on how you can be helpful. Get excited by all the people you can meet and do life with.\n\nLearn to make a difference rather than a profit.\n\n4. Become a content creator.\n\nContent creators are part of one of the biggest wealth transfers in history. Everything is content. Storytelling through words, videos, audio, photography and illustrations is a booming business.",
    "keywords": [
      "life",
      "family",
      "job",
      "retire",
      "car",
      "money",
      "watch",
      "feel",
      "work",
      "business",
      "youre"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/steve-jobss-definition-of-smart-will-make-you-rethink-your-actions-6b1d7873fd46?source=extreme_main_feed---------8-73--------------------b4ea9e7b_5036_412c_9420_4a0bc2e05a2a-------",
    "title": "Steve Jobs’s Definition of “Smart” Will Reprogram Your Idea of Intelligence",
    "publish_date": "2020-09-10 17:51:04",
    "authors": [
      "Alan Trapulionis"
    ],
    "summary": "Steve Jobs: “You have to not have the same bag of experiences as everyone else does”Recently, I’ve come across a video where a young Steve Jobs explains a key characteristic of what he considers to be a smart person.\nHow do you increase your intelligence to become what Jobs considers to be a “smart” person?\nAccording to the visionary — it’s all about having unique life experiences.\nOn Ferriss’s podcast, Lütke went in-depth about the books that changed his life — carefully describing each one of them.\nBooks are the easiest way for introverts to gather unique insights that shape their own worldview.",
    "text": "Steve Jobs: “You have to not have the same bag of experiences as everyone else does”\n\nRecently, I’ve come across a video where a young Steve Jobs explains a key characteristic of what he considers to be a smart person.\n\nI expected to hear something among the lines of “thinking out of the box” and “unflinching dedication.” Instead, I discovered one of the most profound pieces of advice I’ve ever heard.\n\n“A lot of [what it means to be smart] is the ability to zoom out, like you’re in a city and you could look at the whole thing from the 80th floor down at the city. And while other people are trying to figure out how to get from point A to point B reading these stupid little maps, you could just see it in front of you. You can see the whole thing.”\n\nJobs masterfully notes that smart people often make connections that seem obvious to them, but perplexing to others — simply because they have developed the skill of “zooming out” to get a better view of the big picture.\n\nThis, of course, sounds great and we can all agree that in order to change the world you need to clearly see the world. But how do you do that? How do you increase your intelligence to become what Jobs considers to be a “smart” person?\n\nAccording to the visionary — it’s all about having unique life experiences.\n\n“You have to not have the same bag of experiences as everyone else does, or else you’re gonna make the same connections and you won’t be innovative. […] You might want to think about going to Paris and being a poet for a few years. Or you might want to go to a third-world country — I’d highly advise that. Falling in love with two people at once. Walt Disney took LSD, do you know that?”\n\nIt makes sense. A 2015 study has concluded that openness to experience was the best predictor for “job performance in situations requiring creativity,” which is every entrepreneur’s bread and butter. It’s also safe to say that any significant career step up will require a decisive innovative move.\n\nThe study also found that extraversion “played a key role in contexts involving social interactions,” which is hardly a surprise, but a healthy reminder nonetheless. These findings tie in nicely with what Jobs said — people who are open to experience and extroverted will seek out the most interesting, non-standard situations in life — and gain invaluable perspectives as a result.\n\nJobs’ idea also helps explain why so many successful entrepreneurs are avid readers. Divyank Turakhia, a 35-year old Indian tech billionaire, has once said that since the age of 15 he has read for 800 hours a year, every year. Tobias Lütke, Shopify’s billionaire founder, was described by Tim Ferriss as one of the most aggressive readers he’d ever met.\n\nIt’s probably not the information itself that these leaders value about books, but rather how they change their perspective. On Ferriss’s podcast, Lütke went in-depth about the books that changed his life — carefully describing each one of them.\n\nBooks are the easiest way for introverts to gather unique insights that shape their own worldview. They expand your mental horizons, so it makes sense that someone who’s read 100 classic business books can spot a rising trend or a missed opportunity before anyone else.",
    "keywords": [
      "life",
      "youre",
      "world",
      "situations",
      "jobss",
      "books",
      "study",
      "unique",
      "intelligence",
      "idea",
      "jobs",
      "reprogram",
      "steve",
      "smart",
      "definition"
    ]
  },
  {
    "url": "https://medium.com/better-marketing/why-is-linkedin-such-a-cringefest-b2b29ca60833?source=extreme_main_feed---------9-73--------------------b4ea9e7b_5036_412c_9420_4a0bc2e05a2a-------",
    "title": "Why Is LinkedIn Such a Cringefest?",
    "publish_date": "2020-09-01 18:54:04",
    "authors": [
      "Sean Kernan"
    ],
    "summary": "For example, Rule #1 of getting internet points (be hot), applies to LinkedIn, even if the post has no relation to the purpose of the platform.\nJust as an FYI, if you leave a comment on a LinkedIn post, it’s automatically going to show that post, with your comment highlighted, to a number of your connections.\nHe emailed me something to the effect of, “How’d you know that about that wolf post?” Then I explained it to him (I consume a lot of wildlife documentaries), and also explained my harsh tone.\nAuthor via LinkedinLove it or hate it, Linkedin is full of lurkers.\nLinkedIn has become a meme.",
    "text": "Why Do Such Trash Posts Go Viral?\n\nThere’s a couple of reasons.\n\nYes, short attention spans are a part of it. But, by far, the biggest contributor is that lots of users aren’t good at English. And I say that with no malice.\n\nMany non-native speakers see these posts and can’t see the nuance of why it’s terrible writing. But they recognize the simple verbs and nouns. They put the puzzle together and hail praise to the mighty turd.\n\nI can't blame them. I’d probably upvote a Spanish shitpost without knowing it.\n\nHere’s a tone-deaf example. This went super-viral:\n\nSource: author via linkedin\n\nNote on the above: they said they don’t want money but then later in the post say they want a salary increase.\n\nQuick side tip: don’t capitalize words unless there is a very specific reason. The tone can be interpreted as a bit hostile. Also, don’t ever write a post like that.\n\nMy theory is that any algorithm-based platform, including Medium, will eventually devolve into Facebook without some sort of intervention. Human beings don't know how to optimize for quality on their own.\n\nFor example, Rule #1 of getting internet points (be hot), applies to LinkedIn, even if the post has no relation to the purpose of the platform.\n\nCase in point:\n\nAuthor via Linkedin\n\nTheir English might be bad. But all men are fluent in thirst. Just as an FYI, if you leave a comment on a LinkedIn post, it’s automatically going to show that post, with your comment highlighted, to a number of your connections.\n\nIt won’t be great personal branding. I learned this first hand.\n\nI was messaged by my CEO after I left a frustrated comment on a post. You may recognize the post. It goes viral at least once a year.\n\nAuthor via ipinimig\n\nThere will always be thousands of comments about how amazing this meme is and how companies should be just like wolf packs.\n\nThe problem? That isn’t how wolf packs operate.\n\nThe alpha doesn’t just sit at the back and it’s ridiculous that this meme keeps getting recirculated. No, this fake-story isn’t a world-changing issue. It’s just annoying that people just make up science to fit a clicky narrative.\n\nI left a comment correcting it, perhaps a bit bluntly. My comment got buried in the cluttered sludge of fanboys. Unexpectedly, my CEO saw the comment.\n\nHe emailed me something to the effect of, “How’d you know that about that wolf post?” Then I explained it to him (I consume a lot of wildlife documentaries), and also explained my harsh tone.\n\nI’ll give you one last example. It is constantly going viral.\n\nSource: author via factcheck\n\nThis isn’t what happened. The baby on the right isn’t even the same baby. The girl on the right is the sister of the girl on the left.\n\nThe bigger point: we need to be careful about how we engage on these platforms. It’s super easy to look like a dumb-dumb because of all the blatantly false content that floats around.\n\nAdditionally, we need to be mindful of our ego. Resist the urge to flex post.\n\nAuthor via Linkedin\n\nLove it or hate it, Linkedin is full of lurkers. They are quick to judge. And many of those judgemental lurkers scan resumes for a living. Don’t be a cringe bot.\n\nLinkedIn has become a meme. But you don’t have to be part of it. Lest you join the annals of bad marketing.\n\nAnd men, enough with the thirst comments. It’s super weird. In the history of man, I don’t think they’ve ever led to anything good, particularly when your supervisor sees it.",
    "keywords": [
      "dont",
      "isnt",
      "cringefest",
      "thirst",
      "example",
      "linkedin",
      "comment",
      "post",
      "meme",
      "super",
      "wolf"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------7bbf8751_61d5_48f1_a8f7_500448d17d24-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------7bbf8751_61d5_48f1_a8f7_500448d17d24-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------7bbf8751_61d5_48f1_a8f7_500448d17d24-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------7bbf8751_61d5_48f1_a8f7_500448d17d24-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------7bbf8751_61d5_48f1_a8f7_500448d17d24-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------0-74--------------------69d5fe65_52ce_43a8_9df3_9b9280352ebd-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://humanparts.medium.com/how-well-get-over-going-to-the-upper-room-with-donald-j-trump-4d63f2e9741a?source=extreme_main_feed---------1-74--------------------69d5fe65_52ce_43a8_9df3_9b9280352ebd-------",
    "title": "How We’ll Get Over: Going to the Upper Room With Donald J. Trump",
    "publish_date": "2020-10-15 21:12:55",
    "authors": [
      "Max S. Gordon"
    ],
    "summary": "What we are facing is bigger than Donald Trump.\nOr maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose.\nPolitically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved.\nIf, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.",
    "text": "We’ve been here before. Our ancestors knew, when you can’t control the evil of the world, you must become the weather. A howling wind through the trees, a blistering sun, an irresistible force. Our democracy is on a respirator now, and we must defend it.\n\nJustice and nonviolent resistance became an electrifying force in 1955 when working-class Blacks who relied on the buses in Montgomery, Alabama, shut down the discriminatory system for an entire year, permanently changing the laws in that city. We need the spirit of transcendence that led these heroic women and men, many of them maids and laborers, to walk to work each day and say, “I can’t feel the hurt in my feet when there is a balm for my soul. And I will walk five more miles to work if it means a better life for my children.”\n\nWe need the Holy Ghost power that stopped Eugene “Bull” O’Connor, the commissioner of public safety in Birmingham, Alabama, when he ordered a battalion of firefighters to turn hoses on a crowd of protesters, including children, on May 5, 1963, often called “Miracle Sunday.” The firefighters not only resisted the order—it was reported that some of them cried.\n\nThe power of the crowd, who had walked from a local church, was both vulnerable and authoritative — a compelling, mystical combination. Whatever racist trance had possessed those firefighters when they’d hosed the same crowds only days before, it was broken, perhaps when they looked at the children and thought, “The little girl I am aiming this hose at could be mine.” Rev. Martin Luther King, Jr. later wrote, “I felt there, for the first time, the pride and the power of nonviolence.”\n\nThe alchemy of grace and conviction works. It has worked. I know because I am alive. I write these words with the knowledge that once upon a time someone who belonged to my family would have been whipped or worse for even trying to learn the alphabet. Yet I read, I write. Something they did to survive must have worked — because I’m here.\n\nNo matter how much they try to distort the truth on Fox News or make us feel like fools for believing, the sacrifices of earlier generations matter. How many women had to die on kitchen floors and back alleys for just one woman to walk into a care facility, protected by Roe v. Wade, and make an appointment for her health — legally and safely? We will not go back. Their sacrifices matter. And we owe them our determination to see that Roe v. Wade is not overturned. A persuasive river of courage flows through history, from Harriet Tubman to the suffragettes to the rioters at Stonewall. We’ll never know all the names, but we know that river exists — because we’re here.\n\nHistory has always had rogues, scoundrels, reprobates, damn fools, men who have acted as children. Bullies. Dictators. As a human family, we’ve seen astounding acts of evil. But the thing about evil is not to make it personal or to take it personally. We have to look beyond the actors. The only way to combat evil is not to respond with evil, but to invest in a more compelling vision. Because of someone’s vision, I am married to the man I love.\n\n7\n\nWelcome to Niggerland. A place on the outskirts of town where there has been crime and poverty and drugs and lack of health care and denied educational opportunities. My white friends, you were once untouched by the pain of the people who live there. But please know, those divisions no longer exist the way they once did. Perhaps Donald Trump’s greatest achievement is that he’s turned every American into a nigger, black or white (including a few people who are convinced they hate niggers). One way or another, we’re all in the soup now.\n\nNigger. It’s an unpleasant word, and forgive me for using it, but it’s the right word. It’s not a Black person’s shame, but a white society’s shame for its ugliness. It’s a word meant to terrorize a group of people within a system of oppression and make them feel powerless so they won’t act and try to change it. In other words, in Donald Trump’s eyes, we’re all niggers now. There isn’t a single person or institution he doesn’t have contempt for.\n\nWhat we are facing is bigger than Donald Trump. Perhaps he is the fulfillment of America’s karma in the world, our political shadow finally come to life. Or maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose. He is the personification of the Ugly American trope, vulgarity incarnate, an ambling Frankenstein monster ripping the village apart with his bare hands. Politically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\n\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved. His message isn’t really new—it’s his malevolence that’s profound. Maybe one day we will perceive his legacy as an opportunity that afforded fundamental change. If, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.\n\nWe may not change his heart, but we need to alter ourselves so we are different when and if the next monster arrives. In the aftermath of what happens, assessments will be made, and we will have to acknowledge that while solidarity eventually came from unexpected sources — Republicans willing to abandon their tribe — this went on for far too long, and too many lives were lost.\n\n8\n\nThere is a Black teenage girl who studies her lipstick one more time in the mirror before cutting off the bathroom light. She is going to a demonstration. There may be violence. But she believes in that preacher, Dr. King, and the sermon he preached on racial equality last Sunday. She knows it is dangerous; they’ve unleashed dogs on protestors; they turned hoses on families, pinning them against buildings and cars. People have been jailed, students have been clubbed, just for having the audacity to want to go to school with whites, to vote without retaliation.\n\nIt is 1957, and only a girl herself, she has no way of knowing that one day her daughter will look back at her through history. Her daughter will move into her dorm at a public university, buy her books, and although every battle won’t have been won, she will walk into the classroom her mother envisioned for her, without having to be escorted by the National Guard. She will claim the seat her mother earned.\n\nWe have a legacy to uphold; we have ancestors to honor. We’ve been here before. The names are always different. But whenever justice is threatened anywhere, there are always brave ones.\n\n9\n\nRevolution begins with a flower. Hold it your hand. And know that the man who owns real estate and golf courses all over world, in all his presumed omnipotence, doesn’t have the power to make a single flower.\n\nAnd if he chooses to destroy that flower, there’s another flower next to it in the field. There will always be flowers. Legions of them, as there are legions of us.\n\nAnd when your hope is restored and you remember who you are and what is possible to achieve with fortitude and grace, step out the door with that flower in your hair.\n\nAnd act.",
    "keywords": [
      "trump",
      "world",
      "way",
      "weve",
      "upper",
      "evil",
      "j",
      "going",
      "know",
      "power",
      "walk",
      "white",
      "room",
      "donald"
    ]
  },
  {
    "url": "https://coronavirus.medium.com/the-company-set-to-roll-out-americas-future-vaccine-cb56ea9691fa?source=extreme_main_feed---------2-74--------------------69d5fe65_52ce_43a8_9df3_9b9280352ebd-------",
    "title": "The Company Set to Roll Out America’s Future Vaccine",
    "publish_date": "2020-10-15 20:44:45",
    "authors": [
      "Yasmin Tayag"
    ],
    "summary": "The Company Set to Roll Out America’s Future VaccineThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccinesMario Tama / Getty ImagesWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages.\nIt’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history.\nIn August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\nAt the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention.\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made.",
    "text": "The Company Set to Roll Out America’s Future Vaccine\n\nThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccines\n\nMario Tama / Getty Images\n\nWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages. It’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history. To do the job, the White House has contracted a company called McKesson Corporation. In August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\n\nThis isn’t McKesson Corporation’s first vaccine-distribution rodeo. The company, founded 187 years ago and the seventh-largest U.S. company in terms of revenue in 2019, was also responsible for managing the distribution of the H1N1 vaccine to as many as 90,000 sites across the U.S. during the 2009 swine flu outbreak. At the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention. The company has also had an existing contract with the CDC to distribute childrens’ vaccines since 2016, and its role in distributing vaccines during the pandemic is based on that contract. Its success during the H1N1 epidemic bodes well for Covid-19 rollout, but U.S. public health infrastructure may continue to pose problems.\n\nAs I wrote previously, the specifics of how a vaccine will be distributed by McKesson — and who will get it first — are not yet clear. In an email to the Medium Coronavirus Blog, Robert Redfield, PhD, director of the CDC, said: “Through the Advisory Committee on Immunization Practices, CDC will play a vital role in deciding, based on input from experts and stakeholders, how initial, limited vaccine doses will be allocated and distributed while reliably producing more than 100 million doses by January 2021.” McKesson shared its public statement about its CDC partnership with the Blog but did not answer questions.\n\nThere does seem to be a plan to determine where exactly McKesson will distribute vaccines, according to the HHS. A spokesperson for the agency tells the Blog that ensuring easy access for all Americans, notably minority communities and medically underserved populations, is a top priority. “Whether it’s at a doctor’s office, retail pharmacy, federally qualified health center, or hospital,” they said, “thousands of outlets will be available so no American must travel far to be vaccinated.”\n\nThe plan is that McKesson will deliver a specific amount of vaccine to a designated location once it’s allocated to a given jurisdiction or authorized partner. In many instances, says the spokesperson, these will be sites where the vaccine will actually be administered; in others, McKesson will deliver vaccines to sites where health departments will pick up the vaccine and further distribute it within their networks. National retail pharmacies will also use a similar system. “This system,” says the spokesperson, “will be scalable to meet demand.”\n\nUntil more is known about the vaccine to be distributed, it’s not clear how it will be transported. Some vaccines are more delicate than others, and sometimes they require refrigeration. According to HHS, if the vaccine has ultra-cold storage requirements, it may be shipped directly from the manufacturer to administration sites, but this too will be managed within McKesson’s centralized system. The contract the company has with the CDC covers the transportation of both refrigerated (2–8º Celsius) and frozen (-20ºC) vaccines.\n\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made. The HHS spokesperson says the U.S. government is “committed to working with other countries friendly to our national security to ensure safe and effective Covid-19 vaccines are developed as fast as possible, however, the vaccine and therapeutic candidates [Operation Warp Speed] has invested in are the candidates OWS believes to be the most promising, and all of those candidates are being manufactured in the U.S.”\n\nMcKesson’s performance during the H1N1 epidemic in 2009 bodes well for the Covid-19 pandemic: During that time, it distributed almost 81 million H1N1 vaccine doses to 90,000 sites. However, notes journalist Michele Cohen Marill in the medical publication Medscape this week, distribution ran into obstacles at the public health level: “Public health officials struggled with the mechanics of designating priority groups and reaching out to them for vaccination while asking others to wait.”\n\n“I’m not sure there’s much difference between 1976, 2009, and 2020–2021,” Rebecca Wurtz, MD, MPH, of the University of Minnesota School of Public Health in Minneapolis, told Medscape. “The issues around organizing a massive distribution of a new vaccine are pretty similar.”\n\nThe U.S. can’t afford to make administrative errors during the Covid-19 pandemic, especially as the fall surge continues and the death toll mounts. States ultimately shape the actual vaccination programs, notes Marill in Medscape, and it’s up to them to decide who can administer the vaccine, and where. The hope is that state governments authorize as many people as possible to safely administer the vaccine and make access to it widespread and equitable. Neighborhood pharmacies will likely play a key role, as the HHS spokesperson suggests: “For example, during H1N1, once vaccines became widely available pharmacies played an important role in the vaccine distribution,” they said, adding that pharmacies’ role “is even more critical to vaccinations today and will be fully integrated into the distribution plan.”",
    "keywords": [
      "role",
      "future",
      "company",
      "mckesson",
      "public",
      "set",
      "roll",
      "distribution",
      "vaccines",
      "vaccine",
      "health",
      "spokesperson",
      "americas",
      "covid19"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------69d5fe65_52ce_43a8_9df3_9b9280352ebd-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://towardsdatascience.com/25-lesser-known-java-libraries-you-should-try-ff8abd354a94?source=extreme_main_feed---------4-73--------------------69d5fe65_52ce_43a8_9df3_9b9280352ebd-------",
    "title": "25 lesser-known Java libraries you should try in 2020",
    "publish_date": "2020-10-07 22:09:24",
    "authors": [
      "Md Kamaruzzaman"
    ],
    "summary": "JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape.\nIn enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform.\nWiremockHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development.\nLink:ConclusionIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries.\nThere are many excellent Java libraries that I have not listed here but worth a try.",
    "text": "1. RxJava\n\nReactive Extensions (ReactiveX) is a popular software development paradigm to deal with asynchronous and event-driven programming. RxJava is the Java VM implementations of the Reactive Extensions by using Observables. It extends the Observer Pattern to support event-driven programming by adding composable operators on a sequence of events/data in a declarative way. It also hides the low-level complexities like threading, thread-safety, synchronization, and concurrent data structure.\n\nIf you want to do reactive programming in Java, it is a must-have library.\n\nLink:\n\n2. OkHttp\n\nHTTP is by far the most used Application layer protocol. There are many excellent Java-based HTTP client libraries out there. But OkHttp is the simplest yet powerful HTTP client library in the JVM. It offers fluent and clean API to develop HTTP client in Java.\n\nIt also supports some advanced features: Connection pooling, GZIP shrink, response caching, modern TLS features, and many more.\n\nLink:\n\n3. MyBatis\n\nIn most Software development projects, we need to store data. Although there are many types of data storage, SQL is still the most used data storage type. As a Java developer, we need to match our Java object to the SQL table. One way to achieve the mapping is to use ORM (e.g., Hibernate). But there are many use cases when you want to have full control over the Object-Table mapping (e.g., Performance). In those cases, you can directly use JDBC and write the SQL query. The other way is to use MyBatis to map Java Object to Stored Procedure or SQL statements. It offers both annotation-based or XML descriptor based mapping.\n\nI prefer MyBatis over plain JDBC, especially in larger projects, as it improves the separation of concerns.\n\nLink:\n\n4. HikariCP\n\nHikariCP is the second library in this list related to Database. Establishing a JDBC connection is resource expensive. If you create a new connection every time you access the Database and close it once you are done, it can severely impact your application performance. Not to mention that failure to close the connection properly or allowing limitless database connection can crash your application.\n\nUsing Connection Pooling means connections are reused rather than created each time a connection is requested. HikariCP is a very fast yet lightweight Database connection pooling in JVM. It is also very reliable and a “zero-overhead” JDBC connection pool.\n\nLink:\n\n5. Lombok\n\nIn modern days, Java is often criticized as a verbose and bloated programming language. Compared to other popular languages (JavaScript, Python, Scala, Kotlin), a developer needs to write lots of boilerplate code in Java. Although Java has introduced Records in JDK 15 to reduce boilerplate code in Java, it is not an LTS release. Fortunately, a library can already reduce your boilerplate code in Java significantly: Project Lombok. You can generate getters, setters, hashcode, equals, toString, Builder classes by adding a few annotations. Additionally, it offers null pointer check, logger, and many more.\n\nLink:\n\n6. VAVR\n\nJava finally released the much-awaited functional programming via Lambda and Streaming in version 8. If you are used to functional programming or want to dive deep into functional programming, you may find Java’s functional programming wanting. Compared to many other functional programming languages (Haskell, Scala), Java is pale. VAVR is a library that can fill the gap of the functional programming features in Java. It provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nLink:\n\n7. Gson\n\nOver the years, JSON has become the de-facto data exchange format. In Java, there also exist several excellent libraries to deal with JSON. One of them is Jackson, which I have covered in my previous article. The other excellent library is Google’s Gson. Unlike Jackson, it is a minimalistic library and only supports JSON. It offers Data Binding, extensive Generic support, flexible customization. One of the major advantage (or disadvantage depending on your liking) of Gson is that it does not need annotation.\n\nLink:\n\n8. jsoup\n\nIf you are developing your application in Java and need to deal with HTML, you should use jsoup. It is a Java library to work with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data. It implements the WHATWG HTML5 specification and parses HTML using the best of HTML5 DOM methods. It supports parsing HTML from URL/string, find and extract data, manipulate the HTML elements, clean HTML, output HTML.\n\nLink:\n\n9. JIB\n\nIf you are working on an enterprise-grade application, it should be at least Cloud-ready. The first step to make your application cloud-ready is to containerize your application, i.e., put your artifactory binary into Docker image. Dockerizing a Java application is a bit tedious work: you need to have deep knowledge of Docker, you need to create a Dockerfile, and you will need Docker Daemon. Fortunately for the Java developers, Google has created an Open-source Java containerizer using already existing tools. You can use JIB as a Java library to build an optimized Docker and OCI image.\n\nLink\n\n10. Tink\n\nTink is yet another handy Java library in this list from Google. Cryptography and security are becoming increasingly more important in Software Development. Cryptographic techniques are used to secure user data. Implementing cryptography correctly requires a lot of expertise and effort. A group of Cryptographers and security engineers in Google has written the multi-language cryptographic library Tink. It offers easy-to-use but hard to misuse security API. Tink offers cryptographic functionalities via different primitives. It provides symmetric key encryption, streaming symmetric key encryption, deterministic symmetric key encryption, digital signature, hybrid encryption, and many other encryption functionalities.\n\nLink:\n\n11. Webmagic\n\nIf you work on Web crawling, you can write your own crawler, which is time-consuming and tedious. In Java, Webmagic is an excellent Web crawler library that covers the complete life-cycle of crawler: downloading, URL management, content extraction, persistence. It offers a simple yet flexible core, Annotation support, multi-threaded, and easy-to-use API.\n\nLink:\n\n12. ANTLR 4\n\nIf you work on parsing and processing data, then the ANTLR library could be handy. It is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It does this by giving us access to language processing primitives like lexers, grammars, parsers, and the runtime to process text against them.\n\nIt’s often used to build tools and frameworks.\n\nLink:\n\n13. Caffeine\n\nIf your application is read-heavy, then caching can dramatically improve your application’s data access performance. Java has many great caching libraries. Caffeine is the best among the lot. It is a high-performance, near-optimal caching library based on Java. It offers a fluent caching API and some advanced features like asynchronous loading of entries, asynchronous refresh, weak referenced keys, etc.\n\nLink:\n\n14. Metrics\n\nOnce your Java application runs into production, you will want to have insight into your application's critical components. Metrics from the Dropwizard framework is a simple yet compelling Java library that provides insight into your application and JVMs KPI, e.g., rate of events, pending jobs, service health check, and more. It is modular and offers modules for other libraries/frameworks.\n\nLink:\n\n15. gRPC-Java\n\nGoogle has created gRPC as a modern Remote Procedure Call system in 2015. Since then, gRPC became extremely popular and one of the most used RPC system in modern software development. The library gRPC-Java is the Java implementation of the gRPC client. If you want to use gRPC in Java, then this library can be handy for you.\n\nLink:\n\n16. Java WebSocket\n\nTraditional Client-Server communications unidirectional. WebSocket is a bi-directional communication protocol over a single TCP connection. Java WebSocket is a barebone WebSocket server and client implementation in Java. If you are a Java developer and want to work with WebSocket, this library is highly recommended.\n\nLink:\n\n17. JJWT\n\nJSON Web Token (JWT) is the de-facto Authorization and secure Information exchange format in modern software development. Whether you are using a simple session-based Authorization or highly advanced OAuth2 based Authorization, you will probably use JWT. JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape. It is fully RFC specification compliant on all implemented functionality. It supports readable and convenient fluent API.\n\nLink:\n\n18. Swagger-Core\n\nOpenAPI is the specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. Swagger-Core is the Java implementation of the OpenAPI specification. If you are exposing REST API in your Java/JavaEE application, you can automatically provide and expose your API definitions using Swagger-Core.\n\nLink:\n\n19. Async Http Client\n\nAsynchronous programming is becoming increasingly popular of late because of its non-blocking nature. Most of the popular Java HTTP client libraries offer limited to no asynchronous HTTP response processing. Async Http Client is a popular Java library that offers asynchronous HTTP response processing. As a bonus feature, this library also supports the WebSocket protocol.\n\nLink:\n\n20. Liquibase\n\nAs a software developer, we all know the importance of version control, DevOps, and CI/CD of our code. In a blog post: Evolutionary Database Design, the great Martin Fowler argued that we also need version control and CI/CD of our code. Liquibase is a tool that supports tracking, version controlling, and deployment of SQL database changes in Java Applications. If you are working with an SQL database where the database is evolving, this tool can greatly simplify your database migration.\n\nLink:\n\n21. Springfox\n\nI have already listed Swagger-Core in this list, which can automatically generate REST API documentation for vanilla Java or Java EE application. In enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform. In Spring-based Java applications, the Springfox library can automatically generate REST API documentation from the source code.\n\nLink:\n\n22. JavaCV\n\nOpenCV is a computer vision and machine learning software library. It is open-source and was built to provide a common infrastructure for computer vision applications. JavaCV is a wrapper on OpenCV and many other popular libraries (FFmpeg, libdc 1394, PGR FlyCapture) in the field of computer vision. JavaCV also comes with hardware accelerated full-screen image display, easy-to-use methods to execute code in parallel on multiple cores, user-friendly geometric and the color calibration of cameras and projectors, detection and matching of feature points, and many other features.\n\nLink:\n\n23. Joda Time\n\nJava had a poor date and time functionalities in the pre-Java8 core library. Java8 released much needed advanced date and time functionalities in its java.time package. If you are working with an older version of Java (pre Java8), Joda time can provide you the advanced date and time functionalities. However, if you are working in a newer version of Java, you may not need this library.\n\nLink:\n\n24. Wiremock\n\nHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development. During the writing Unit test, it is best to focus on SUT (System Under Test) and mock the services used in the SUT. Wiremock is a simulator for REST API and enables developers to write code against an API that does not exist or incomplete. In microservice-based software development, Wiremock can significantly boost development velocity.\n\nLink:\n\n25. MapStruct\n\nIn Java application development, you often need to convert one type of POJO to another type of POJO. One way to achieve this POJO or Bean conversion is to explicitly code the transformation, which is tedious. The smart way is to use a library that is specifically developed to transform POJO/Bean. MapStruct is a code generator that implements mapping between POJO/Bean on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe, and easy to understand.\n\nLink:\n\nConclusion\n\nIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries. These libraries are not domain-specific and can help you whether you are developing Software for Business applications, Robotics, Android Apps or Personal projects. Please note that for a large and wide eco-system like Java, this list is not conclusive. There are many excellent Java libraries that I have not listed here but worth a try. But this list of libraries can provide a quick peek into the world of the Java eco-system.",
    "keywords": [
      "2020",
      "development",
      "lesserknown",
      "libraries",
      "try",
      "library",
      "25",
      "application",
      "java",
      "need",
      "offers",
      "programming",
      "software",
      "data"
    ]
  },
  {
    "url": "https://towardsdatascience.com/fastapi-has-ruined-flask-forever-for-me-73916127da?source=extreme_main_feed---------5-73--------------------69d5fe65_52ce_43a8_9df3_9b9280352ebd-------",
    "title": "FastAPI has Ruined Flask Forever for Me",
    "publish_date": "2020-10-11 09:01:22",
    "authors": [
      "Fahmi Nurfikri"
    ],
    "summary": "FastAPI has Ruined Flask Forever for MeWhy I prefer using FastAPI instead of FlaskFastAPI Logo — https://fastapi.tiangolo.comWhat do you like best about being a data scientist?\nIf you need to look for something about FastAPI, you usually don’t need to look anywhere else.\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running.\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords.\nFastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.",
    "text": "FastAPI has Ruined Flask Forever for Me\n\nWhy I prefer using FastAPI instead of Flask\n\nFastAPI Logo — https://fastapi.tiangolo.com\n\nWhat do you like best about being a data scientist? It’s definitely modeling and fine-tuning for optimal results. But what does it mean to be a good model if it’s never used or never deployed?\n\nTo produce a machine learning model, the typical approach is to wrap it in a REST API and use it as a microservice. One of the most widely used frameworks for creating APIs is Flask.\n\nThe main reason Flask is widely used is its simplicity. In general, we only use the API to model predictions, so we don’t need a complex architecture (example: Django). Another reason is that Flask is written in Python, which is the language used to do machine learning modeling in general, so we are familiar with it.\n\nHowever, if you want to create a REST API with clear, static, inputs that are validated, you must include several different packages from several third parties that do not cooperate with each other. And you have to create custom code to get everything running.\n\nThis is what caused me to look for alternatives for my needs, where finally I found a framework called FastAPI and it became my new favorite framework. Here are the reasons why I like to use FastAPI.\n\nDocumentation\n\nThe first thing I notice from FastAPI is the documentation. FastAPI has very extensive documentation and rich examples, which makes things easier. If you need to look for something about FastAPI, you usually don’t need to look anywhere else.\n\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running. So that we don’t need to write the API documentation that we created ourselves. As we all know, writing API documentation is annoying, not only because there is a lot of detail to go into, but also nothing more frustrating when the end-users are implementing but not match up the documentation. So that with the automatic generation of API documentation it will be very helpful\n\nBelow is a display example of the API documentation (provided by Swagger UI)\n\nAlternative automatic documentation is also provided (provided by ReDoc)\n\nTo define the created schema, it uses Pydantic, which is another awesome Python library, used for data validation. Its purpose is to validate the input that goes to FastAPI. If the input/request is incorrect then the appropriate error code will be returned.\n\nPerformance\n\nAs the name implies, this is indeed FastAPI. Based on data from techempower benchmarks, FastAPI beats every framework when it comes to performance. Where the most commonly used frameworks like Flask and Django lag behind.\n\nFramework performance — techempower\n\nYeah, it blazingly fast.\n\nAsynchronous\n\nOne of the drawbacks of Flask is the lack of asynchronous I/O support. Asynchronous is pretty important for HTTP endpoints, which tend to do a lot of waiting for I/O and network chat, making it a good one candidate for concurrency using async.\n\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords. FastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.\n\nAll you have to do is declare the endpoints with the async keyword like this:",
    "keywords": [
      "api",
      "dont",
      "using",
      "forever",
      "framework",
      "documentation",
      "flask",
      "need",
      "used",
      "ruined",
      "asynchronous",
      "fastapi"
    ]
  },
  {
    "url": "https://medium.com/lessons-from-history/what-you-dont-know-about-the-famous-templar-knights-e225932969a3?source=extreme_main_feed---------6-73--------------------69d5fe65_52ce_43a8_9df3_9b9280352ebd-------",
    "title": "What You Don’t Know About the Famous Knights Templar",
    "publish_date": "2020-10-03 21:34:41",
    "authors": [
      "Nicol Valentin"
    ],
    "summary": "They wrote their rule with the help of a saintHumility, chastity, and strict obedience were major tenants of the Templar rule.\nHeck, a Templar wasn’t even allowed to kiss his own mother.\nProponents of this idea also cite the fact that Templar knights were forbidden meat on Mondays, Wednesdays, and Fridays.\nNot only did the king feel his money was physically secure in Templar banks, but the fact that almost every English county had a Templar presence helped too.\nAnd so it was with King Philip of France.",
    "text": "In 1119, dangers lurked everywhere in the Holy Land. Saracens (Moslems) butchered 300 Christians in March, and another 7000 that June.\n\nThings like this weren’t uncommon, and every pilgrim knew it. The French knight Hugh of Payns knew it. Only Hugh decided to do something about it.\n\nHe and a small band of warrior pilgrims soon joined in a brotherhood in which all agreed to take on a life of penance, poverty, and strict obedience. Unlike other knights of the time, they would defend the poor and innocent.\n\nEven to the point of sacrificing their own lives if necessary. Later, the group would gain official recognition under the name The Poor Fellow-Soldiers of Christ and the Temple of Solomon. We know them as the Templars.\n\nAlthough the early days of the Templars were uneventful, it didn’t take long for the men to make a name for themselves throughout Europe. Their role in the Holy Land began to expand, and soon they were defending the entire Levant from enemy invaders.\n\nToday, no image of the crusades is complete without a picture of a Templar knight in his white mantle emblazoned with a red cross. And yet, with all that imagery, there's more to the Templars than meets the eye. Much more.\n\nThey wrote their rule with the help of a saint\n\nHumility, chastity, and strict obedience were major tenants of the Templar rule.\n\nWhen a man joined the Templars, he had to swear off furs, fancy clothes, and those oh so stylish pointy shoes everyone was raving about. They were also pretty hardcore when it came to chastity.\n\nHeck, a Templar wasn’t even allowed to kiss his own mother. That’s a lot of energy going to moral fortitude. In the end, it helped them become the elite fighting force that they were.\n\nTemplars were also required to do the standard things like take care of orphans and widows, and defend the church. Standing in church when praying or singing was forbidden, as well as talking to the excommunicated.\n\nAll this makes sense when you consider the Templars were actually warrior monks. Their rule was partly composed by one of the most famous monks of all time, St. Bernard of Clairvaux.\n\nKnown as the Primitive Rule of the Templars, Bernard based it on the writings of St. Benedict and St. Augustine. The order had already been established several years before the rule was completed. So, in the end, it was basically everything the guys had already been doing.\n\nThey were said to have the gift of long life\n\nWhich is ironic since 90 percent of fighting knights died. However, thanks to a healthy diet and great hygiene, Templars had a good chance of living into their 60s.\n\nBarring any spears through the heart that is. That may not seem like a ripe old age to you, but in the Middle Ages, that wasn’t so bad. Some people attribute the brother's good health to something called “The Elixir of Jerusalem” which consisted of palm wine, aloe pulp, and hemp.\n\nProponents of this idea also cite the fact that Templar knights were forbidden meat on Mondays, Wednesdays, and Fridays. However, on Sundays Chaplins and clerks were allowed to eat meat at both lunch and dinner. According to the rule, “the rest of the household, that is squires and sergeants, shall be content with one meal and should be thankful to God for it.”\n\nFasting was undertaken between All Saints (Nov. 1) and Easter, with the exception of Christmas Day, the Assumption, and the Feast of the Apostles. Of course, we can’t leave out the fact that Templars were physically fit. Couch potatoes wouldn’t last long in an outfit like this after all.\n\nUp to 90 percent of members never went to combat\n\nThat's because they were busy managing the large economic infrastructure they created throughout Europe.\n\nIn fact, the Templars were arguably the first multinational cooperation, and it took a lot of guys to keep it going. Their reputation as defenders of the weak along with their pious behavior brought them to the attention of patrons of both high and low status.\n\nTemplar coffers overflowed with gifts like sheep farms, water mills, even isolated villages complete with serfs. Common workers left things in their wills to, like donkeys and small plots of land. And the templars never poo-pooed any of it.\n\nAll those small parcels were combined to form larger estates that were then leased out or farmed. Of course, the properties needed managers, and that task fell to the lay brothers. Beside gifted properties, there were the Templer houses, known as commanderies. This would be run by sergeants who were brothers from non-noble families.\n\nThey excelled in banking\n\nTheir widespread network of commanderies made it easy for Templars to set up a deposit system for traveling pilgrims.\n\nA fellow leaving from London, for example, could deposit his money in the city’s Temple church. As he embarked on the precarious journey overseas, he could concentrate on escaping the pitfalls of travel to the Lavant. The one thing he didn’t have to worry about was losing his money.\n\nOnce he arrived safely at his destination, he simply found the nearest Templar bank and presented his letter of credit. His funds were then safely returned.\n\nEven Kings trusted them with their money\n\nIt wasn’t just the little guys who benefited from the brother's banking system, though. Many kings looked to the Templars to bail them out financially.\n\nFrance in particular had a complicated financial relationship with them. Louis VII was the first king to seek a loan from the Templars at the end of the second crusade. Once he was home and his debt repaid, Louis placed what was left in his treasury under the protection of his Templar friends.\n\nFrom then on the French Treasury was run by the Templars, They took in and accounted for all payments made to the crown, as well as keeping account of the king's creditors and debtors. Money was taken in, stored, and paid out with statements going to the king three times a year.\n\nIn 1185 English King Henry II began using the Temple in London as his treasury. He trusted the Templars with coins, valuables, and even his jewels. Not only did the king feel his money was physically secure in Templar banks, but the fact that almost every English county had a Templar presence helped too. After the deadly battle of Hattin,\n\nHenry charged the Templars with collecting taxes to raise funds for a new crusade. His son, Richard the Lionheart, favored the knights as well. He exempted them from a host of taxes and had every sheriff in England pay them an annual stipend.\n\nBanking was part of their glory, but also their downfall\n\nThe downside to lending governments loads of money is it can make leaders cranky. And so it was with King Philip of France. Philip was far from the most pleasant fellow and he set his eyes on the Templars coffers.\n\nPhilips's grandfather King Louis IX was a saint, and Philip liked to believe he was the epitome of a holy king too. Yet it’s kind of hard to believe a guy is pious when he disputes with the pope (Boniface VIII) for five years (1296–1301).\n\nThe fight, not surprisingly, was over tax revenue. It only ended because Philip took some of his thugs to the papal palace, smashed through the doors, and roughed Boniface up so badly he died a month later.\n\nA Greedy King was their biggest enemy\n\nPhilip really wanted that tax revenue because France was in dire need of money.\n\nBy 1306 the country was in dire straits. A guy can get crazy when he's desperate for money, and desperate Philip was. So in the name of his fake piety, he came up with a story. It was a horrid story, a devious story — a blasphemous story.\n\nThe Templars, he said, were “vilely insulting our religious faith” by means of sodomy, idol worship, heresy, and black magic. Basically, everything contrary to what they had been fighting for since their inception.\n\nFrom there Philip had all the Templars round-up and tortured so they would confess to the false charges he put against them. He burned a few at the stake and eventually convinced the rest of the world of the brother's evil ways.\n\nFinally, the Pope (under pressure from Philip) had the order disbanded in 1312. Assets were given to another famous group of knights, the Hospitallers. Of course, Philip confiscated a huge sum of that as payment for all the work he put into ridding the world of the evil Templars.\n\nNotes and Sources:\n\nGentle reader, please don’t tell me about my picture. I already know. Unfortunately, no Templars were available for photographs. It’s a hard thing, writing about history.\n\nThe Templars, Dan Jones\n\nhttps://www.marketwatch.com/story/how-the-knights-templar-became-the-worlds-first-financial-services-company-2017-09-26#:~:text=It's%20sometimes%20said%20the%20Templars,t%20the%20first%20world's%20bankers.\n\nhttps://erenow.net/postclassical/the-real-history-behind-the-templars/25.php\n\nhttps://www.gq-magazine.co.uk/article/ten-things-you-never-knew-about-the-knights-templar\n\nhttps://www.warhistoryonline.com/medieval/nine-rules-knights-templar.html\n\nhttps://www.history.co.uk/shows/knightfall/articles/holy-money-how-the-knights-templars-got-so-rich\n\nhttps://www.bbc.com/news/business-38499883\n\nhttps://www.history.co.uk/shows/lost-relics-of-the-knights-templar/articles/13-things-you-didn%25E2%2580%2599t-know-about-the-knights\n\nhttps://thetemplarknight.com/2011/01/27/king-philip-crush-templars/",
    "keywords": [
      "dont",
      "templars",
      "philip",
      "king",
      "fact",
      "brothers",
      "knights",
      "famous",
      "rule",
      "know",
      "money",
      "wasnt",
      "templar"
    ]
  },
  {
    "url": "https://medium.com/swlh/working-with-a-really-terrible-developer-e942299ee1b4?source=extreme_main_feed---------7-73--------------------69d5fe65_52ce_43a8_9df3_9b9280352ebd-------",
    "title": "Working With a Really Terrible Developer",
    "publish_date": "2020-10-13 08:52:08",
    "authors": [
      "Chris Fox"
    ],
    "summary": "Working With a Really Terrible DeveloperWe recognize them.\nExternalitiesI was working until a few weeks ago on a distributed team for a company in England.\nThanks, L, I didn’t know how to spell “foreign key.”I came to dread the call because his abrasive and loud voice gave me a headache.\nI am usually a back-end developer; in this project L did all the back-end work.\nI didn’t know Django well enough to do it perfectly, not knowing where Python ends and Django begins (I really dislike Django, it shows no coherence or idiom), but I wrote out all the logic and status codes.",
    "text": "Working With a Really Terrible Developer\n\nWe recognize them. Managers often don’t.\n\nIf you’ve never had this experience you have my envy. You’re on a development team and one of the developers does sloppy work and there is nothing you can do about it.\n\nTime was when everyone in software from the first-day QA trainee to the executives had some experience at coding. That is long gone and now we have layers of methodology “masters” and managers who have never written a line, and who regard any and all complaints about others’ work as insubordinate and as personal conflicts, never considering the criticisms on their technical merits.\n\nIf I say that one of the other members of the group is doing shoddy work, even if I explain politely and in technical detail, managers hear “unpleasantness” and focus all their attention on team cohesion, which means I’m the one who gets in trouble.\n\nExternalities\n\nI was working until a few weeks ago on a distributed team for a company in England. One team member, whom I will refer to as L, not only did terrible work (more on this below) but on the daily Zoom status update was three times louder than anyone else in a voice that could etch diamond, made little effort to pronounce English clearly, and insisted on hijacking others’ computers with a compulsive screen-share that illuminated nothing, just so the rest of us could watch him wiggle his mouse.\n\nHe was mechanical. His reaction to any transition was always the same. His turn to talk? “Let me share my screen.” Get an error message? Take a screen shot. Explain a keyword? Another screen shot. Thanks, L, I didn’t know how to spell “foreign key.”\n\nI came to dread the call because his abrasive and loud voice gave me a headache. While everyone else on the team had mastered English well enough to be understood, L moved the accented syllables of words in a way that reminded of why so many companies that outsourced tech support to his country are now moving it to the Philippines.\n\nHe was unresponsive to communication and made changes to interfaces and API behavior without informing anyone of them. Since we did not have code reviews, which I tried hard to spearhead, we only discovered these wanton changes when things broke.\n\nWorst of all L appeared to get cognitively rebooted every few minutes. This company had its Git branches set up all wrong, two “master” branches in the same repo, one for the front end and one for the back. My cryptography work was in a branch off the front end “master.” We had been talking about the branches by name for about ten minutes, and it was clear as could be that I was doing my work in “frontend-crypto,” which we had both mentioned many times.\n\nHe suddenly asked me, apropos of nothing, “Chris, which branch are you working in?”\n\nThis sort of thing happened many times and managers would patiently explain to him what any eight year old could have followed. They could see he wasn’t tracking but for some reason it was only a problem when I expressed my frustration at having to explain simple matters over and over.\n\nBad Code\n\nI usually work in the C family of languages and in web development I write in C#. I had to learn JavaScript, Python, and Django. I ended up working almost exclusively in JavaScript and in the front end. I am usually a back-end developer; in this project L did all the back-end work.\n\nHe did a lot of work, all of it very low quality. In addition to industry standard illegibility he did the absolute bare minimum in rigor that he could get away with.\n\nI Write an Endpoint\n\nI needed a new API, one that would return two or more rows for recipients who may or may not already be in the database. I didn’t know Django well enough to do it perfectly, not knowing where Python ends and Django begins (I really dislike Django, it shows no coherence or idiom), but I wrote out all the logic and status codes.\n\nSuppose I called this API seeking the encryption keys for ten people. Here are the number found and the HTTP status codes in my original bad Django:\n\nNumber returned HTTP code\n\n10 200 (full success)\n\n1-9 206 (partial content)\n\n0 204 (data not found)\n\nserver exception 500 (exception)\n\nIf the response had fewer rows than the number requested I returned an array of their not-found identifiers.\n\nI turned it over to L to fix up the Django syntax, not to rewrite it, but this is what he did:\n\nNumber returned HTTP code\n\n10 200 (full success)\n\n1-9 200 (wrong)\n\n0 200 (wrong)\n\nserver exception 400 (wrong)\n\nSo even if not a single row was returned, he called it a complete success, and he removed my array of the rows not found, so the client had to enumerate the returned data, compare to the request and determine which ones didn’t come back. And a server exception returned 400, Bad Request, which was completely wrong.\n\nThis guy was supposed to be their back end expert. I expected him to know these codes; I don’t know every single one of them but I know the dozen or so most common ones. And even with the logic and intended status codes right in front of him he threw it all away and did it “his way.”\n\nTo be fair there are multiple schools of thought on how to handle intermediate levels of API success. I almost never see any 2XX status code other than 200; that and 500 are the only codes most developers return.\n\nIt would be charitable to allow that L had his own approach that was different from mine; in my view we have more than four status codes for a reason, and I use them. I knew however from months of working with him that he had just copied and pasted in 200 for all of them; he left my sieving logic for the cases above (0, 1–9, 10) but pasted the same line without checking.\n\nIn any case an API is a transaction and if he changed the behavior it was incumbent on him to inform me or whoever was issuing the call, expecting these more detailed status codes. Not only did he fail to do so, he never answered me when I asked him about it. This isn’t teamwork. This was a pattern in working with him. Since this project had no QA it would likely have been customers who first saw the holes in the logic.\n\nManagement Reaction\n\nI was furious. I had done it all correctly except for the Django syntax which he could have fixed in under a minute, but instead he rewrote the whole thing with significantly altered logic. And of course his code looked like a pair of cats had fought on the keyboard.\n\nI tried asking L why he had made these changes but when he ignored me as usual I asked the managers for a conference call. I showed them what I’ve written above. They tut-tutted and said they would talk to L about it. I don’t think they did, because two weeks later it was still unchanged.\n\nAnd they paid this guy.\n\nSo if they didn’t talk to L then they probably decided I was bringing conflict to the team, though they never told me so. This was my last item in the work, all my stuff worked except this mangled API. I was done. With three new languages under my belt and experience in a really cool cryptographic implementation.\n\nI didn’t bother talking to L again. What would be the point? He had done a bare minimum lousy job and in his work ethic that was just fine. In previous debates on design he had contributed nothing. I could have mentored him but I knew from months of working with him that he would have ignored me and gone on doing things the way he was accustomed: sloppy, shoddy, and illegible.\n\nManagers Who Don’t Know Code\n\nAs with so many who say that “people skills” are more important than “coding skills,” the managers on this project were more interested in keeping things nicey-nicey in the team than in doing a solid product. Since this was a very security-centric application it was more vital than usual to do the most rigorous job possible, but they allowed L’s sloppy rewrite to remain.\n\nTheir attitude toward my report was probably that there was some “friction” between me and L; I got along fine with everyone and managed to mask my frustration with L and his mysterious context-loss episodes and godawful code, and my part was about done so not much came of this.\n\nThis is what comes of regarding software development as a social activity. It sure as hell isn’t engineering yet.\n\nBut had I been the development lead, L would have been looking for another job.\n\nThere is a continuum in the software development work ethic; the two poles are\n\nDo it as perfectly as possible and to hell with the deadlines Do as little as you can get away with and make clearing your task list your only priority. Take up the slack by writing unit tests (which we didn’t do).\n\nL and I were at opposite poles of this continuum. Stir in his disinterest in communication and we had a mess.",
    "keywords": [
      "returned",
      "django",
      "l",
      "didnt",
      "status",
      "managers",
      "developer",
      "really",
      "terrible",
      "team",
      "working",
      "know",
      "work"
    ]
  },
  {
    "url": "https://medium.com/the-ascent/how-i-make-an-extra-1-000-per-month-without-breaking-a-sweat-79da349bee6b?source=extreme_main_feed---------8-73--------------------69d5fe65_52ce_43a8_9df3_9b9280352ebd-------",
    "title": "How I Make An Extra $1,000 Per Month Without Breaking A Sweat",
    "publish_date": "2020-09-21 16:32:45",
    "authors": [
      "Cheshta Mann"
    ],
    "summary": "How I Make An Extra $1,000 Per Month Without Breaking A SweatThe catch is to spend 1–2 hours daily to make this side hustle work.\nPhoto by Chronis Yan on UnsplashHave you ever thought of having at least one additional income source besides your regular 9–5 job?\nWell, having an extra source of income never hurts.\nAfter getting a full-time job in a financial organization in 2019, I thought I had achieved financial stability.\nWell, having an extra source of income never hurts.",
    "text": "How I Make An Extra $1,000 Per Month Without Breaking A Sweat\n\nThe catch is to spend 1–2 hours daily to make this side hustle work.\n\nPhoto by Chronis Yan on Unsplash\n\nHave you ever thought of having at least one additional income source besides your regular 9–5 job? While a full-time job meets your fixed and lifestyle expenses, the side hustle helps you utilize that money for future investments or savings.\n\nWell, having an extra source of income never hurts.\n\nIt helps you support yourself as well as your family’s needs better. But sometimes, we feel clueless about where to start.\n\nI was in the same boat a few years ago. I had a lot to accomplish but had no idea about getting started. I wanted to make money and land a stable job that helped me achieve my first objective, that was to make money and be financially independent. After getting a full-time job in a financial organization in 2019, I thought I had achieved financial stability.\n\nIt was true to some extent. I received decent pay-checks on a bi-weekly basis, and I was able to meet my monthly expenses, and satiate my lifestyle costs with them. Furthermore, I was able to keep some of the amounts aside for my further studies, savings, and investments.\n\n“Some people want it to happen, some people wish it would happen, others make it happen.” — Michael Jordan\n\nDespite having my savings and expenses on track, I knew that I could devote my time and energy to earning a little extra per month. Moreover, watching the idiot box and scrolling down through my IG feed was becoming toxic. So, to keep a check on my sanity and ensure that I was utilizing my time in the right manner, I decided to contribute a few hours of my day towards the side gigs that I’ll be discussing below.\n\nWell, having an extra source of income never hurts. One can use that chunk for meeting personal obligations and improving their skills.\n\nAccording to research published in Harvard Business Review, individuals who were working in a full-time profession, as well as a side hustle, exhibited more signs of empowerment followed by being in charge of their emotional and cognitive well-being. The study was based on the sample size of 1,000 individuals who spent an average of 13 hours every week on their side hustle for 4 days.",
    "keywords": [
      "1000",
      "month",
      "sweat",
      "breaking",
      "job",
      "hustle",
      "source",
      "income",
      "money",
      "having",
      "happen",
      "fulltime",
      "hours",
      "extra"
    ]
  },
  {
    "url": "https://medium.com/bigger-picture/tucker-carlson-got-it-right-7556391c827?source=extreme_main_feed---------9-73--------------------69d5fe65_52ce_43a8_9df3_9b9280352ebd-------",
    "title": "Tucker Carlson Got It Right",
    "publish_date": "2020-10-02 21:47:02",
    "authors": [
      "Deborah Handover"
    ],
    "summary": "Tucker Carlson Got It RightAnd it’s high time we listenedMonday night, Tucker Carlson covered the recent breaking news that President Trump paid only $750 in federal income taxes during the first two years of his presidency and no income taxes at all for 10 of the 15 years on record.\nIndeed, just as Carlson said, many Americans voted for Trump because they believed he would right the imbalance, taking power from the elites to bolster the middle class.\nBut here’s what Carlson, alongside those 2016 Trump voters, missed: Donald Trump is, and always has been, one of those elites.\nCarlson was quite right to say that billionaires should not pay lower taxes than you do, no matter who they are.\nWill four more years of this administration produce a new, truly populist Donald Trump?",
    "text": "Tucker Carlson Got It Right\n\nAnd it’s high time we listened\n\nMonday night, Tucker Carlson covered the recent breaking news that President Trump paid only $750 in federal income taxes during the first two years of his presidency and no income taxes at all for 10 of the 15 years on record.\n\n“Trump’s accountants took advantage of the many provisions in our tax code to make that possible,” Carlson said during the segment. “What the president did was legal — in fact it’s all but universal among the affluent who earn their money from investments rather than from salaries.”\n\n“Should the president have used these conventional tax loopholes to his own benefit?” Carlson asked, “We’ll leave that to the ‘professional hyperventilators’” — referring to liberal news networks — “on the other channels….But far more interesting is this question: Why does our tax code remain so obviously, so grotesquely unfair?”\n\nCarlson continued:\n\n“Billionaires should not be paying a lower rate than you are paying, no matter who they are, no matter who the president is. The main problem with America right now is that a shrinking group of people controls a growing share of our nation’s wealth and power. America is lopsided, and it’s getting more lopsided every year. That makes our country unstable. “Lopsidedness….is why young people seem so hopeless and nihilistic, why so many of them are not starting families. It’s why some of them are breaking things in the streets. It’s why your grandchildren will almost certainly earn less than you do. And by the way, it’s also why Donald Trump got elected four years ago. Americans could feel that something was profoundly wrong with the way our country was structured…. It seemed clear that the people in charge were in it for themselves.”\n\nCarlson closed his monologue by declaring that the “core drivers of the crisis that we face — a dying middle class and the growing hegemony of billionaires — remain unresolved.” He forewarned a “guaranteed disaster,” saying that if the economy is not “flattened” soon, “America is going to become a very radical place.”\n\nCarlson’s comments reflect a fairly typical conservative outlook — that the middle class is constantly forced to bear the burden of America’s economic hardship while the affluent, elite “ruling class” protects itself. Conservatives have long been proponents of flat tax rates. Indeed, just as Carlson said, many Americans voted for Trump because they believed he would right the imbalance, taking power from the elites to bolster the middle class.\n\nBut here’s what Carlson, alongside those 2016 Trump voters, missed: Donald Trump is, and always has been, one of those elites. And he has no intention of flattening a system that directly benefits him.\n\nIt’s well-known that Donald Trump was born to an affluent NYC real estate mogul, and even Trump’s version of his success story begins with a $1 million loan from his father. But a 2018 New York Times investigation found that Fred Trump frequently avoided paying federal income taxes by undervaluing his investments and funneling money to his children. According to financial statements, the president had been earning $200,000 a year by the age of three and was a millionaire by age eight.\n\nNow, the Times alleges that Trump readily uses his father’s tried-and-true tax avoidance methods, including funneling hundreds of thousands to his daughter Ivanka under the guise of “consulting fees.” In other words, Donald Trump is carrying on the time-honored tradition of American billionaires skirting their duty to contribute to their country— in this case, the country Trump himself runs.\n\nSo, why does our tax code remain so grotesquely unfair? In the nearly four years that Trump has been president, why has he not only failed to fix the imbalance that his voters elected him to fix, but allowed America to “get more lopsided every year”? Why did he cut the corporate tax rate by 14% in 2017, if big corporate moguls are the “main drivers” of the wedge between the middle and upper class? How were big corporations allowed to snap up $243 million of the $349 billion made available to small businesses that were suffering from lockdown closures? How were billionaires allowed to increase their profits by nearly $640 billion while 40 million Americans filed for unemployment?\n\nThe answer, to which many Americans are now waking up, is that Trump never planned to “flatten” the economy. He never planned to correct that imbalance, to dismantle the system that made him rich and benefit a class he was never part of. He is, just as Tucker Carlson said, only in it for himself.\n\nCarlson was quite right to say that billionaires should not pay lower taxes than you do, no matter who they are. And he was quite right to say that the American people elected Trump because they sought a leader who would level the playing field. But that’s why, in this case, who the president is matters quite a bit. This was the job America hired Donald Trump to do. Not only did he fail to do it; it turns out he is an enthusiastic participant in the very system voters elected him to dismantle.\n\nWill four more years of this administration produce a new, truly populist Donald Trump? Will it end the practice of billionaires like Trump exploiting the nation’s tax code and forcing the middle class to shoulder the economic burden? That’s for voters to decide. But, perhaps, the next time a politician says it’s time for the “rich to start paying their fair share,” think for a moment about what Tucker Carlson would say.",
    "keywords": [
      "trump",
      "tax",
      "america",
      "voters",
      "class",
      "middle",
      "carlson",
      "president",
      "billionaires",
      "tucker",
      "right",
      "donald"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------c03f966b_0bd3_4f23_95b8_ec60b0c075e7-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------c03f966b_0bd3_4f23_95b8_ec60b0c075e7-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------c03f966b_0bd3_4f23_95b8_ec60b0c075e7-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------c03f966b_0bd3_4f23_95b8_ec60b0c075e7-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------c03f966b_0bd3_4f23_95b8_ec60b0c075e7-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://williamfleitch.medium.com/there-will-be-no-laughing-on-election-night-3d1d498afc38?source=extreme_main_feed---------1-74--------------------4b159cfd_b56d_4b91_a2a6_885c3cb5f6b3-------",
    "title": "There Will Be No Laughing on Election Night",
    "publish_date": "2020-10-13 20:34:19",
    "authors": [
      "Will Leitch"
    ],
    "summary": "But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off.\nBut one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000.\nAlready cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious.\nThere is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified.\nBut I damn sure know it won’t be funny.",
    "text": "NBC\n\nIn November 2000, I fell asleep to Al Gore being declared the next president, woke up to George W. Bush having won, and by lunchtime no one had any idea who had won or what was going on. What I remember the most is finding the whole thing very funny. And it was funny.\n\nI know now that being able to find such chaos amusing was a privilege, and an ugly one, of being an aimless but mostly comfortable white kid in his early 20s. One can argue about the specific differences of how the world would have turned out had Al Gore become president instead of George W. Bush, but there’s no question there were definite differences. But if you followed the race in 2000, this was not what everybody thought. I covered protests at the Democratic National Convention in Los Angeles that year — the same one Barack Obama couldn’t even get into — and the one thing every protestor believed, along with most young Gen Xers like myself, was that it didn’t matter whether the next president was Bush or Gore: They were two variations of the same flavor. That the race ended up so close sure didn’t feel like an accident. If you ask 300 million people whether they’d prefer two nickels or a dime, you shouldn’t be surprised when the results are 50–50. The madness that followed the close vote felt not like a moment of democratic peril. It felt like the logical conclusion to an incredibly stupid process. You just had to laugh.\n\nWhile watching 537 Votes, a new documentary about the 2000 Florida recount (and specifically the Miami-Dade county non-recount) that airs on HBO on October 21, I was reminded that it wasn’t just snarky former grunge kids who thought all this was ridiculous. The documentary itself is mediocre, more interested in cheap nostalgia and sight gags than the psychology of the era (director Billy Corben of Cocaine Cowboys has a persistent habit of dressing up his films with gimmicks rather than trusting his story to tell itself), but its ability to mine cultural artifacts of that time is remarkable. There’s a ton of clips from The Daily Show, and they each make a strong argument that the smugness that ultimately drove us all away from Jon Stewart was there from the get-go. There’s a reminder that Craig Kilborn used to host a late-night talk show. And there is a Wanda Sykes riff on Florida that is even rawer and more cutting 20 years later. But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off. Seriously, they found all of this hilarious. The most famous voice that night was Dan Rather and all his goofy homespun sayings—“If a frog had side pockets, he’d carry a hand gun”—but everyone was yucking it up. Second place was Tim Russert, the evening’s breakout star, with his whiteboards and his red states and blue states, with a big giddy grin on his face throughout, even at 3:17 a.m., like this was the most fun he’s ever had in his life. Isn’t this a blast? You hear the crew cackling off stage. What a night!\n\nIt sure seems less funny now.\n\nThere are many, many ways that 2020 is worse than 2000. (Sheesh, in 2000, Joe Rogan was just that guy from “NewsRadio.”) As Clare Malone pointed out in a fantastic piece for FiveThirtyEight, we’re a lot more polarized and a lot less likely to just give up and accept it if our preferred candidate loses in a tightly contested election. But one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000. Already cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious. There is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified. There is an awareness that if we are not careful about this democratic process, the whole thing could collapse.\n\nThere was none of that in 2000. It was all just a wacky story—this election is crazy close!—that was covered as if the stakes were a lot lower than they were. (Within three years, the NASDAQ collapsed, 9/11 happened and we were in multiple wars. The stakes turned out to be pretty freaking high.) What has changed, of course, is that we now know what a difference it can make when one candidate wins and one loses, that the entire nation is a fire just waiting for kindling, and that there are bad actors eager to pounce at the first sign of uncertainty. History will be made, and our anchors and analysts, by all accounts, understand how precise and meticulous they will need to be. And they understand, mostly, just how ungodly serious this is. And that’s where we’ve changed the most. In 2000, it felt like America would be around, and strong, forever, no matter who won, that the democratic process would do its job and we’d all be fine. Twenty years later, we’ve had 9/11 and endless wars and economic collapses and pandemics and Donald Trump. There are no illusions that America will just automatically land on its feet anymore. I don’t know how the networks, or the public, will react to what happens on November 3. But I damn sure know it won’t be funny.\n\nWill Leitch will be writing multiple pieces a week for Medium. He lives in Athens, Georgia, with his family, and is the author of five books, including the upcoming novel “How Lucky,” released by Harper next May. He also writes a free weekly newsletter that you might enjoy.",
    "keywords": [
      "sure",
      "2000",
      "lot",
      "night",
      "laughing",
      "democratic",
      "know",
      "thing",
      "election",
      "watching",
      "won"
    ]
  },
  {
    "url": "https://marquisele.medium.com/we-do-not-deserve-hospitals-abd8756d7bbf?source=extreme_main_feed---------2-74--------------------4b159cfd_b56d_4b91_a2a6_885c3cb5f6b3-------",
    "title": "We Do Not Deserve Hospitals",
    "publish_date": "2020-10-15 03:05:18",
    "authors": [
      "Marquisele Mercedes"
    ],
    "summary": "We Do Not Deserve HospitalsMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\nAt one point, I was sent to another room nearby that was a little larger and had no extra chairs.\nMy mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy.\nHave you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum?\nHas a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?",
    "text": "We Do Not Deserve Hospitals\n\nMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\n\nSource: Unsplash\n\nOn a night in my early teens, I went to the Pediatric Emergency Department at Montefiore’s Children’s Hospital for intense cramps. I was expecting my period in a few days, but had never felt that way before — like a heat lamp was burning into the meat of my pelvis.\n\nMy mother and I spent the better part of 9 hours in a tiny room with speckled vinyl floors and too-bright fluorescents. At one point, I was sent to another room nearby that was a little larger and had no extra chairs. My mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy. A nurse told me to undress from the waist down and wait for the doctor.\n\nMy doctor came in and asked me — in a few different ways — if I’d ever been “penetrated”. I had not and said so — repeatedly. She referenced the development of my body, implied the crudeness of the boys around me. It was an unsaid question, but one that still required an answer. “No,” I said, “I’ve never put anything in there.” She said “if you say so”, before telling me to lay down, scoot my butt towards the end of the examination table, and spread my legs so she could “take a look.”\n\nI didn’t know what that meant, but she was the doctor, so I did what she told me to do.\n\nHave you ever screamed “no!” and “stop!” at the top of your lungs while being penetrated by an unidentified object that scraped at your most intimate insides? Have you ever been told to “be still” and “hold on” like your pain was the most mundane thing that had ever happened? Have you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum? Have you ever redressed yourself afterwards with shaky hands and legs and raucously laughed about it to your mom who was just a few feet away getting a cup of water when she heard the tail-end of your screams? Has a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?\n\nI was sent home with instructions to take Motrin and “stay out of trouble”. My mother and I rode the bus while she angrily pondered on whether I was still a virgin. I wrapped my arms around my middle and tried to protect something that felt like pierced cellophane. The tests for STIs came back clean.",
    "keywords": [
      "sent",
      "doctor",
      "mother",
      "required",
      "penetrated",
      "hospitals",
      "stop",
      "wait",
      "told",
      "deserve",
      "room",
      "say"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------4b159cfd_b56d_4b91_a2a6_885c3cb5f6b3-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/javascript-in-plain-english/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6?source=extreme_main_feed---------4-73--------------------4b159cfd_b56d_4b91_a2a6_885c3cb5f6b3-------",
    "title": "11 Frontend tricks that most Frontend Developers don’t know about",
    "publish_date": "2020-10-14 19:17:01",
    "authors": [
      "Daniel Anderson"
    ],
    "summary": "Datalist elementOne HTML element that you don’t see used much at all and for no reason!\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements.\nYou will see a drop-down list of pre-defined options as you type.\n<datalist>Example:<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\"><option value=\"Cat\"><option value=\"Dog\"><option value=\"Chicken\"><option value=\"Cow\"><option value=\"Pig\"></datalist>",
    "text": "1. Datalist element\n\nOne HTML element that you don’t see used much at all and for no reason!\n\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements. You will see a drop-down list of pre-defined options as you type.\n\n<datalist>\n\nExample:\n\n<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\">\n\n<option value=\"Cat\">\n\n<option value=\"Dog\">\n\n<option value=\"Chicken\">\n\n<option value=\"Cow\">\n\n<option value=\"Pig\">\n\n</datalist>",
    "keywords": [
      "dont",
      "tag",
      "11",
      "datalist",
      "valuecatoption",
      "valuepigdatalist",
      "reasonthe",
      "frontend",
      "know",
      "valuedogoption",
      "valuecowoption",
      "developers",
      "typedatalistexampleinput",
      "tricks",
      "valuechickenoption",
      "used"
    ]
  },
  {
    "url": "https://medium.com/better-marketing/10-websites-that-pay-you-for-your-writing-241e455ac262?source=extreme_main_feed---------6-73--------------------4b159cfd_b56d_4b91_a2a6_885c3cb5f6b3-------",
    "title": "10 Websites That Pay You for Your Writing",
    "publish_date": "2020-10-13 20:26:49",
    "authors": [
      "Maryam Merchant"
    ],
    "summary": "10 Websites That Pay You for Your WritingWrite articles and get paid for your writingPhoto by Daria Shevtsova from PexelsAs a writer, we can’t always rely on one platform.\nAs every article I read about writing from top writers of Medium says, don’t put all eggs in one basket.\nIt means we need to look for other freelance writing platforms as well.\nSo if you want writing as a career or as a side hustle, then you need to mold yourself and, side by side, start looking at other freelance writing gigs that pay you.\nBut I still want to try something outside of this platform, so I found these ten websites that pay a writer for writing articles.",
    "text": "10 Websites That Pay You for Your Writing\n\nWrite articles and get paid for your writing\n\nPhoto by Daria Shevtsova from Pexels\n\nAs a writer, we can’t always rely on one platform. We all want to surf and get used to the competitive world. As every article I read about writing from top writers of Medium says, don’t put all eggs in one basket.\n\nIt means we need to look for other freelance writing platforms as well. So if you want writing as a career or as a side hustle, then you need to mold yourself and, side by side, start looking at other freelance writing gigs that pay you.\n\nAs a newbie, I found Medium two months back, and it’s one of the best platforms, which I am in love with. But I still want to try something outside of this platform, so I found these ten websites that pay a writer for writing articles. I just want to help you with that.",
    "keywords": [
      "articles",
      "platforms",
      "medium",
      "platform",
      "writing",
      "need",
      "freelance",
      "pay",
      "writer",
      "websites"
    ]
  },
  {
    "url": "https://medium.com/in-fitness-and-in-health/why-you-should-eat-oatmeal-at-least-once-a-week-9e6c1feadad9?source=extreme_main_feed---------9-73--------------------4b159cfd_b56d_4b91_a2a6_885c3cb5f6b3-------",
    "title": "Why You Should Eat Oatmeal at Least Once a Week",
    "publish_date": "2020-10-12 14:55:31",
    "authors": [
      "Alyssa Atkinson"
    ],
    "summary": "Why You Should Eat Oatmeal at Least Once a WeekAnd how to make it taste incrediblePhoto by Ellieelien on UnsplashIf there’s one controversial statement about food, it’s this: breakfast is superior to all other meals.\nAfter all, the options are endless — pancakes, waffles, cereal, peanut butter toast, bagels, cinnamon rolls, and of course, oatmeal.\nIn fact, when I was in college, one of my campus dining halls served breakfast all day every single day.\nYet, I felt it was worth it to make the trek so I could eat my favorite breakfast foods whenever I wanted.\nAnd despite the wide variety of breakfast foods I consume every single week, there is one that I consume almost every morning, and it’s a staple that you should be eating as well.",
    "text": "Why You Should Eat Oatmeal at Least Once a Week\n\nAnd how to make it taste incredible\n\nPhoto by Ellieelien on Unsplash\n\nIf there’s one controversial statement about food, it’s this: breakfast is superior to all other meals.\n\nWe’ve heard time and time again that breakfast is the most important meal of the day, and that it’s absolutely crucial if you want to maintain a healthy weight. However, evidence such as the following cited in Time Magazine:\n\n“has found no strong connection between breakfast and weight loss.”\n\nEven so, I can confidently say that breakfast is indeed my favorite meal, and I’m not one to skip it. After all, the options are endless — pancakes, waffles, cereal, peanut butter toast, bagels, cinnamon rolls, and of course, oatmeal.\n\nIn fact, when I was in college, one of my campus dining halls served breakfast all day every single day. The walk to that building from my dorm room was 15 minutes further than the other dining hall which was practically right outside my door. Yet, I felt it was worth it to make the trek so I could eat my favorite breakfast foods whenever I wanted.\n\nAnd despite the wide variety of breakfast foods I consume every single week, there is one that I consume almost every morning, and it’s a staple that you should be eating as well.\n\nThe powerhouse I’m referring to is oatmeal. It’s the meal I’ve been eating for years that’s inexpensive, offers a number of mindblowing health benefits, and is incredibly delicious if you know how to make it right.\n\nHere’s why you should add it to your meal plan, and how to dress it up for optimal flavor.",
    "keywords": [
      "week",
      "day",
      "eating",
      "im",
      "meal",
      "favorite",
      "single",
      "foods",
      "oatmeal",
      "breakfast",
      "weight",
      "eat"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------2c6aeb7f_4a36_4119_bec3_1280cd0183c0-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------2c6aeb7f_4a36_4119_bec3_1280cd0183c0-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------2c6aeb7f_4a36_4119_bec3_1280cd0183c0-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------2c6aeb7f_4a36_4119_bec3_1280cd0183c0-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------2c6aeb7f_4a36_4119_bec3_1280cd0183c0-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://gen.medium.com/2020-has-been-bad-but-things-are-going-to-get-worse-2e083903b0f4?source=extreme_main_feed---------0-74--------------------06649590_b645_400a_b5c9_8e0ab2d8af85-------",
    "title": "2020 Has Been Bad. But Things Are Going to Get Worse.",
    "publish_date": "2020-10-15 16:16:45",
    "authors": [
      "Colin Horgan"
    ],
    "summary": "2020 Has Been Bad.\nBut Things Are Going to Get Worse.\nThe pandemic revealed our society’s failings.\nPhoto: Markus Spiske/UnsplashEarlier in 2020, as the lockdowns arrived, time started to feel warped.\nDisparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.",
    "text": "2020 Has Been Bad. But Things Are Going to Get Worse.\n\nThe pandemic revealed our society’s failings. We’re running out of time to fix them.\n\nPhoto: Markus Spiske/Unsplash\n\nEarlier in 2020, as the lockdowns arrived, time started to feel warped. We began to ask ourselves whether we were living in the past or the present or whether we were caught somewhere in between. This feeling of inertia was a function of recognizing a time lag between when the virus arrived and when we realized it was here.\n\nThe coronavirus case counts we saw updated every morning were already history — reality as it was two weeks prior. What was happening had already happened but also had not happened yet. Gradually, as the weeks and months followed, we learned more about the virus, including how long it had actually been around us — as well as how unprepared our society and our systems were for its arrival.\n\nThe pandemic has proven to be a clarifying force. While it will likely change some aspects of our society, before it does, it is first revealing what kind of a society we already had: one that is teetering on decaying foundations that have either gone unseen or have been deliberately ignored for decades.\n\nIn nearly every Western democracy it has hit, the pandemic has disproportionately affected people of color, the poor, and the elderly. Sometimes, like in the U.S., it’s hit them all. In short, the virus has shown us where our most egregious inequalities lie. Disparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.\n\nWe are living on a neglected structure, poorly constructed decades ago and then left largely unchecked. Even when we had the chance, after its near-collapse in 2008, to reassess the system, we didn’t bother and instead were steered for another decade in an ideological vacuum, maybe the last true product of late capitalist boredom. This long-standing failure to account for the obvious disparities at the heart of our society is probably why the pandemic will likely create a so-called K-shaped recession — one wherein “big companies and rich families have largely recovered, whereas mom-and-pops and the moms and pops who run them are living through a second Great Depression,” as Annie Lowrey wrote recently at The Atlantic.\n\nWe live every day under a looming sense of delayed inevitability. How long can it go on?\n\nThe mechanisms we have that ought to help us address those disparities, like politics, law, or journalism, have also been revealed to be heavily damaged. Our democracies are stressed, not from external enemies as much as from internal rot. Rebuilding them would require us to inhabit a shared reality. Thanks somewhat to our current acoustic information sphere dominated by platforms of fantasy, we don’t have one.\n\nThat lag time we noticed in the spring now feels more familiar, if not constant. We live every day under a looming sense of delayed inevitability. How long can it go on?",
    "keywords": [
      "bad",
      "2020",
      "long",
      "revealed",
      "disparities",
      "pandemic",
      "living",
      "going",
      "worse",
      "weeks",
      "virus",
      "society",
      "things",
      "sense"
    ]
  },
  {
    "url": "https://gen.medium.com/amy-coney-barretts-confirmation-could-cause-a-right-to-privacy-domino-effect-e0e721c2c36a?source=extreme_main_feed---------1-74--------------------06649590_b645_400a_b5c9_8e0ab2d8af85-------",
    "title": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect",
    "publish_date": "2020-10-15 18:07:16",
    "authors": [
      "Jill Filipovic"
    ],
    "summary": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino EffectIf there’s no right to privacy, a whole line of rulings goes out the windowAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation.\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion.\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\nIf Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it.",
    "text": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect\n\nIf there’s no right to privacy, a whole line of rulings goes out the window\n\nAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation. Photo: Pool/Getty Images\n\nIf there is one stunningly clear takeaway from the hearings to confirm Amy Coney Barrett to the Supreme Court, it’s this: Enjoy your rights to bodily sovereignty and sexual privacy while you have them. Because if Barrett is confirmed to the Supreme Court, they may not last long.\n\nSupreme Court confirmation hearings are often farcical displays. A nominee, chosen from among the finest legal minds in the land and auditioning for a job to write legal opinions that have the power to profoundly shape Americans’ lives, sits before the Senate Judiciary Committee and purports to have few opinions at all on the cases and issues that are the most controversial and oft-discussed inside the legal academy and out of it. But Barrett brings the dissembling and disingenuous refusal to answer direct questions to a new level. No Supreme Court nominee in memory has been so evasive. And where Barrett hedges the most are the biggest tells: on the Affordable Care Act, on presidential powers in elections, and on reproductive rights and sexual privacy.\n\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion. She has said so herself, joining the “pro-life” faculty group at Notre Dame Law School, and signing an ad that said, “It’s time to put an end to the barbaric legacy of Roe v. Wade and restore laws that protect the lives of unborn children.” That isn’t a statement of a personal view; that’s a demand for the courts to act. And if confirmed, Barrett will be one of the nine people in the country with the power to do what the letter she signed demands.\n\nShe has already shown us her intentions. President Donald Trump believes her. Senate Republicans believe her. We should believe her, too.\n\nDiscerning what Barrett will do if she is elevated to the court is made a little more complicated by the fact that Barrett suddenly refuses to speak about her views at all. Neither she nor the president nor her Republican proponents in the Senate want her to be too transparent on the abortion question. Roe v. Wade is, after all, the law of the land, and most Americans do not want it overturned. The election concludes in just 20 days — a clear argument against holding these hearings now, but one Republicans have disregarded. If Barrett answers honestly in the confirmation hearings — if she says that she believes Roe was wrongly decided — then Republicans are going to face a lot of demands to vote no on her confirmation, and have a lot of angry voters on their hands.\n\nAnd so instead, we are treated to this joke of a hearing, where we all pretend that Barrett doesn’t believe exactly what she has repeatedly said she believes.\n\nBarrett is not the first Supreme Court nominee to dodge the abortion question. But she is even less committal than most. Ruth Bader Ginsburg answered clearly in her confirmation hearings that she believes Roe was rightly decided; Sonia Sotomayor agreed that Roe was settled law. Barrett won’t do that.\n\nTo add insult to injury, Senate Republicans (and a few Democrats) have spent precious minutes fawning over Barrett’s family and her ability to have both a career and a large family, something men have done for centuries without much comment. Over and over, conservative senators called Barrett a role model or an inspiration for girls and women (as if boys and men can’t look up to a woman). There is something particularly pernicious about demanding that women laud Barrett, a woman more in the mold of anti-feminist Phyllis Schlafly than women’s rights trailblazer Ruth Bader Ginsburg, as an icon of female accomplishment and professional possibility. It’s no coincidence that in the wake of Roe v. Wade and earlier cases establishing a right to contraception access, American women surged toward greater independence, going to college and into the workforce in record numbers. The lessons of safe abortion and readily available contraception reverberate around the world: When women can plan their families, women thrive. We live longer. We are far less likely to die in childbirth, and our children are less likely to die, too. We are more likely to go to school; so are our daughters. We are less likely to be trapped in abusive relationships, and less likely to be stuck in poverty. Our families are more prosperous. Our communities are healthier.\n\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\n\nFeminists have fought long and hard for these rights — including for the right of women to choose to have large families, as Barrett has, even if they are not worth nearly $2.6 million, as Barrett is, but are instead struggling to keep their children safe and secure. Republicans and conservatives like Barrett have cheered on large (white) families, while refusing to do much of anything to help out when families struggle. Feminists have tried to clear the way for women to make their own reproductive choices — to have children or not, without state interference or professional discrimination. Barrett has benefited from that feminist work, which is why she is now in a position to undermine it. Being told that feminists and women generally should appreciate that and admire her is a hard pill to swallow.\n\nBarrett won’t be the first anti-abortion judge on the court (although if Republicans are looking for firsts, she would be the first staunchly anti-abortion woman). But her hostility to reproductive rights extends far beyond Roe and the right to abortion. In the hearings, Barrett couldn’t answer whether she believed Griswold v. Connecticut, the case that extended contraception access to married women, was rightly decided. We know that her mentor, Antonin Scalia, believed Griswold was indeed decided wrongly, and given the chance, would likely have overturned it. We know Barrett has said that, while she is her own woman, she believes Scalia got most of his decisions right. While Roe gets a lot of press, Griswold is at the heart of many of the court’s most significant decisions — it was the first case that fully laid out the right to sexual privacy, which has been understood since then to include the right of any woman to use contraception and have an abortion; the right of people of the same sex to have consensual intercourse; and the right of individuals to marry someone of the same sex. If Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\n\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it. And she’s right that it’s been a while since states have criminalized contraception. But they haven’t done that because abortion rights and Roe have taken the bulk of the focus of the anti-abortion movement. It’s worth noting, though, that most mainstream anti-abortion groups do not support contraception access; some are publicly opposed to it, and some falsely characterize common contraceptive methods as “abortifacients.” These same groups have pushed legislation that establishes personhood at the moment of conception, something at odds with the medical definition of pregnancy, but that could outlaw several of the most common and effective forms of birth control and even criminalize in-vitro fertilization. That’s all very far from an academic exercise. It is not “unthinkable.” It is, in fact, part of a well-thought-out plan. If Roe is overturned, there’s little to stop conservative groups from pressing forward and coming for contraception next — or marriage equality, or the right to have consensual intercourse with an adult of the same sex.\n\nThe message from Barrett’s confirmation hearing was clear: This is all on the line. She does not believe there is a constitutional right to sexual privacy. The question is whether the weight of the precedent — dozens of cases over five decades, millions of Americans who rely on what they believe to be their right to use contraception, end unwanted or dangerous pregnancies, have sex, and get married — will be enough to tip Barrett’s originalist scales toward upholding the law as it stands.\n\nBarrett showed us who she is: a woman who will not affirm even the least contested rights to sexual privacy and family planning. Which means even the least contested of those rights could be up for grabs with Barrett on the Supreme Court.",
    "keywords": [
      "barretts",
      "women",
      "confirmation",
      "effect",
      "cause",
      "barrett",
      "court",
      "griswold",
      "domino",
      "privacy",
      "rights",
      "amy",
      "coney",
      "hearings",
      "contraception",
      "right",
      "roe"
    ]
  },
  {
    "url": "https://elemental.medium.com/my-therapist-says-all-relationships-are-impossible-d4c61f7df249?source=extreme_main_feed---------2-74--------------------06649590_b645_400a_b5c9_8e0ab2d8af85-------",
    "title": "My Therapist Says All Relationships Are Impossible",
    "publish_date": "2020-10-14 05:32:29",
    "authors": [
      "Naveen Kumar"
    ],
    "summary": "My Therapist Says All Relationships Are ImpossibleIt’s okay to lose a friendshipThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement.\nMy therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!).\nMy therapist put it bluntly: “All relationships are impossible.”All relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\nLabels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\nThis type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences.",
    "text": "My Therapist Says All Relationships Are Impossible\n\nIt’s okay to lose a friendship\n\nThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement. In the decade we’ve known each other, I had always felt comfortable talking to him about my own experience of otherness as an Indian American. But when I pointed to his whiteness as a privilege he ought to examine, he grew defensive, blew up, and ghosted.\n\nI’m not someone who falls out with friends easily or often. The few times it has happened, my instinct is to ask, “How did I get myself into this?” or “Why didn’t I see this coming?”\n\nWhen any situation in my life goes awry, I tend to perseverate, fixating on how I might have caused it to fly off the rails. “Am I a bad judge of character?” I think. My therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!). But when it comes to the shock of a breakup, whether with a friend or a romantic partner, it’s the fantasy that we can ever fully know someone, or achieve a kind of perfect unity that’s to blame.\n\nMy therapist put it bluntly: “All relationships are impossible.”\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\nHis statement was one of those breakthrough moments when my jaw dropped and I felt an immediate sense of relief. The existentialism of it thrilled me, and its practical application made perfect sense. In every relationship, there will always come a conflict (likely many over time) that indicates an unbridgeable distance between two people. Labels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\n“A lot of the things that the world tells us about what a relationship is supposed to be present an ideal that everyone feels they’re failing to live up to,” says Jamieson Webster, PhD, a psychoanalyst in New York City and author of Conversion Disorder: Listening to the Body in Psychoanalysis. It’s not just that the messages we get from pop culture, about fairy tale romance and lifelong BFFs, are unrealistic. The very idea that any relationship, no matter how close, can make us less alone or separate from each other is perhaps the ultimate human fantasy.\n\n“Separation and difference are very hard, including the capacity to understand being alone,” Webster says. “There is so much fantasy that tries to cover over ‘aloneness,’ which is simply a factual reality.”\n\nWhen we’re able to more clearly understand our innate separateness, we can also more readily accept that personal differences are bound to arise in every relationship. The question then becomes how two people acknowledge the essential distance between them, communicate their feelings about it, and reach a mutual resolution that doesn’t attempt to paper over it. Sometimes it’s possible to bridge the gap and continue forward together; in other cases, it may be time to move on. “Whether with a friend or a partner, it’s about what you build on the basis of your differences,” Webster says. “Because you are two unique people with different histories and different pleasures and pains.”\n\nRecognizing the impossibility of a “perfect” relationship is also useful when we seek to build new ones. While swiping through dating profiles, for example, it’s easy to point to a picture you don’t particularly like or the fact that someone prefers cats over dogs as reasons why it would never work out. This type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences. How many potential connections have we cut off at the pass due to preconceived notions of compatibility?\n\nBreakups are hard, even and especially with close friends. But they’re also the surest way to recognize, and even honor, the truth of our individuality. “Breakups really propel people forward in terms of their development,” Webster says. “Whether it’s with friends or partners, a breakup is a time to recover yourself and find your separateness,” something you may have been struggling to find inside the relationship. That doesn’t mean we shouldn’t allow ourselves to feel hurt and disappointed, or take responsibility for our role in the process. But rather than frame a breakup as a personal failure, we can acknowledge it as a reflection of one of life’s most essential truths.",
    "keywords": [
      "differences",
      "partner",
      "therapist",
      "fantasy",
      "impossible",
      "friend",
      "relationship",
      "webster",
      "friends",
      "relationships",
      "perfect"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------06649590_b645_400a_b5c9_8e0ab2d8af85-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/fearless-she-wrote/we-should-be-ashamed-of-the-sexism-surrounding-the-murder-of-shanann-watts-904bc0fc0ef9?source=extreme_main_feed---------4-73--------------------06649590_b645_400a_b5c9_8e0ab2d8af85-------",
    "title": "We Should Be Ashamed of the Sexism Surrounding the Murder of Shanann Watts",
    "publish_date": "2020-10-13 16:37:33",
    "authors": [
      "Laura Fox"
    ],
    "summary": "We Should Be Ashamed of the Sexism Surrounding the Murder of Shanann WattsA pregnant woman was murdered by her husband.\nThe documentary is narrated by the victim Shanann Watts using audio and footage from her Facebook live streams.\nAny footage of her husband and murderer, Chris Watts, is from police body cams, cameras in the police interview rooms, and courtroom footage.\nChris Watts, husband of Shanann and father to Bella, Celeste, and Nico, eventually confessed to their murders, but not before trying to pin the blame on Shanann.\nWhy does a female murder victim have to be “perfect” in order to receive compassion?",
    "text": "We Should Be Ashamed of the Sexism Surrounding the Murder of Shanann Watts\n\nA pregnant woman was murdered by her husband. He went on to murder their two children. But somehow, she “drove him to it.”\n\nThe home of Shanann and where she was murdered. Image licensed for commercial use.\n\nSocial media has been buzzing with people’s reaction to the Netflix documentary American Murder: The Family Next Door. What sets this documentary apart from traditional murder documentaries is that it centers the victims in the story rather than the murderer. The documentary is narrated by the victim Shanann Watts using audio and footage from her Facebook live streams. Any footage of her husband and murderer, Chris Watts, is from police body cams, cameras in the police interview rooms, and courtroom footage.\n\nThe murder took place on August 13th, 2018. Shanann, who was pregnant at the time with a baby boy called Nico, was reported missing along with her two children, Bella,4, and Celeste, 3. Chris Watts, husband of Shanann and father to Bella, Celeste, and Nico, eventually confessed to their murders, but not before trying to pin the blame on Shanann. He insisted in police interviews that Shanann was the one who had killed their daughters and he killed her in retaliation.\n\nChris did not fully admit to what he had done until November 6th, 2018. In that time, social media was filled with people scrutinising Shanann’s Facebook page. Her parenting was criticised along with her personality. And despite the fact Chris would eventually admit that Shanann had not hurt their daughters, the internet still critcised her and tried to find ways of blaming her for Chris’s actions.\n\nI watched the documentary and found it impossible to hold back tears. Audio recordings were played of people calling her crazy, bossy, and highly strung. She was even called a bitch and people suggested she drove Chris to murder her and their children.\n\nThe public’s treatment of Shanann was disappointing, but not surprising. It’s true that Shanann seemed like the highly-strung one in the relationship. In one of her Facebook livestreams that was played in the documentary, she described herself as the more dominant one in the relationship and liked things a certain way.\n\nSomeone with these personality traits can be annoying sometimes. Shanann herself seemed aware of this. But do women deserve to be murdered for being bossy? No. Absolutely not. And the fact people were suggesting this was okay is extremely sexist.\n\nI can’t help but feel that if Shanann had been a man with these personality traits, she would have been seen as ambitious, hardworking, assertive, and the leader of her family. But because she was a woman, these traits were labeled as bossy, highly strung, and crazy.\n\nVictim blaming women is nothing new\n\nThe hashtag #iwasblamed was trending on Twitter earlier this year in response to an article where Sabrina Lekaj, who was stabbed to death, was painted in a negative light. Her murderer, Petrit Lekaj, was painted in a more favourable light as a father who was concerned about his daughter’s drinking, partying, and drug-taking. These are some of the tweets from people who have experienced victim-blaming for being women on the receiving end of male perpetrators:\n\n#iwasblamed I was told I was a slut, a home wrecker, a whore, a baby killer who didn’t deserve to live. I was 15 and had been sexually abused by a friends step dad. He also made me have an illegal abortion. Then the media said we had an affair and I was his “lover” I was 15. My abuser tried to kill me then shot himself. He was called lovesick and I was a heartbreaker. I was 21 #iwasblamed #iwasblamed for being beaten by my brother and almost killed by my father. My extended family all took the side of the guilty parties, despite the extent of the damage done to me. It always seemed as though the men in my family could do no wrong. #iwasblamed by the media for my 22 year old abusers suicide after I spoke to the police. .. I was 14 and quoted as his “girlfriend” in the subheading\n\nOther women have been blamed for the actions of their murderers\n\nMuch like how Shanann was blamed for her own murder, Tatyana Strakhova was vilified on social media after she was raped and murdered by her roommate. Her rapist and murderer killed himself, and as a result, Tatyana’s Instagram was filled with comments blaming her.\n\nOne opinion piece published by Dni.ru said that she “wasn’t as innocent as it might seem at first glance.” The piece featured photos from Strakhova’s social media accounts of her drinking or posing in sexually suggestive positions.\n\nThey Blamed A Victim For Her Own Murder. Here’s How Women Are Responding by Otillia Steadman of Buzzfeed News.\n\nSimilarly, Grace Millane was blamed for her own murder due to her sexual history of having a preference for BDSM. The media reporting of her murder was met with outrage and exposed a disturbing historical trend of women being blamed for not being the “perfect victim.” According to theconversation.com, this attitude can be traced as far back to the response to the murders of Jack the Ripper.\n\nIt has been argued by several feminist historians, that the whole grand narrative of the Whitechapel Murders is held aloft to all women — as a warning of what may happen should they breach their prescribed gendered limits of domesticity, geography and sexuality.\n\n‘Jack the Ripper’ was a serial killer who disemboweled women — we need to stop celebrating that by Charlotte Mallinson\n\nWhy did it take a documentary to evoke compassion towards Shanann?\n\nSince the documentary aired, I feel like I know Shanann and her children. The documentary sets an example for other murder documentaries as it gives the victims a voice. Due to its format, many people seem to feel the same way as I do and are largely in support of Shanann. Her Facebook page is filled with comments of love and support towards her. On photos of her and Chris, members of the public have commented to condemn his actions.\n\nMost victims don’t get to have their voices heard. And it’s sad that it took a Netflix documentary to evoke some compassion and understanding towards Shanann. Why does a female murder victim have to be “perfect” in order to receive compassion? And why is it when they do fit the bill of “perfect victim”, people desperately try to find reasons as to how they drove their male attacker to harm them?\n\nShanann was popular and thought of as a loving wife and mother, yet people were determined to find ways they could justify what happened to her. The psychology of victim-blaming explains that people do this because we want to believe that something unthinkable doesn’t just happen to anyone. We want to believe that we would have been more careful and done things differently so we can convince ourselves it would never happen to us.\n\nBut in reality, anyone can be a victim. Even people who are flawed and made choices many may not agree with. They are still a victim and their personal history or character flaws do not reduce the severity of the crime committed against them.\n\nSoon the buzz of this documentary will die down. Another woman will be murdered by a man and we will try to find ways to explain how she drove him to it. Or we could remember Shanann and pay tribute to her, and the many women who have been murdered and blamed before her, by learning from this shameful behaviour. History doesn’t have to repeat itself.\n\nWhether women are bossy, highly-strung, or even “crazy” or “bitches”, they do not deserve to be murdered. It’s shameful that has to be said.",
    "keywords": [
      "shanann",
      "women",
      "ashamed",
      "murdered",
      "surrounding",
      "sexism",
      "victim",
      "media",
      "murderer",
      "blamed",
      "murder",
      "watts",
      "chris",
      "documentary"
    ]
  },
  {
    "url": "https://towardsdatascience.com/real-time-time-series-anomaly-detection-981cf1e1ca13?source=extreme_main_feed---------5-73--------------------06649590_b645_400a_b5c9_8e0ab2d8af85-------",
    "title": "Real-Time Time Series Anomaly Detection",
    "publish_date": "2020-10-14 14:31:51",
    "authors": [
      "Marco Cerliani"
    ],
    "summary": "In this post, we explore different anomaly detection approaches that can scale on a big data source in real-time.\nTsmoothie is a python library for time series smoothing and outlier detection that can handle multiple series in a vectorized way.\nThe convolutional smoother uses weights generated using predefined windows function (linear, hanning, hamming, bartlett, blackman).\nThe exponential smoother uses weights generated with an exponential function.\nRespectively, two different data structures are taken into account: random walks series and seasonal series with no trend.",
    "text": "As much as it has become easier over the years to collect vast amounts of data across different sources, companies need to ensure that the data they’re gathering can bring value. To aid insight collection from the data, machine learning and analytics have become trending tools. Since these domains require real-time insights, an abundance of unwelcome data can create real issues.\n\nBefore decisions are made, and critically, before actions are taken, we must ask: are there anomalies in our data that could skew the results of the algorithmic analysis? If anomalies do exist, it is critical that we automatically detect and mitigate their influence. This ensures that we get the most accurate results possible before taking action.\n\nIn this post, we explore different anomaly detection approaches that can scale on a big data source in real-time. The tsmoothie package can help us to carry out this task. Tsmoothie is a python library for time series smoothing and outlier detection that can handle multiple series in a vectorized way. It’s useful because it can provide the techniques we needed to monitor sensors over time.\n\nTYPES OF ANOMALIES\n\nFirst, let’s define anomalies. They can be anything that is different or abnormal and deviates substantially from other data in the sample or historical data.\n\nAnomalies are often divided into point and pattern anomalies. Point anomalies are single instances of something abnormal, while pattern anomalies represent clusters of data that are abnormal.\n\nIn most of the case, some point anomalies may seem like a case of bad luck. With a pattern anomaly instead, the data creates a pattern that looks very different from normal. Pattern anomalies are more difficult to detect because we must first be able to define a normal pattern, and then we could need more data to be able to classify that this pattern is anomalous compared to historical activity.\n\nBelow we present different simulated scenarios, where we apply different techniques suitable for anomaly detection. Their adoption is domain-related and they are all based on simple assumptions. This simplicity is fundamental in all the tasks where we have a lack of information or in the presence of a little amount of data.\n\nPOINT ANOMALIES\n\nOur aim here is to detect data points that deviate so much from others. This arouses suspicions that the points were generated by a different mechanism.\n\nTwo different algorithms are used: a convolutional smoother and an exponential smoother. Both smooth the received signals using a sliding window approach. The convolution approach uses a discrete linear convolution while the exponential one uses an exponentially weighted convolution. Convolution is a mathematical operation that could be described as the integral of the product of two sequences: the raw signal and the weights. The convolutional smoother uses weights generated using predefined windows function (linear, hanning, hamming, bartlett, blackman). In the case of linear type, the weights are all the same and equal to one. This makes the operation equal to a moving average. The exponential smoother uses weights generated with an exponential function. As result, the most recent observations weight the most when computing the smoothing.\n\nRespectively, two different data structures are taken into account: random walks series and seasonal series with no trend.",
    "keywords": [
      "detection",
      "anomaly",
      "anomalies",
      "weights",
      "uses",
      "pattern",
      "convolution",
      "exponential",
      "smoother",
      "different",
      "realtime",
      "data",
      "series"
    ]
  },
  {
    "url": "https://towardsdatascience.com/25-lesser-known-java-libraries-you-should-try-ff8abd354a94?source=extreme_main_feed---------6-73--------------------06649590_b645_400a_b5c9_8e0ab2d8af85-------",
    "title": "25 lesser-known Java libraries you should try in 2020",
    "publish_date": "2020-10-07 22:09:24",
    "authors": [
      "Md Kamaruzzaman"
    ],
    "summary": "JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape.\nIn enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform.\nWiremockHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development.\nLink:ConclusionIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries.\nThere are many excellent Java libraries that I have not listed here but worth a try.",
    "text": "1. RxJava\n\nReactive Extensions (ReactiveX) is a popular software development paradigm to deal with asynchronous and event-driven programming. RxJava is the Java VM implementations of the Reactive Extensions by using Observables. It extends the Observer Pattern to support event-driven programming by adding composable operators on a sequence of events/data in a declarative way. It also hides the low-level complexities like threading, thread-safety, synchronization, and concurrent data structure.\n\nIf you want to do reactive programming in Java, it is a must-have library.\n\nLink:\n\n2. OkHttp\n\nHTTP is by far the most used Application layer protocol. There are many excellent Java-based HTTP client libraries out there. But OkHttp is the simplest yet powerful HTTP client library in the JVM. It offers fluent and clean API to develop HTTP client in Java.\n\nIt also supports some advanced features: Connection pooling, GZIP shrink, response caching, modern TLS features, and many more.\n\nLink:\n\n3. MyBatis\n\nIn most Software development projects, we need to store data. Although there are many types of data storage, SQL is still the most used data storage type. As a Java developer, we need to match our Java object to the SQL table. One way to achieve the mapping is to use ORM (e.g., Hibernate). But there are many use cases when you want to have full control over the Object-Table mapping (e.g., Performance). In those cases, you can directly use JDBC and write the SQL query. The other way is to use MyBatis to map Java Object to Stored Procedure or SQL statements. It offers both annotation-based or XML descriptor based mapping.\n\nI prefer MyBatis over plain JDBC, especially in larger projects, as it improves the separation of concerns.\n\nLink:\n\n4. HikariCP\n\nHikariCP is the second library in this list related to Database. Establishing a JDBC connection is resource expensive. If you create a new connection every time you access the Database and close it once you are done, it can severely impact your application performance. Not to mention that failure to close the connection properly or allowing limitless database connection can crash your application.\n\nUsing Connection Pooling means connections are reused rather than created each time a connection is requested. HikariCP is a very fast yet lightweight Database connection pooling in JVM. It is also very reliable and a “zero-overhead” JDBC connection pool.\n\nLink:\n\n5. Lombok\n\nIn modern days, Java is often criticized as a verbose and bloated programming language. Compared to other popular languages (JavaScript, Python, Scala, Kotlin), a developer needs to write lots of boilerplate code in Java. Although Java has introduced Records in JDK 15 to reduce boilerplate code in Java, it is not an LTS release. Fortunately, a library can already reduce your boilerplate code in Java significantly: Project Lombok. You can generate getters, setters, hashcode, equals, toString, Builder classes by adding a few annotations. Additionally, it offers null pointer check, logger, and many more.\n\nLink:\n\n6. VAVR\n\nJava finally released the much-awaited functional programming via Lambda and Streaming in version 8. If you are used to functional programming or want to dive deep into functional programming, you may find Java’s functional programming wanting. Compared to many other functional programming languages (Haskell, Scala), Java is pale. VAVR is a library that can fill the gap of the functional programming features in Java. It provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nLink:\n\n7. Gson\n\nOver the years, JSON has become the de-facto data exchange format. In Java, there also exist several excellent libraries to deal with JSON. One of them is Jackson, which I have covered in my previous article. The other excellent library is Google’s Gson. Unlike Jackson, it is a minimalistic library and only supports JSON. It offers Data Binding, extensive Generic support, flexible customization. One of the major advantage (or disadvantage depending on your liking) of Gson is that it does not need annotation.\n\nLink:\n\n8. jsoup\n\nIf you are developing your application in Java and need to deal with HTML, you should use jsoup. It is a Java library to work with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data. It implements the WHATWG HTML5 specification and parses HTML using the best of HTML5 DOM methods. It supports parsing HTML from URL/string, find and extract data, manipulate the HTML elements, clean HTML, output HTML.\n\nLink:\n\n9. JIB\n\nIf you are working on an enterprise-grade application, it should be at least Cloud-ready. The first step to make your application cloud-ready is to containerize your application, i.e., put your artifactory binary into Docker image. Dockerizing a Java application is a bit tedious work: you need to have deep knowledge of Docker, you need to create a Dockerfile, and you will need Docker Daemon. Fortunately for the Java developers, Google has created an Open-source Java containerizer using already existing tools. You can use JIB as a Java library to build an optimized Docker and OCI image.\n\nLink\n\n10. Tink\n\nTink is yet another handy Java library in this list from Google. Cryptography and security are becoming increasingly more important in Software Development. Cryptographic techniques are used to secure user data. Implementing cryptography correctly requires a lot of expertise and effort. A group of Cryptographers and security engineers in Google has written the multi-language cryptographic library Tink. It offers easy-to-use but hard to misuse security API. Tink offers cryptographic functionalities via different primitives. It provides symmetric key encryption, streaming symmetric key encryption, deterministic symmetric key encryption, digital signature, hybrid encryption, and many other encryption functionalities.\n\nLink:\n\n11. Webmagic\n\nIf you work on Web crawling, you can write your own crawler, which is time-consuming and tedious. In Java, Webmagic is an excellent Web crawler library that covers the complete life-cycle of crawler: downloading, URL management, content extraction, persistence. It offers a simple yet flexible core, Annotation support, multi-threaded, and easy-to-use API.\n\nLink:\n\n12. ANTLR 4\n\nIf you work on parsing and processing data, then the ANTLR library could be handy. It is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It does this by giving us access to language processing primitives like lexers, grammars, parsers, and the runtime to process text against them.\n\nIt’s often used to build tools and frameworks.\n\nLink:\n\n13. Caffeine\n\nIf your application is read-heavy, then caching can dramatically improve your application’s data access performance. Java has many great caching libraries. Caffeine is the best among the lot. It is a high-performance, near-optimal caching library based on Java. It offers a fluent caching API and some advanced features like asynchronous loading of entries, asynchronous refresh, weak referenced keys, etc.\n\nLink:\n\n14. Metrics\n\nOnce your Java application runs into production, you will want to have insight into your application's critical components. Metrics from the Dropwizard framework is a simple yet compelling Java library that provides insight into your application and JVMs KPI, e.g., rate of events, pending jobs, service health check, and more. It is modular and offers modules for other libraries/frameworks.\n\nLink:\n\n15. gRPC-Java\n\nGoogle has created gRPC as a modern Remote Procedure Call system in 2015. Since then, gRPC became extremely popular and one of the most used RPC system in modern software development. The library gRPC-Java is the Java implementation of the gRPC client. If you want to use gRPC in Java, then this library can be handy for you.\n\nLink:\n\n16. Java WebSocket\n\nTraditional Client-Server communications unidirectional. WebSocket is a bi-directional communication protocol over a single TCP connection. Java WebSocket is a barebone WebSocket server and client implementation in Java. If you are a Java developer and want to work with WebSocket, this library is highly recommended.\n\nLink:\n\n17. JJWT\n\nJSON Web Token (JWT) is the de-facto Authorization and secure Information exchange format in modern software development. Whether you are using a simple session-based Authorization or highly advanced OAuth2 based Authorization, you will probably use JWT. JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape. It is fully RFC specification compliant on all implemented functionality. It supports readable and convenient fluent API.\n\nLink:\n\n18. Swagger-Core\n\nOpenAPI is the specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. Swagger-Core is the Java implementation of the OpenAPI specification. If you are exposing REST API in your Java/JavaEE application, you can automatically provide and expose your API definitions using Swagger-Core.\n\nLink:\n\n19. Async Http Client\n\nAsynchronous programming is becoming increasingly popular of late because of its non-blocking nature. Most of the popular Java HTTP client libraries offer limited to no asynchronous HTTP response processing. Async Http Client is a popular Java library that offers asynchronous HTTP response processing. As a bonus feature, this library also supports the WebSocket protocol.\n\nLink:\n\n20. Liquibase\n\nAs a software developer, we all know the importance of version control, DevOps, and CI/CD of our code. In a blog post: Evolutionary Database Design, the great Martin Fowler argued that we also need version control and CI/CD of our code. Liquibase is a tool that supports tracking, version controlling, and deployment of SQL database changes in Java Applications. If you are working with an SQL database where the database is evolving, this tool can greatly simplify your database migration.\n\nLink:\n\n21. Springfox\n\nI have already listed Swagger-Core in this list, which can automatically generate REST API documentation for vanilla Java or Java EE application. In enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform. In Spring-based Java applications, the Springfox library can automatically generate REST API documentation from the source code.\n\nLink:\n\n22. JavaCV\n\nOpenCV is a computer vision and machine learning software library. It is open-source and was built to provide a common infrastructure for computer vision applications. JavaCV is a wrapper on OpenCV and many other popular libraries (FFmpeg, libdc 1394, PGR FlyCapture) in the field of computer vision. JavaCV also comes with hardware accelerated full-screen image display, easy-to-use methods to execute code in parallel on multiple cores, user-friendly geometric and the color calibration of cameras and projectors, detection and matching of feature points, and many other features.\n\nLink:\n\n23. Joda Time\n\nJava had a poor date and time functionalities in the pre-Java8 core library. Java8 released much needed advanced date and time functionalities in its java.time package. If you are working with an older version of Java (pre Java8), Joda time can provide you the advanced date and time functionalities. However, if you are working in a newer version of Java, you may not need this library.\n\nLink:\n\n24. Wiremock\n\nHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development. During the writing Unit test, it is best to focus on SUT (System Under Test) and mock the services used in the SUT. Wiremock is a simulator for REST API and enables developers to write code against an API that does not exist or incomplete. In microservice-based software development, Wiremock can significantly boost development velocity.\n\nLink:\n\n25. MapStruct\n\nIn Java application development, you often need to convert one type of POJO to another type of POJO. One way to achieve this POJO or Bean conversion is to explicitly code the transformation, which is tedious. The smart way is to use a library that is specifically developed to transform POJO/Bean. MapStruct is a code generator that implements mapping between POJO/Bean on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe, and easy to understand.\n\nLink:\n\nConclusion\n\nIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries. These libraries are not domain-specific and can help you whether you are developing Software for Business applications, Robotics, Android Apps or Personal projects. Please note that for a large and wide eco-system like Java, this list is not conclusive. There are many excellent Java libraries that I have not listed here but worth a try. But this list of libraries can provide a quick peek into the world of the Java eco-system.",
    "keywords": [
      "2020",
      "development",
      "lesserknown",
      "libraries",
      "try",
      "library",
      "25",
      "application",
      "java",
      "need",
      "offers",
      "programming",
      "software",
      "data"
    ]
  },
  {
    "url": "https://uxdesign.cc/29-of-my-favorite-websites-most-designers-have-never-heard-of-d7d99179cda7?source=extreme_main_feed---------7-73--------------------06649590_b645_400a_b5c9_8e0ab2d8af85-------",
    "title": "29 of My Favorite Design Tools & Websites You’ve Never Heard of",
    "publish_date": "2020-10-07 15:12:18",
    "authors": [
      "Danny Sapio"
    ],
    "summary": "The design space is awash with countless design tools, plugins, websites, resources, and more promising to improve your workflow and make you a savvier designer.\nI’ve tried my hand at a lot of them over the years, but there are only a few that really stand out.\nThis list is the cream of the crop — the most obscure, creative, unique, helpful or exceptional.\nSome are fun sites to be inspired from; others are tools and resources that will absolutely make you a better designer.\nLet me know what your favorite tools are on Twitter.",
    "text": "The design space is awash with countless design tools, plugins, websites, resources, and more promising to improve your workflow and make you a savvier designer. I’ve tried my hand at a lot of them over the years, but there are only a few that really stand out.\n\nThis list is the cream of the crop — the most obscure, creative, unique, helpful or exceptional. Some are fun sites to be inspired from; others are tools and resources that will absolutely make you a better designer.\n\nI hope you enjoy! Let me know what your favorite tools are on Twitter.\n\n1. The preposterous web portal of Erik Bernacchi\n\neeerik.com",
    "keywords": [
      "stand",
      "workflow",
      "heard",
      "resources",
      "favorite",
      "tools",
      "web",
      "design",
      "unique",
      "twitter1",
      "youve",
      "tried",
      "29",
      "websites"
    ]
  },
  {
    "url": "https://medium.com/its-tinkoff/typescript-tricks-that-allow-you-to-scale-your-app-endlessly-95a0ff3d160d?source=extreme_main_feed---------8-73--------------------06649590_b645_400a_b5c9_8e0ab2d8af85-------",
    "title": "TypeScript tricks that allow you to scale your app endlessly",
    "publish_date": "2020-10-08 12:02:05",
    "authors": [
      "Roman Sedov"
    ],
    "summary": "We collected a set of rules for more strict TypeScript.\nstrictTypeScript has a “strict” mode that is unfortunately disabled by default.\nWith “strict” mode you forget about errors like undefined is not a function or cannot read property X of null .\nIf you start a new project, enable “strict” and be happy.\ntsconfig.json filereadonlyThe next important rule for us as developers in TypeScript is using readonly everywhere.",
    "text": "We use TypeScript because it helps develop our apps safer and faster.\n\nTypeScript by default has many simplifications. They help JavaScript developers to start using it easier but they waste a lot of time in the long term.\n\nWe collected a set of rules for more strict TypeScript. You just get used to it once and save much time working with your code in the future.\n\nany\n\nThere is a simple rule that returns much profit in the long term.\n\nDo not use “any”. Ever.\n\nThere is simply no case where you cannot describe a type instead of using “any”. If you have such a situation, it can be a problem in architecture, legacy or something else.\n\nUse generics, unknown or overloads and do not worry about unexpected problems with data structures. Such problems are hard and expensive to debug.\n\nstrict\n\nTypeScript has a “strict” mode that is unfortunately disabled by default. This mode enables a set of rules for safe and comfortable TypeScript. If you do not know about this mode, read the following article.\n\nWith “strict” mode you forget about errors like undefined is not a function or cannot read property X of null . Your types are accurate and correct.\n\nAnd what should I do?\n\nIf you start a new project, enable “strict” and be happy.\n\nIf you have a project without “strict” mode and you want to enable it, you can meet a lot of compilations. It is very hard to write a strict code without alerts of the compiler. So it’s likely you have a lot of problematic places. Migrating the whole project to “strict” gets annoying pretty quickly.\n\nIt is recommended to cut this big task into pieces. The “strict” mode consists of a set of 6 rules. You can enable one of them and fix all errors. The next time, you enable the second one, fix errors and continue work and so on. One day you get a “strict” mode.\n\ntsconfig.json file\n\nreadonly\n\nThe next important rule for us as developers in TypeScript is using readonly everywhere.\n\nIt is a bad practice to mutate structures while working with them. For example, Angular does not like this way: there are some issues with ChangeDetection and updates of your view when you mutate data.\n\nBut you can prevent all attempts to mutate data easily. Just make a habit of writing readonly word.\n\nAnd how should I do it?\n\nThere are many places in your app where you can replace unsafe types to readonly options.\n\nUse “readonly” properties in interfaces\n\nPrefer “readonly” types\n\nUse “readonly” fields in a class when possible\n\nUse “readonly” structures\n\nas const\n\nIn TypeScript v.3.4 we got const-assertions\n\nIt is a more strict instrument than “readonly” types because it seals instance to the most precise type and you can be sure that nobody and nothing will change it.\n\nUsing as const you also get exact types in the tips of your IDE.\n\nUtility Types\n\nTypeScript has a set of types that are shortcut transformations of other types.\n\nPlease, explore the official utility types doc and use them in your app. It saves a lot of time.\n\nNarrow down your types\n\nTypeScript has many instruments to narrow down types. It is cool because we can support strict typing in our project in a wide variety of cases.\n\nLook at the following sample. It is a simple case but it can help to understand the difference between checking a type and narrowing it down.",
    "keywords": [
      "using",
      "typescript",
      "types",
      "endlessly",
      "set",
      "project",
      "lot",
      "readonly",
      "enable",
      "scale",
      "allow",
      "tricks",
      "mode",
      "strict",
      "app"
    ]
  },
  {
    "url": "https://eand.co/are-these-the-last-25-days-of-american-democracy-14fa529ba8bd?source=extreme_main_feed---------9-73--------------------06649590_b645_400a_b5c9_8e0ab2d8af85-------",
    "title": "Are These the Last 25 Days of American Democracy?",
    "publish_date": "2020-10-09 16:36:55",
    "authors": [
      "Umair Haque"
    ],
    "summary": "Are these to be the last 25 days of American democracy?\n!” while Trump was busy scapegoating immigrants, refugees, Jews, Muslims, and everyone else who wasn’t a “real” American.\nLike I said: it’s deeply abnormal for a society to feel this way, act this way, think this way, be this way.\nBecause I want you to really understand American collapse, so that you really understand what America is up against in this election.\nThese could very well be the last 25 days of American democracy.",
    "text": "The more desperate that Trump gets, the more egregious his transgressions become. The latest, as he plummets in the polls, is to call for his opponents to be prosecuted and indicted.\n\nThat’s straight out of the authoritarian’s playbook. And it should be a clear sign of what is to come. Are these to be the last 25 days of American democracy?\n\nTrump has long understood that he is unlikely to win the election outright. That the majority of Americans don’t back him — they didn’t the first time around, remember. That’s no mere coincidence: it is the culmination of a trend. The same happened with George W Bush, and it was an ominous sign of things to come. America’s ranked as a flawed democracy precisely because it’s obscure “electoral college” system at this point, a remnant of slavery and segregation, designed to empower wealthy landowners, stands against the wishes of the majority — who want a society more like Canada or Europe than the failed state of Texas.\n\nAnd so what has developed over the last few months — and the over the last several decades, with the GOP— is what looks like a sophisticated, complex strategy to thwart democracy itself, and steal the election. That’s no overstatement or hyperbole. As I’ve written in the recent past, the elements of this are in plain view — for those who care to look.\n\nBefore I discuss this strategy, and how its evolving, though, I want to point something out. Americans don’t quite seem to understand that they are living in a pre-authoritarian society now, and have been for quite some time. When the Supreme Court handed the win to Bush, that was a major, major development in pre-authoritarianism. When Obama — as good a person as he is, he made several major mistakes — bailed out the banks, but not Main St, that too was pre-authoritarianism, propping up failed predatory institutions. When warnings of Trump’s abuses of power to come were dismissed in 2016, that too was pre-authoritarianism, as it was when Hillary got attacked for “but her emails!!” while Trump was busy scapegoating immigrants, refugees, Jews, Muslims, and everyone else who wasn’t a “real” American.\n\nPre-authoritarianism isn’t just a political phenomenon, though. It’s also a kind of cultural and social current sweeping through a nation. And America’s long been pre-authoritarian in those ways, too. Americans are legendary the world over for their cruelty, indifference, and brutality — all of which are severe blinking-red indicators of pre-authoritarianism. Kids shooting each other up at schools — something which happens nowhere else in the world with such regularity? People having to beg strangers online to pay for basic medicine? Generations crippled by unpayable debt, beginning with “lunch debt,” becoming “student debt,” then turning into “credit card” and “medical debt” — a society of neo-serfs, in other words?\n\nAll these things are severe indicators of pre-authoritarianism, and yet they have also become normalised in America to the extent that many Americans don’t understand that living this way, among such severe cruelty and brutality, is deeply, deeply abnormal. An example I often raise is that of Pakistan, a place where you can buy AK-47s at gun markets — but nobody is shooting up schools. America’s problems are cultural and social.\n\nIt’s no overstatement to say that America is a nation in profound social and cultural crisis, with cultural and social problems — like school shootings, medical bankruptcy, skyrocketing despair and suicide, mass distrust, a level of vitriol and indifference that’s truly shocking — that exist almost nowhere else in the world. And all those problems are the ones of pre-authoritarian societies: they are what tend to happen just before societies collapse full on into authoritarianism.\n\nSo what is their genesis? What made America fall apart socially and culturally — by which I mean become a society in which no one much trusts anyone else, where indifference, despair, and rage are normalized? Like I said: it’s deeply abnormal for a society to feel this way, act this way, think this way, be this way.\n\nAmerica imploded into social and cultural crisis not out of the blue, but for a very simple reason, which predicted just such implosion. Economic collapse. The Soviet Union stagnated for thirty years — and that was enough to cause it to fracture into little nations, many of which are failing authoritarian states today. America’s stagnated for fifty. That’s almost twice as long, half a century where average incomes haven’t really risen.\n\nMeanwhile, the prices of basics have spiralled completely out of control, becoming flatly unaffordable. Education will cost you as much as a house, and so will falling ill. Food and water and utilities cost far, far more than they do in rich or poor societies. Retirement is an impossibility for three generations and counting right about now. These basics have become things that nobody much can afford in America.\n\nThe result of this dislocation — incomes stagnating, while prices rose and rose to amounts that the entire rest of the world finds startling and unbelievable, like $50K for childbirth — was that the American middle class finally collapsed. It took about two decades for the middle class to eat through its savings and assets, and finally, for the first time, around 2010, the middle class finally became a minority.\n\nToday, the average American dies in $62,000 of debt. That’s a figure, an idea, that Americans have normalized — isn’t this how everyone lives? — but it is so profoundly abnormal and perverse that to an economist like me it’s like having a patient who can’t breathe and is about to go into cardiac arrest. There is nothing — and I mean nothing — more alarming in the world of social statistics and economic figures than a nation dying in mass debt.\n\nWhat happens to societies where people die in mass debt? Debts they have never been able to repay? When entire generations fall prey to that failure? They implode into authoritarianism and/or fascism.\n\nThat is precisely the story of Weimar Germany, after all. It’s also the story of post-Soviet Russia. And the story of the Islamic world.\n\nWhy? What is the connection between a collapsing economy and an imploding society? Trust is. If you can’t make ends meet, no matter how hard you try, you live a life of panic, despair, fatalism, nihilism. You are perpetually angry, a human pistol with a hair trigger, ready to lash out. You have been denied the basics, and with them go peace of mind. And with all that goes trust. You being to grow suspicious of your neighbours, who were once friends. Now everyone is just a rival in a bitter, desperate battle for survival. Tribe turns on tribe, group on group. Atop it all stride elites, grinning, satisfied, because now the masses are too weak to even act for themselves. The bonds between them have been severed — and so no collective action is possible.\n\nA society dies, this way: an economy collapses, and takes trust with it, which produces a political implosion, by way of social disintegration.\n\nThat is exactly what happened in America. As the economy collapsed, from 1970 onwards, steadily, slowly, then fast, and finally all at once, collective action stopped being possible at all. Americans by the 2000s distrusted one another so much that they refused to give one another healthcare, retirement, education, and so on. Do you see the irony? That deficit was of the very basics that produced the vicious cycle of implosion, and yet because trust had gone missing from society, collective action to simply give one another the basics was no longer possible.\n\nAnd that created the opening for a demagogue. Sooner or later, someone was going to come along who blamed already hated minorities for all this. Who scapegoated Jews, Muslims, Mexicans, refugees, immigrants, for the problems of “real” Americans.\n\nAnd that is exactly what transpired. Trump led a neo-fascist movement to power, and soon kids were in camps, being ripped away from their families, minorities being hunted down in the streets, people being beaten and gassed, women forcibly sterilised in the camps. And there Trump is today, calling for his opponents to be prosecuted and indicted — a classic and predictable authoritarian move, to finalise the seizure of power.\n\nWhy am I telling you all this? Because I want you to really understand American collapse, so that you really understand what America is up against in this election. Let me put it bluntly.\n\nFor Trump to lose this election — really lose it, not just fail to win a majority but still retain power — America is going to have to commit its first act of collective action in a very, very long time. Its first positive act. Not just a negative one, as in denying everyone else healthcare, education, retirement, and so on — but an affirmative one, as in, we still want to be a democracy.\n\nIf that makes you shudder a little bit, then I’ve been successful — because you understand how big the stakes really are.\n\nAmerica isn’t just up against Trump. It is up against history. A toxic political party, a failed set of paradigms, a catastrophic set of ways of thinking about the world. That selfishness and cruelty and brutality — politely disguised as “self-interest” and “self-reliance” and “standing on your own two feet” and even “freedom” — can ever lead a society upwards, towards higher living standards.\n\nInstead, those ideologies, toxic remnants of slavery and segregation, which had never really gone away, led to the following sequence: economic collapse, even for the “real” American, which led to social disintegration, as social bonds were severed, and trust died, which led to predictable and inevitable political implosion, into fascism and demagoguery.\n\nThat is all what it means when I say “America was a pre-authoritarian society.” It goes deep, deep into the heart of America’s interlinked crises, economic, social, political, cultural, and is the central thread weaving them together, by way of indifference, despair, and enmity.\n\nThis election is America’s last chance. It is a pre-authoritarian society. If Trump wins — and remember, I don’t just mean that he loses the majority, but stays in power, thanks to legal challenges, the Supreme Court, voter intimidation and suppression — if he wins, whatever way he wins, America is finished. The transformation to an authoritarian society, which has been on the cards for decades now, will be complete.\n\nThat is why people like me — survivors and scholars of authoritarianism — have been trying to warn you about all these links. Sarah Kendzior has written about the despair in “flyover country,” Peter Daou warned how civil wars erupt, Jason Stanley discussed the evolution of fascism. America’s pundits — the ones you hear, on CNN and in the NYT and whatnot? They have no idea about this. They have been wrong from day one because they have never lived this, experienced it, understood it in a visceral, firsthand way. We have.\n\nTake the warnings seriously.\n\nThese could very well be the last 25 days of American democracy. America is up against all its mistakes, who have culminated in one man, Trump, and his movement of fascists, theocrats, flunkies, sycophants, idiots, and militias. It has never taken a majority to topple a democracy — only a fanatical enough minority.\n\nBut do you know what it takes to save one?\n\nA majority, who is capable of doing what is has not, for too long. Finally coming together, to resolve to stand up for decency, goodness, humility, truth, beauty, justice, wisdom, grace.\n\nThat is what needs to happen in the next 25 days. America needs to grow more in these last three and a half weeks than it has in the last three and a half decades.\n\nCan it do that? You, my friend, tell me.\n\nUmair\n\nOctober 2020",
    "keywords": [
      "american",
      "trump",
      "way",
      "world",
      "majority",
      "america",
      "social",
      "25",
      "debt",
      "really",
      "democracy",
      "society",
      "americas",
      "days"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------c0a284c0_f0db_4b1a_b8f7_f8a473bb8c01-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------c0a284c0_f0db_4b1a_b8f7_f8a473bb8c01-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------c0a284c0_f0db_4b1a_b8f7_f8a473bb8c01-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------c0a284c0_f0db_4b1a_b8f7_f8a473bb8c01-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------c0a284c0_f0db_4b1a_b8f7_f8a473bb8c01-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://hjauquet.medium.com/i-am-a-pro-life-housewife-1ff2cf1b05ec?source=extreme_main_feed---------0-74--------------------f58c8887_995e_43a0_b699_a146218b7836-------",
    "title": "I am a Pro-Life Housewife",
    "publish_date": "2020-10-15 13:43:33",
    "authors": [
      "Heather Jauquet"
    ],
    "summary": "I am a Pro-Life HousewifeAnd I’m not voting for TrumpPicture by Maria Oswalt on UnsplashAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\nThey are seeing that while Trump is considered the pro-life candidate, he is not pro-life.\nBeing pro-life means having a consistent life ethic from womb to tomb.\nPro-life means honoring the sanctity of life at all stages.\nDon’t discount the vote of the pro-life housewife who is working towards change.",
    "text": "I am a Pro-Life Housewife\n\nAnd I’m not voting for Trump\n\nPicture by Maria Oswalt on Unsplash\n\nAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\n\nI acknowledge that I hate discussing politics and often hesitate to share my views. On the rare occasions I do, it’s usually about my support for the sanctity of human life. I have been admonished by friends from both political parties telling me that I am not pro-life enough, or I’m anti-woman, or I’m not Christian enough, or that I’m too naive. One person, went even so far as to tell me about her “great disappointment” in me and suggested I shouldn’t share my views or should only share them with like-minded people. But if I do as she suggested, my views go in an echo chamber and I forgo the opportunity for rich discussion and to see another perspective. While I might not change someone’s mind, I hope we walk away with a different perspective and the willingness to view every story with grace and compassion.\n\nI grew up loving Jesus and loving my country And now, as a pro-life religious conservative, I’m feeling bereft, without a political party who represents me. To be honest, I felt that way at the last election and even more so now. I disagree with the democratic platform on the issue of abortion. But I abhor the ongoing lack of respect for human life as demonstrated by the current president.\n\nAs we get closer to the U.S. Presidential election there is a contingent of pro-life Catholics and evangelicals who are making their departure from supporting Trump known. They are seeing that while Trump is considered the pro-life candidate, he is not pro-life. His actions against the marginalized show the truth.\n\nBeing pro-life means having a consistent life ethic from womb to tomb. It means valuing human life at all stages, not just when it’s convenient. Often when a new election looms on the horizon the discussion of life becomes a heated topic of debate: When should life be valued? Who is valued?\n\nI cannot in good conscience vote for a man who doesn’t value human dignity and decency. I cannot embrace the politics of a man who is willing to put children in cages and has not, as of yet, addressed the allegations of forced hysterectomies on Immigration and Custom Enforcement (ICE) detainees.\n\nI cannot support a leader who refuses to face the pandemic head on in hopes that it will disappear. The leader of our country mocked his political opponent for wearing a mask and then came down with the very plague he tried to ignore. Then he exposed his staff to the virus. That is not pro-life. It’s a flagrant display of ego and of disrespect for the people who work for him and the 209,000 dead that preceded his diagnosis.\n\nI cannot support a man who is unwilling to denounce white supremacy. It is not pro-life when President Trump refused to denounce white supremacy, but instead told the Proud Boys to “Stand back and stand by.” Pope Francis said in a message to the people of the United States after the killing of George Floyd: “We cannot tolerate or turn a blind eye to racism and exclusion in any form and yet claim to defend the sacredness of every human life.”\n\nWhen then candidate Trump mocked a disabled journalist during the 2016 campaign some people laughed, more were disgusted. His mockery is not pro-life. It points fingers and makes fun of people who are not neurotypical. I have a neurodivergent son and to know that he would be mocked or have his disability used against him is infuriating and heart wrenching. I expect more out of a leader. I expect compassion and restraint.\n\nHow can we support a pro-life candidate who is anything but? His hypocrisy is blatant.\n\nI am ardently pro-life. I hold that position because I believe in the dignity and the sanctity of human life. I believe we are made in the image of God and when we love one another we share the love of Jesus. I believe life is sacred. All life. I believe it begins in the womb and ends at natural death. At a lecture at Fordham University, Cardinal Joseph Bernardin shared this consistent life ethic: “The spectrum of life cuts across the issues of genetics, abortion, capital punishment, modern warfare and the care of the terminally ill.” In short, it’s valuing all life: the infirm, the dying, the disabled, the ones in cages whether they be prisons or at the border, the mentally ill.\n\nWe should show empathy, compassion, and grace when we talk to people about their situations. If we refuse to acknowledge the humanity, do people’s stories simply become pawns in our political stances?\n\nI believe we are called to serve one another. I believe in grace. I believe we shouldn’t be reduced to our mistakes. I believe that we are all broken, and that in our brokenness we can learn to see the whole person and embrace grace. Bryan Stevenson beautifully articulates how brokenness brings about compassion in his book Just Mercy: A story of Justice and Redemption. In his book, Stevenson describes our broken judicial system where too many are given a death sentence for crimes that they did not commit or crimes that do not warrant it.\n\nThe most politically active part of the pro-life position seeks an end to abortion. I fervently wish for an end for abortion. We also need to put in resources to empower women. This means consistent and available health care. This means jobs and housing. This means education. It means giving women the ability to support themselves and their children. It means support. We cannot demonize women for their decisions if we turn a blind eye to their needs. There are religious organizations that help women in crisis pregnancies and one of my favorites is The Gabriel Network whose slogan is “Empower Women.” They not only provide housing, but also angel friends who take women to their appointments, spend time with them getting to know them, and help by anticipating their needs whether it be friendship, baby supplies, or a hand to hold. The Gabriel Network also provides scholarships to help women further their education and careers.\n\nMany people see a pro-life position as a religious one. It is for me, but, it doesn’t have to be. Pro-life means honoring the sanctity of life at all stages. There are other organizations not affiliated with any religion that support a consistent life ethic such as New Wave Feminists and Rehumanize International. New Wave Feminists recognizes the “…full humanity of both the unborn child and the mother and looks to rebuild a culture that embodies legitimate justice for all.” Rehumanize International is a “…human rights organization dedicated to creating a culture of peace and life, and in so doing…seek to bring an end to all aggressive violence against humans through education, discourse, and action.”\n\nWhat if we set aside the presuppositions that being pro-life means that it is only a religious issue or a political stance? What if we used our time and energy to support, encourage, and embrace the sanctity of human life? When we stop pitting pro-choice and pro-life advocates against one another, we could do beautiful work together and shelter the homeless, clothe the naked, and feed the hungry. We can empower women, provide adequate healthcare, end racism, and advocate for social justice.\n\nAs I continue to read, listen, and learn, I embrace the dignity and sanctity of all human life. I acknowledge that if we want to change minds and change hearts, we have to be willing to listen to one another. Don’t discount the vote of the pro-life housewife who is working towards change.",
    "keywords": [
      "life",
      "women",
      "trump",
      "housewife",
      "human",
      "prolife",
      "believe",
      "support",
      "means",
      "sanctity",
      "political"
    ]
  },
  {
    "url": "https://level.medium.com/what-spike-lees-get-on-the-bus-got-right-and-wrong-about-the-million-man-march-2add4af00fc0?source=extreme_main_feed---------2-74--------------------f58c8887_995e_43a0_b699_a146218b7836-------",
    "title": "25 Years After the Million Man March, the Same Struggles for Black Liberation Persist",
    "publish_date": "2020-10-16 15:15:53",
    "authors": [
      "Julian Kimble"
    ],
    "summary": "And while many Black men agree that they need to do better for the sake of Black people, there’s rarely agreement about the particulars.\nThe movie follows a group of Black men who trek from South Central Los Angeles to Washington, D.C., for the events of October 16, 1995.\nWhile the Million Man March looms large in the film, it’s simply as backdrop; instead, Get on the Bus focuses on the interactions between the travelers.\nWhile the Million Man March may have been established in the spirit of progress, it wasn’t a progressive effort.\nAnd you can’t claim to want what’s best for Black people unless you want it for all Black people.",
    "text": "What Spike Lee’s ‘Get on the Bus’ Got Right — and Wrong — About the Million Man March\n\nA revisiting of the film highlights hurdles Black Americans have yet to overcome\n\nOssie Davis, Isaiah Washington, Andre Braugher, Charles S. Dutton, and a group of men standing next to a bus in a scene from the film ‘Get on the Bus,’ 1996. Photo: Universal/Getty Images\n\nBlack liberation has long been hindered by Black masculinity. Too often, ideas about how Black people can improve their circumstances don’t benefit anyone who isn’t male and heterosexual. And while many Black men agree that they need to do better for the sake of Black people, there’s rarely agreement about the particulars. This reality is one of the driving themes of Spike Lee’s 1996 film, Get on the Bus, which dropped exactly one year after its source of inspiration: the Million Man March.\n\nThe movie follows a group of Black men who trek from South Central Los Angeles to Washington, D.C., for the events of October 16, 1995. Among them are Evan (Thomas Jefferson Byrd), who as part of a court order is literally shackled to the son he neglected (De’Aundre Bonds); Xavier (Hill Harper), an idealistic film student who’s documenting the trip; Flip (Andre Braugher), an obnoxious working actor; Gary (Roger Guenveur Smith), a self-righteous LAPD officer; Kyle (Isaiah Washington) and Randall (Harry Lennix), a couple whose relationship is in dire straits; and Jeremiah (Ossie Davis), the moral center who regrets not attending the March on Washington more than 30 years prior.\n\nBy the end of the film, it’s unclear whether the dial has moved for certain characters — but 24 years later, several of the societal issues those characters represent are still stuck in place.\n\nWhile the Million Man March looms large in the film, it’s simply as backdrop; instead, Get on the Bus focuses on the interactions between the travelers. “People from all different socioeconomic, political backgrounds — which is a combustible mix,” Lee told Charlie Rose of the characters in 1996. Lee and writer Reggie Rock Bythewood depict the trip as a spiritual and emotional journey for the group based on the inevitable conflicts while they’re on the road. The characters represent a variety of issues and perspectives, some of which reveal a lingering resistance to change. By the end of the film, it’s unclear whether the dial has moved for certain characters — but 24 years later, several of the societal issues those characters represent are still stuck in place.\n\nWhile the Million Man March may have been established in the spirit of progress, it wasn’t a progressive effort. Its organizer, Nation of Islam leader Louis Farrakhan, is notorious for his sexism, homophobia, and anti-Semitism. Yet, despite the conservatism at its core, the march stands as a significant display of unity. Given the circumstances at the time — the persistent fallout from the crack epidemic, the 1994 crime bill that led to a surge in mass incarceration, and the notion that Black men were “under attack” in general — many chose to overlook Farrakhan’s radioactive history in favor of the greater good for which he fought.\n\nSome of the characters in Get on the Bus are willing to follow Farrakhan’s lead due to desperation. When Craig (Albert Hall), the original bus driver, tells trip organizer George (Charles S. Dutton) about his teenage daughter’s pregnancy, he acknowledges that he’ll be “all ears” if Farrakhan has a way to deal with the situation. It’s a shortsighted consideration, but Farrakhan and the NOI have long appealed to Black people who feel they’re out of options for whatever reason, so his outlook might catch the ear of a father who feels his daughter has strayed from the values he’d attempted to instill in her.\n\nHowever, the idea that the overarching principle of the march was bigger than Farrakhan himself is also expressed in Get on the Bus. “I guess if the brothers are gettin’ together — you know, talkin’ about some things, tryin’ to work things out — I wanna be there,” Gary tells Xavier, who’s interviewing as many people as he can about their decision to attend the march. Gary is guided by the idea that anyone interested in the march is willing to put whatever differences they have aside, but that proves extremely difficult in an atmosphere of people with different backgrounds, lifestyles, and personality types.\n\nTensions arise within the group as its members get to know one another. Gary’s father, who was also a cop, was murdered by a gang member; when Jamal (Gabriel Casseus) reveals that he’s a reformed Crip who found Islam after committing several murders, Gary vows to put Jamal behind bars once they return to L.A. It doesn’t matter that Jamal works to prevent kids from making the mistakes he made — Gary only sees a murderer akin to his dad’s killer. Meanwhile, Flip serves as a consistently volatile presence throughout Get on the Bus. He craves attention, so when Flip isn’t questioning Gary’s Blackness (his mother is White), he’s name-dropping, overcompensating for his insecurity through misogyny, and being brazenly homophobic. He attacks Randall and Kyle, neither of whom back down. And when the confrontation turns physical, he falls victim to his own hubris.\n\nYou can’t call for empowerment without understanding that capitalism isn’t the solution. You can’t vow to do better by Black women, then not only fail to do so, but fail to understand why they don’t feel safe. And you can’t claim to want what’s best for Black people unless you want it for all Black people.\n\nAs reprehensible as Flip is at times, he’s far more tolerable than Wendell (Wendell Pierce), a car dealership owner who joins the bus in Memphis and then quickly draws the ire of the group. “Every brother ain’t righteous,” a skeptical George says of Wendell, a proud Black Republican who disparages HBCUs as “nigga schools” and rants about bootstrapping his way to success in between cigar puffs. Wendell, who sees the march as a massive networking opportunity, is an example of how capitalism can be a gateway drug to Republicanism, and his diatribe leads to him being forcefully removed from the bus.\n\nThe overall message isn’t subtle: On the way to atonement, these men confront several issues inhibiting progress for Black people as a whole. They don’t make it to the march, but the ordeal still provides a sense of fellowship. Before their journey home, George gives an impassioned speech about the real work beginning once they return. Alas, camaraderie doesn’t equate to evolution or progress. While attitudes on some issues presented in Get on the Bus have shifted slightly — especially across generational lines — many of the same conversations still take place regularly because of how deeply matters like capitalism, sexism, misogyny, and homophobia are embedded in society.\n\nYou can’t call for empowerment without understanding that capitalism isn’t the solution. You can’t vow to do better by Black women, then not only fail to do so, but fail to understand why they don’t feel safe. And you can’t claim to want what’s best for Black people unless you want it for all Black people. Some of these problems are structural and thus difficult to change in 25 years’ time — but others require more personal accountability, and genuine progress is impossible if accountability is treated like a prison.\n\nGet on the Bus leaves viewers with the image of Evan Sr. and Evan Jr.’s shackles lying in front of the Lincoln Memorial. It’s a callback to the shackles, chains, and handcuffs seen at the beginning of the film, which imply that the experience has brought forth liberation, or at least the foundation for it. But with some distance from both the film and the Million Man March that inspired it, the state of the world suggests that in certain instances, the shackles remain in place — locked by the very hands they bind.",
    "keywords": [
      "persist",
      "characters",
      "liberation",
      "men",
      "black",
      "25",
      "million",
      "bus",
      "man",
      "struggles",
      "film",
      "cant",
      "issues",
      "isnt"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------f58c8887_995e_43a0_b699_a146218b7836-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------5-73--------------------f58c8887_995e_43a0_b699_a146218b7836-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/javascript-in-plain-english/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6?source=extreme_main_feed---------6-73--------------------f58c8887_995e_43a0_b699_a146218b7836-------",
    "title": "11 Frontend tricks that most Frontend Developers don’t know about",
    "publish_date": "2020-10-14 19:17:01",
    "authors": [
      "Daniel Anderson"
    ],
    "summary": "Datalist elementOne HTML element that you don’t see used much at all and for no reason!\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements.\nYou will see a drop-down list of pre-defined options as you type.\n<datalist>Example:<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\"><option value=\"Cat\"><option value=\"Dog\"><option value=\"Chicken\"><option value=\"Cow\"><option value=\"Pig\"></datalist>",
    "text": "1. Datalist element\n\nOne HTML element that you don’t see used much at all and for no reason!\n\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements. You will see a drop-down list of pre-defined options as you type.\n\n<datalist>\n\nExample:\n\n<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\">\n\n<option value=\"Cat\">\n\n<option value=\"Dog\">\n\n<option value=\"Chicken\">\n\n<option value=\"Cow\">\n\n<option value=\"Pig\">\n\n</datalist>",
    "keywords": [
      "dont",
      "tag",
      "11",
      "datalist",
      "valuecatoption",
      "valuepigdatalist",
      "reasonthe",
      "frontend",
      "know",
      "valuedogoption",
      "valuecowoption",
      "developers",
      "typedatalistexampleinput",
      "tricks",
      "valuechickenoption",
      "used"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------7-73--------------------f58c8887_995e_43a0_b699_a146218b7836-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://towardsdatascience.com/fastapi-has-ruined-flask-forever-for-me-73916127da?source=extreme_main_feed---------8-73--------------------f58c8887_995e_43a0_b699_a146218b7836-------",
    "title": "FastAPI has Ruined Flask Forever for Me",
    "publish_date": "2020-10-11 09:01:22",
    "authors": [
      "Fahmi Nurfikri"
    ],
    "summary": "FastAPI has Ruined Flask Forever for MeWhy I prefer using FastAPI instead of FlaskFastAPI Logo — https://fastapi.tiangolo.comWhat do you like best about being a data scientist?\nIf you need to look for something about FastAPI, you usually don’t need to look anywhere else.\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running.\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords.\nFastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.",
    "text": "FastAPI has Ruined Flask Forever for Me\n\nWhy I prefer using FastAPI instead of Flask\n\nFastAPI Logo — https://fastapi.tiangolo.com\n\nWhat do you like best about being a data scientist? It’s definitely modeling and fine-tuning for optimal results. But what does it mean to be a good model if it’s never used or never deployed?\n\nTo produce a machine learning model, the typical approach is to wrap it in a REST API and use it as a microservice. One of the most widely used frameworks for creating APIs is Flask.\n\nThe main reason Flask is widely used is its simplicity. In general, we only use the API to model predictions, so we don’t need a complex architecture (example: Django). Another reason is that Flask is written in Python, which is the language used to do machine learning modeling in general, so we are familiar with it.\n\nHowever, if you want to create a REST API with clear, static, inputs that are validated, you must include several different packages from several third parties that do not cooperate with each other. And you have to create custom code to get everything running.\n\nThis is what caused me to look for alternatives for my needs, where finally I found a framework called FastAPI and it became my new favorite framework. Here are the reasons why I like to use FastAPI.\n\nDocumentation\n\nThe first thing I notice from FastAPI is the documentation. FastAPI has very extensive documentation and rich examples, which makes things easier. If you need to look for something about FastAPI, you usually don’t need to look anywhere else.\n\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running. So that we don’t need to write the API documentation that we created ourselves. As we all know, writing API documentation is annoying, not only because there is a lot of detail to go into, but also nothing more frustrating when the end-users are implementing but not match up the documentation. So that with the automatic generation of API documentation it will be very helpful\n\nBelow is a display example of the API documentation (provided by Swagger UI)\n\nAlternative automatic documentation is also provided (provided by ReDoc)\n\nTo define the created schema, it uses Pydantic, which is another awesome Python library, used for data validation. Its purpose is to validate the input that goes to FastAPI. If the input/request is incorrect then the appropriate error code will be returned.\n\nPerformance\n\nAs the name implies, this is indeed FastAPI. Based on data from techempower benchmarks, FastAPI beats every framework when it comes to performance. Where the most commonly used frameworks like Flask and Django lag behind.\n\nFramework performance — techempower\n\nYeah, it blazingly fast.\n\nAsynchronous\n\nOne of the drawbacks of Flask is the lack of asynchronous I/O support. Asynchronous is pretty important for HTTP endpoints, which tend to do a lot of waiting for I/O and network chat, making it a good one candidate for concurrency using async.\n\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords. FastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.\n\nAll you have to do is declare the endpoints with the async keyword like this:",
    "keywords": [
      "api",
      "dont",
      "using",
      "forever",
      "framework",
      "documentation",
      "flask",
      "need",
      "used",
      "ruined",
      "asynchronous",
      "fastapi"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------9-73--------------------f58c8887_995e_43a0_b699_a146218b7836-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------ad2abf18_b627_465f_8312_15949a4979fd-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------ad2abf18_b627_465f_8312_15949a4979fd-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------ad2abf18_b627_465f_8312_15949a4979fd-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------ad2abf18_b627_465f_8312_15949a4979fd-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------ad2abf18_b627_465f_8312_15949a4979fd-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/swlh/how-stealing-your-childrens-crayons-can-solve-your-ios-stackview-problems-c2aa5b707b02?source=extreme_main_feed---------0-74--------------------a9fefbb6_befe_4fa8_96c8_a32afd287237-------",
    "title": "How Stealing Your Children’s Crayons Can Solve Your iOS StackView Problems",
    "publish_date": "2020-10-16 02:34:06",
    "authors": [
      "Austin Ramsdale"
    ],
    "summary": "Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other.\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here.\nLuckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\nWe can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view.\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons.",
    "text": "Designing responsive and performant iOS apps can be a frustrating chore for new developers. Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other. Alternatively, designing user interfaces programmatically may be preferred, but can take years of mastery and an in-depth understanding of the underlying display engine; and we haven’t even considered the varying sizes and layouts!\n\nIf you’re having issues laying out your interface and getting it to play nicely with the various sizes and orientations, here are some quick tips using nested StackViews that may be able to help you organize and speed up your development process!\n\nFor this article, I am using a Swift recreation of the simple calculator, but you’ll notice that there are two key buttons that differ in size and orientation from the others — creating a complication with traditional stack views, and can be really problematic when using conventional constraints and expecting them to orient properly.\n\nSo how did I tackle this quickly and easily? As the title might suggest, grab any markers, pens, or crayons you may have at your disposal, and start by printing out a copy of the Storyboard. You can also design it on-screen, but for many (myself included), putting pen-to-paper helps to unlock that creative critical thinking that is sometimes needed to crack the visual code.\n\nTo start, I need to outline the largest “block” of interactive elements that I want to organize and manipulate. I’ve marked the corners in red, but instead of working from the outside in, I’m now going to look for the elements that need specific handling, focusing on fitting them into a balanced container, called a Stack View, and then working outwards.\n\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here. Additional information can be found in Apple’s “App Development with Swift” in section 2.1.\n\nAs you can see, the two elements we need to work with are the “0” button, which spans 2x the conventional button width (below button “1” and “2”), and the “=“ button, which inconveniently spans 2x the conventional button height. Luckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\n\nNow that I’ve identified the unique elements, we can see that the buttons fit into a larger chunk of blocks, outlined in green below. We can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view. Lastly, we need to distribute the “1” and “2” buttons evenly, so they share the space inside of the block.\n\nSimilarly, the “=“ , “3”, and “.” button share the lower right block. We create a vertical stack view and put the “=“ button on the right side, and we’ll nest an additional horizontal stack view on the left, putting the “3” in the top, and “.” In the bottom, with “Fill equally” as the distribution method here as well.\n\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons. This makes it a little easier, but it helps to create “balanced” or even blocks where possible.\n\nConveniently, the buttons fit in a 3x4 grid for both top and bottom, so I drew two larger encompassing blocks in blue around those segments, and labeled them “Upper Stackview” and “Lower Stackview”, respectively. You’ll notice that I’ve also started to fill-in other attributes in the margins, marking both the top and bottom blocks as “Fill equally” also (however, the bottom is wrong — it’s actually Fill proportionally, but more on that in a bit).\n\nNow, I simply need to group and space the remaining buttons, starting with drawing a box around the “4”, “5”, “6”, and “-“ buttons, placing them in a vertical stack view, and doing the same with the “Upper Stackview” (highlighted in orange).",
    "keywords": [
      "blocks",
      "stealing",
      "buttons",
      "view",
      "problems",
      "childrens",
      "crayons",
      "button",
      "elements",
      "views",
      "stackview",
      "need",
      "vertical",
      "solve",
      "ios",
      "conventional",
      "stack"
    ]
  },
  {
    "url": "https://medium.com/square-root/adapting-maslows-hierarchy-for-a-remote-world-4d78c544fcf3?source=extreme_main_feed---------1-74--------------------a9fefbb6_befe_4fa8_96c8_a32afd287237-------",
    "title": "Adapting Maslow’s Hierarchy for a Remote World",
    "publish_date": "2020-10-14 15:51:16",
    "authors": [
      "Jaime Brown"
    ],
    "summary": "On the flip side, when remote work overstayed its welcome, spilled over into May, and then into the dog days of summer, we found our patience being tested.\nDuring a weekly all-hands meeting in late March, we talked about our remote culture and the importance of oversharing.\nWe saw an obvious trend in our remote culture survey results — folks really seem to miss whiteboarding as a collaborative tool.\nThis was a timely revamp as many of the meeting culture values we held in office translated very well to remote culture.\nRegardless of what our future remote culture looks like, the flexibility we’ve always had at Square Root will continue to exist.",
    "text": "BUILDING THE FOUNDATION OF OUR HIERARCHY\n\nTo start, we quickly realized we can’t begin to build our hierarchy without a solid foundation — one of empathy, patience, and grace. These words keep coming up in our internal discussions because this was already built into Square Root culture. Now we’re just seeing it in a new context. Giving each other, and ourselves, room to navigate the complexities of our newfound work from home life is so key to our success and happiness as a team. Suddenly many of us were grappling with becoming homeschool teachers and entertaining our pets, all while we sat at our dining room tables (or beds!) trying to work our usual nine-to-five. Should I even mention the added stress and worry from a global pandemic?\n\nHaving the support of co-workers eases the burden as we all share similar adjustments, but it can still be hard to give ourselves the same pass that we may extend to our team members. On the flip side, when remote work overstayed its welcome, spilled over into May, and then into the dog days of summer, we found our patience being tested.\n\nLevel 1 — COMMUNICATION + CONNECTION\n\nKeeping channels of communication open with one another is necessary to avoid the breakdown of our foundation. For us, informal communication between Radicals is essential. Like many tech startups, we use Slack for internal messaging and announcements. It’s easy to lack formal rules around Slack use when you can just as easily go down the hall or take a quick walk to another house on campus to chat with someone. When that option wasn’t available it became obvious we needed to make adjustments to our messaging habits.\n\nDuring a weekly all-hands meeting in late March, we talked about our remote culture and the importance of oversharing. We agreed we wanted our Slack habits to be more inclusive, but what does this look like?\n\nHaving conversations in public channels, so that entire teams can see the topics being discussed. This allows folks who may have nothing to contribute to the active conversation to still see the outcome. A decision is made and any Radical who reads the thread now has this information at their disposal. “Withholding info” is in our anti-bucket list; habitually making conversations public keeps it at bay over the long term!\n\nso that entire teams can see the topics being discussed. This allows folks who may have nothing to contribute to the active conversation to still see the outcome. A decision is made and any Radical who reads the thread now has this information at their disposal. “Withholding info” is in our anti-bucket list; habitually making conversations public keeps it at bay over the long term! Encouraging individuals to share their schedules openly — schedules that may very well be messy and unpredictable at times — and also a little vulnerability can go a long way to keeping the foundation strong. The Culture + People team started sharing in a public-facing channel what our schedules would look like, when we needed a break for a snack or a walk, or even when a child really just needed a hug and some attention from Mom or Dad. This encourages others that it’s ok to express needs for breaks and that it’s normal to have interruptions.\n\nConnection may be the hardest item in our hierarchy to achieve. We have 44 employees who have 44 individual needs. Finding ways to make everyone feel connected can be challenging, but we’ve hosted virtual happy hours, mid-day coffee chats, sent care packages, and posted questions of the day to encourage Radicals to share fun facts about themselves. One of our most successful experiments has been Radical Connections.\n\nKelsey, our HR + Recruiting Coordinator, created a dedicated Slack channel, #radicalconnections, for folks to be paired with another random Radical for a fun, get-to-know-you chat, no work talk necessary. Starting in August, the Culture + People team helped coordinate and schedule weekly group chats of 4–5 people as well as 1-on-1 chats for everyone at Square Root. This made it easy for the team to share moments of connection, joy, and whimsy — something most of us have been lacking for months. Not only that, but new and deep bonds were formed by folks who don’t often work together or connect. Next, we’ll follow-up by getting more Radical feedback on how the chats went so we can find ways to make this a better experience for all.\n\nLevel 2 — CLEAR PRIORITIES + EXPECTATIONS\n\nWe have always valued clear expectations and priorities, and have achieved these through a mix of all-hands and 1-on-1 meetings, but now we’ve added a 15-minute Monday kick-off. These kick-offs are concise and set clear expectations for each week so every Radical knows how to contribute to our company goals.\n\nWe also open all meetings with time devoted to sharing Happy News. From small stuff, like a hike over the weekend, to the big things, like adding a puppy to the family or an engagement, we make room for joy! We even end the meetings with a crowd favorite — jazz hands! Our Monday kick-off allows us to align and connect. Win-win.\n\nLevel 3 — COLLABORATION + DOCUMENTATION\n\nOnce priorities and expectations are set we need to have ways of working together to achieve our goals. We saw an obvious trend in our remote culture survey results — folks really seem to miss whiteboarding as a collaborative tool. We’ve used the Jamboard app, and we even bought a Kaptivo whiteboard camera for the conference room (still available for individual reservations if someone needs a Work from Work day.)\n\nWe’re still experimenting with virtual whiteboarding, but even without tools, collaboration can work well in a remote setting if we follow good documentation procedures. This brings us to our meeting philosophy: Meeting Magic! This was the result of a previous Hackathon project by a former member of the Culture + People team. Just before the pandemic started to become a serious threat in the U.S., Meeting Magic was going through an update to version 2.0. This was a timely revamp as many of the meeting culture values we held in office translated very well to remote culture. Since we already had a great meeting mindset, the main takeaway for us was to make sure we were being consistent, inclusive, and productive across all meetings, from Herd retrospectives to our weekly kick-off. To do that, we suggested new additions to Meeting Magic:\n\nGet in the habit of using shared docs for each standing meeting. There, ideas and actions are documented for anyone who missed the meeting, and there’s a record for anyone who needs to reference back, or a new Radical who joins the team and needs to catch up on tribal knowledge.\n\nfor each standing meeting. There, ideas and actions are documented for anyone who missed the meeting, and there’s a record for anyone who needs to reference back, or a new Radical who joins the team and needs to catch up on tribal knowledge. Embrace notation rotation, the idea that regular attendees of standing meetings take turns being the note taker. This nurtures empathy and compassion. Each Radical knows what it’s like to take notes during a meeting, and note-takers get a break so they can focus on the discussion and not just note-taking.\n\nSharpening our documentation process in meetings is an easy, but high-impact adjustment with long-term benefits.\n\nCollaboration was easier when we didn’t need to schedule a Zoom call first (photo by Hannah Minkmade)\n\nLevel 4 — FLEXIBILITY + ASYNCHRONOUS WORK\n\nThis level of our hierarchy is still a work in progress, and we’re coming up with experiments to make asynchronous work a possibility for our team, in a way that works for everyone. Our hypothesis is that as we perfect the other levels of the hierarchy, this level will naturally become easier to make a reality.\n\nThe legwork of achieving asynchronicity will be each Radical having realistic expectations about what async-work looks like in practice, and having respect for one another. Some questions we need to sit with:\n\nWhat will happen if our teams are on varied schedules?\n\nHow does your preferred schedule impact your team?\n\nHow can more typical 9–5 hours (in our home base Central time zone) be accommodating to those outside of this schedule?\n\nWill all managers be ok with having their team on different schedules?\n\nAre you comfortable with and accepting of async communication?\n\nWe have a great deal to think about if this is a path we choose to take. Regardless of what our future remote culture looks like, the flexibility we’ve always had at Square Root will continue to exist. Our goal is to enhance this flexibility with tweaks and experiments now. We want to make sure our flexible policy is strengthened after work from home and continues to be supportive of family needs, health needs, and mental health needs.\n\nLevel 5 — ACCOMPLISHMENT + HIGH PRODUCTIVITY\n\nThis is where we’ll be when we reach our Nirvana of remote culture, and where we want to see some of the other hierarchy items level-up, like connectedness.\n\nHaving all or most of the team working at highly productive levels, feeling good about it, and having a sense of accomplishment is peak remote culture for Square Root.\n\nOne way we will start nurturing this idea now is to hold our bi-annual Hackathon virtually! What better way to get a sense of accomplishment and collaboration than to host our most innovative event of the year in a remote setting? Hackathons get our creative juices flowing and energizes us well into the holiday season, just in time to reflect on our year and start thinking about all of the possibilities that lie ahead in the new year. Even during this funereal year, we believe we can help our team feel productive and hopeful, one level at a time.",
    "keywords": [
      "world",
      "needs",
      "culture",
      "meetings",
      "radical",
      "folks",
      "maslows",
      "remote",
      "meeting",
      "team",
      "work",
      "adapting",
      "hierarchy"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------a9fefbb6_befe_4fa8_96c8_a32afd287237-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/lessons-from-history/536-ad-the-worst-year-in-history-472a32797e46?source=extreme_main_feed---------4-73--------------------a9fefbb6_befe_4fa8_96c8_a32afd287237-------",
    "title": "536 AD — the worst year in history",
    "publish_date": "2020-07-14 22:13:02",
    "authors": [
      "Saamir Ansari"
    ],
    "summary": "However, when speaking of the worst year recorded in human history there are many to choose from:The year 1349 saw the Black Death kill half the population of Europe.\nThe title of the worst year in history is easily held by the year 536 AD.\nUnfortunately, 536 AD seemed to only be a prelude to further misery.\nLabeling each new year as ‘the worst year in history’ has become something of a fad these days.\nWe should look back to the year 536 A.D. and cherish how fortunate we are not to have lived in a time when the world was truly in darkness.",
    "text": "2020 has already been immortalised. It is a year that nobody will forget. However, when speaking of the worst year recorded in human history there are many to choose from:\n\nThe year 1349 saw the Black Death kill half the population of Europe.\n\nIn 1520 smallpox ravaged the Americas and killed between 60 and 90 per cent of the continents’ original inhabitants.\n\nIn 1918 the Spanish Flu led to the deaths of over 50 million people.\n\nThe rise of Hitler in 1933 is often claimed to be the turning point in modern history.\n\nHowever, historians are unanimous in their choice. The title of the worst year in history is easily held by the year 536 AD.\n\nMedieval historian, Michael McCormick has stated that “it was the beginning of one of the worst periods to be alive, if not the worst year.” (Science Magazine, Ann Gibbons, 2018).\n\nThe year began with an inexplicable, dense fog that stretched across the world which plunged Europe, the Middle East and parts of Asia into darkness 24 hours a day, for nearly 2 years.\n\nConsequently, global temperatures plummeted which resulted in the coldest decade in over 2,000 years. Famine was rampant and crops failed all across Europe, Africa and Asia. Unfortunately, 536 AD seemed to only be a prelude to further misery. This period of extreme cold and starvation caused economic disaster in Europe and in 541 A.D. an outbreak of bubonic plague further led to the death of nearly 100 million people and almost half of the Byzantine Empire.\n\nThis part of the sixth century has a widely been referred to as the Dark Ages, but the true source of this darkness had previously been unknown to scholars. Recently, researchers led by McCormick and glaciologist Paul Mayewski, have discovered that a volcanic eruption in Iceland in early 536 led to incredibly large quantities of ash being spread across much of the globe, creating the fog that cast the world into darkness. This eruption was so immense that it altered the global climate and adversely affected weather patterns and crop cultivation for years to come (Antiquity).\n\nLabeling each new year as ‘the worst year in history’ has become something of a fad these days. We should look back to the year 536 A.D. and cherish how fortunate we are not to have lived in a time when the world was truly in darkness.",
    "keywords": [
      "darkness",
      "world",
      "europe",
      "worst",
      "ad",
      "led",
      "nearly",
      "536",
      "million",
      "history"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------5-73--------------------a9fefbb6_befe_4fa8_96c8_a32afd287237-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/@OfcrACab/confessions-of-a-former-bastard-cop-bb14d17bc759?source=extreme_main_feed---------6-73--------------------a9fefbb6_befe_4fa8_96c8_a32afd287237-------",
    "title": "Confessions of a Former Bastard Cop",
    "publish_date": "2020-06-11 00:21:39",
    "authors": [
      "Officer A. Cab"
    ],
    "summary": "So, before I give some suggestions, let me tell you what probably won’t solve the problem of bastard cops:Increased “bias” training.\nPolice officers do not protect and serve people, they protect and serve the status quo, “polite society”, and private property.\nVery frequently, the officers sent to “protect the community” escalate this crisis and ultimately wound or kill the person.\nInstead of letting Fox News fill your head with nightmares about Hispanic gangs, ask the Hispanic community what they need to thrive.\nIf you truly desire safety, ask not what your most vulnerable can do for the community, ask what the community can do for the most vulnerable.",
    "text": "HOW DO YOU SOLVE A PROBLEM LIKE A BASTARD?\n\nSo what do we do about it? Even though I’m an expert on bastardism, I am not a public policy expert nor an expert in organizing a post-police society. So, before I give some suggestions, let me tell you what probably won’t solve the problem of bastard cops:\n\nIncreased “bias” training. A quarterly or even monthly training session is not capable of covering over years of trauma-based camaraderie in police forces. I can tell you from experience, we don’t take it seriously, the proctors let us cheat on whatever “tests” there are, and we all made fun of it later over coffee.\n\nTougher laws. I hope you understand by now, cops do not follow the law and will not hold each other accountable to the law. Tougher laws are all the more reason to circle the wagons and protect your brothers and sisters.\n\nTougher laws are all the more reason to circle the wagons and protect your brothers and sisters. More community policing programs. Yes, there is a marginal effect when a few cops get to know members of the community, but look at the protests of 2020: many of the cops pepper-spraying journalists were probably the nice school cop a month ago.\n\nPolice officers do not protect and serve people, they protect and serve the status quo, “polite society”, and private property. Using the incremental mechanisms of the status quo will never reform the police because the status quo relies on police violence to exist. Capitalism requires a permanent underclass to exploit for cheap labor and it requires the cops to bring that underclass to heel.\n\nInstead of wasting time with minor tweaks, I recommend exploring the following ideas:\n\nNo more qualified immunity. Police officers should be personally liable for all decisions they make in the line of duty.\n\nNo more civil asset forfeiture. Did you know that every year, citizens like you lose more cash and property to unaccountable civil asset forfeiture than to all burglaries combined? The police can steal your stuff without charging you with a crime and it makes some police departments very rich.\n\nBreak the power of police unions. Police unions make it nearly impossible to fire bad cops and incentivize protecting them to protect the power of the union. A police union is not a labor union; police officers are powerful state agents, not exploited workers.\n\nRequire malpractice insurance. Doctors must pay for insurance in case they botch a surgery, police officers should do the same for botching a police raid or other use of force. If human decency won’t motivate police to respect human life, perhaps hitting their wallet might.\n\nDefund, demilitarize, and disarm cops. Thousands of police departments own assault rifles, armored personnel carriers, and stuff you’d see in a warzone. Police officers have grants and huge budgets to spend on guns, ammo, body armor, and combat training. 99% of calls for service require no armed response, yet when all you have is a gun, every problem feels like target practice. Cities are not safer when unaccountable bullies have a monopoly on state violence and the equipment to execute that monopoly.\n\nOne final idea: consider abolishing the police.\n\nI know what you’re thinking, “What? We need the police! They protect us!” As someone who did it for nearly a decade, I need you to understand that by and large, police protection is marginal, incidental. It’s an illusion created by decades of copaganda designed to fool you into thinking these brave men and women are holding back the barbarians at the gates.\n\nI alluded to this above: the vast majority of calls for service I handled were theft reports, burglary reports, domestic arguments that hadn’t escalated into violence, loud parties, (houseless) people loitering, traffic collisions, very minor drug possession, and arguments between neighbors. Mostly the mundane ups and downs of life in the community, with little inherent danger. And, like I mentioned, the vast majority of crimes I responded to (even violent ones) had already happened; my unaccountable license to kill was irrelevant.\n\nWhat I mainly provided was an “objective” third party with the authority to document property damage, ask people to chill out or disperse, or counsel people not to beat each other up. A trained counselor or conflict resolution specialist would be ten times more effective than someone with a gun strapped to his hip wondering if anyone would try to kill him when he showed up. There are many models for community safety that can be explored if we get away from the idea that the only way to be safe is to have a man with a M4 rifle prowling your neighborhood ready at a moment’s notice to write down your name and birthday after you’ve been robbed and beaten.\n\nYou might be asking, “What about the armed robbers, the gangsters, the drug dealers, the serial killers?” And yes, in the city I worked, I regularly broke up gang parties, found gang members carrying guns, and handled homicides. I’ve seen some tragic things, from a reformed gangster shot in the head with his brains oozing out to a fifteen year old boy taking his last breath in his screaming mother’s arms thanks to a gang member’s bullet. I know the wages of violence.\n\nThis is where we have to have the courage to ask: why do people rob? Why do they join gangs? Why do they get addicted to drugs or sell them? It’s not because they are inherently evil. I submit to you that these are the results of living in a capitalist system that grinds people down and denies them housing, medical care, human dignity, and a say in their government. These are the results of white supremacy pushing people to the margins, excluding them, disrespecting them, and treating their bodies as disposable.\n\nEqually important to remember: disabled and mentally ill people are frequently killed by police officers not trained to recognize and react to disabilities or mental health crises. Some of the people we picture as “violent offenders” are often people struggling with untreated mental illness, often due to economic hardships. Very frequently, the officers sent to “protect the community” escalate this crisis and ultimately wound or kill the person. Your community was not made safer by police violence; a sick member of your community was killed because it was cheaper than treating them. Are you extremely confident you’ll never get sick one day too?\n\nWrestle with this for a minute: if all of someone’s material needs were met and all the members of their community were fed, clothed, housed, and dignified, why would they need to join a gang? Why would they need to risk their lives selling drugs or breaking into buildings? If mental healthcare was free and was not stigmatized, how many lives would that save?\n\nWould there still be a few bad actors in the world? Sure, probably. What’s my solution for them, you’re no doubt asking. I’ll tell you what: generational poverty, food insecurity, houselessness, and for-profit medical care are all problems that can be solved in our lifetimes by rejecting the dehumanizing meat grinder of capitalism and white supremacy. Once that’s done, we can work on the edge cases together, with clearer hearts not clouded by a corrupt system.\n\nPolice abolition is closely related to the idea of prison abolition and the entire concept of banishing the carceral state, meaning, creating a society focused on reconciliation and restorative justice instead of punishment, pain, and suffering — a system that sees people in crisis as humans, not monsters. People who want to abolish the police typically also want to abolish prisons, and the same questions get asked: “What about the bad guys? Where do we put them?” I bring this up because abolitionists don’t want to simply replace cops with armed social workers or prisons with casual detention centers full of puffy leather couches and Playstations. We imagine a world not divided into good guys and bad guys, but rather a world where people’s needs are met and those in crisis receive care, not dehumanization.\n\nHere’s legendary activist and thinker Angela Y. Davis putting it better than I ever could:\n\n“An abolitionist approach that seeks to answer questions such as these would require us to imagine a constellation of alternative strategies and institutions, with the ultimate aim of removing the prison from the social and ideological landscapes of our society. In other words, we would not be looking for prisonlike substitutes for the prison, such as house arrest safeguarded by electronic surveillance bracelets. Rather, positing decarceration as our overarching strategy, we would try to envision a continuum of alternatives to imprisonment-demilitarization of schools, revitalization of education at all levels, a health system that provides free physical and mental care to all, and a justice system based on reparation and reconciliation rather than retribution and vengeance.” (Are Prisons Obsolete, pg. 107)\n\nI’m not telling you I have the blueprint for a beautiful new world. What I’m telling you is that the system we have right now is broken beyond repair and that it’s time to consider new ways of doing community together. Those new ways need to be negotiated by members of those communities, particularly Black, indigenous, disabled, houseless, and citizens of color historically shoved into the margins of society. Instead of letting Fox News fill your head with nightmares about Hispanic gangs, ask the Hispanic community what they need to thrive. Instead of letting racist politicians scaremonger about pro-Black demonstrators, ask the Black community what they need to meet the needs of the most vulnerable. If you truly desire safety, ask not what your most vulnerable can do for the community, ask what the community can do for the most vulnerable.",
    "keywords": [
      "world",
      "officers",
      "members",
      "community",
      "protect",
      "confessions",
      "need",
      "cops",
      "society",
      "bastard",
      "system",
      "cop",
      "ask"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------7-73--------------------a9fefbb6_befe_4fa8_96c8_a32afd287237-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------8-73--------------------a9fefbb6_befe_4fa8_96c8_a32afd287237-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------443a5b53_6da1_4ace_9b86_28c1515921a1-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------443a5b53_6da1_4ace_9b86_28c1515921a1-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------443a5b53_6da1_4ace_9b86_28c1515921a1-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------443a5b53_6da1_4ace_9b86_28c1515921a1-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------443a5b53_6da1_4ace_9b86_28c1515921a1-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://gen.medium.com/2020-has-been-bad-but-things-are-going-to-get-worse-2e083903b0f4?source=extreme_main_feed---------0-74--------------------83808624_1fb3_475d_a073_1b209955b2cc-------",
    "title": "2020 Has Been Bad. But Things Are Going to Get Worse.",
    "publish_date": "2020-10-15 16:16:45",
    "authors": [
      "Colin Horgan"
    ],
    "summary": "2020 Has Been Bad.\nBut Things Are Going to Get Worse.\nThe pandemic revealed our society’s failings.\nPhoto: Markus Spiske/UnsplashEarlier in 2020, as the lockdowns arrived, time started to feel warped.\nDisparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.",
    "text": "2020 Has Been Bad. But Things Are Going to Get Worse.\n\nThe pandemic revealed our society’s failings. We’re running out of time to fix them.\n\nPhoto: Markus Spiske/Unsplash\n\nEarlier in 2020, as the lockdowns arrived, time started to feel warped. We began to ask ourselves whether we were living in the past or the present or whether we were caught somewhere in between. This feeling of inertia was a function of recognizing a time lag between when the virus arrived and when we realized it was here.\n\nThe coronavirus case counts we saw updated every morning were already history — reality as it was two weeks prior. What was happening had already happened but also had not happened yet. Gradually, as the weeks and months followed, we learned more about the virus, including how long it had actually been around us — as well as how unprepared our society and our systems were for its arrival.\n\nThe pandemic has proven to be a clarifying force. While it will likely change some aspects of our society, before it does, it is first revealing what kind of a society we already had: one that is teetering on decaying foundations that have either gone unseen or have been deliberately ignored for decades.\n\nIn nearly every Western democracy it has hit, the pandemic has disproportionately affected people of color, the poor, and the elderly. Sometimes, like in the U.S., it’s hit them all. In short, the virus has shown us where our most egregious inequalities lie. Disparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.\n\nWe are living on a neglected structure, poorly constructed decades ago and then left largely unchecked. Even when we had the chance, after its near-collapse in 2008, to reassess the system, we didn’t bother and instead were steered for another decade in an ideological vacuum, maybe the last true product of late capitalist boredom. This long-standing failure to account for the obvious disparities at the heart of our society is probably why the pandemic will likely create a so-called K-shaped recession — one wherein “big companies and rich families have largely recovered, whereas mom-and-pops and the moms and pops who run them are living through a second Great Depression,” as Annie Lowrey wrote recently at The Atlantic.\n\nWe live every day under a looming sense of delayed inevitability. How long can it go on?\n\nThe mechanisms we have that ought to help us address those disparities, like politics, law, or journalism, have also been revealed to be heavily damaged. Our democracies are stressed, not from external enemies as much as from internal rot. Rebuilding them would require us to inhabit a shared reality. Thanks somewhat to our current acoustic information sphere dominated by platforms of fantasy, we don’t have one.\n\nThat lag time we noticed in the spring now feels more familiar, if not constant. We live every day under a looming sense of delayed inevitability. How long can it go on?",
    "keywords": [
      "bad",
      "2020",
      "long",
      "revealed",
      "disparities",
      "pandemic",
      "living",
      "going",
      "worse",
      "weeks",
      "virus",
      "society",
      "things",
      "sense"
    ]
  },
  {
    "url": "https://gen.medium.com/amy-coney-barretts-confirmation-could-cause-a-right-to-privacy-domino-effect-e0e721c2c36a?source=extreme_main_feed---------1-74--------------------83808624_1fb3_475d_a073_1b209955b2cc-------",
    "title": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect",
    "publish_date": "2020-10-15 18:07:16",
    "authors": [
      "Jill Filipovic"
    ],
    "summary": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino EffectIf there’s no right to privacy, a whole line of rulings goes out the windowAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation.\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion.\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\nIf Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it.",
    "text": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect\n\nIf there’s no right to privacy, a whole line of rulings goes out the window\n\nAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation. Photo: Pool/Getty Images\n\nIf there is one stunningly clear takeaway from the hearings to confirm Amy Coney Barrett to the Supreme Court, it’s this: Enjoy your rights to bodily sovereignty and sexual privacy while you have them. Because if Barrett is confirmed to the Supreme Court, they may not last long.\n\nSupreme Court confirmation hearings are often farcical displays. A nominee, chosen from among the finest legal minds in the land and auditioning for a job to write legal opinions that have the power to profoundly shape Americans’ lives, sits before the Senate Judiciary Committee and purports to have few opinions at all on the cases and issues that are the most controversial and oft-discussed inside the legal academy and out of it. But Barrett brings the dissembling and disingenuous refusal to answer direct questions to a new level. No Supreme Court nominee in memory has been so evasive. And where Barrett hedges the most are the biggest tells: on the Affordable Care Act, on presidential powers in elections, and on reproductive rights and sexual privacy.\n\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion. She has said so herself, joining the “pro-life” faculty group at Notre Dame Law School, and signing an ad that said, “It’s time to put an end to the barbaric legacy of Roe v. Wade and restore laws that protect the lives of unborn children.” That isn’t a statement of a personal view; that’s a demand for the courts to act. And if confirmed, Barrett will be one of the nine people in the country with the power to do what the letter she signed demands.\n\nShe has already shown us her intentions. President Donald Trump believes her. Senate Republicans believe her. We should believe her, too.\n\nDiscerning what Barrett will do if she is elevated to the court is made a little more complicated by the fact that Barrett suddenly refuses to speak about her views at all. Neither she nor the president nor her Republican proponents in the Senate want her to be too transparent on the abortion question. Roe v. Wade is, after all, the law of the land, and most Americans do not want it overturned. The election concludes in just 20 days — a clear argument against holding these hearings now, but one Republicans have disregarded. If Barrett answers honestly in the confirmation hearings — if she says that she believes Roe was wrongly decided — then Republicans are going to face a lot of demands to vote no on her confirmation, and have a lot of angry voters on their hands.\n\nAnd so instead, we are treated to this joke of a hearing, where we all pretend that Barrett doesn’t believe exactly what she has repeatedly said she believes.\n\nBarrett is not the first Supreme Court nominee to dodge the abortion question. But she is even less committal than most. Ruth Bader Ginsburg answered clearly in her confirmation hearings that she believes Roe was rightly decided; Sonia Sotomayor agreed that Roe was settled law. Barrett won’t do that.\n\nTo add insult to injury, Senate Republicans (and a few Democrats) have spent precious minutes fawning over Barrett’s family and her ability to have both a career and a large family, something men have done for centuries without much comment. Over and over, conservative senators called Barrett a role model or an inspiration for girls and women (as if boys and men can’t look up to a woman). There is something particularly pernicious about demanding that women laud Barrett, a woman more in the mold of anti-feminist Phyllis Schlafly than women’s rights trailblazer Ruth Bader Ginsburg, as an icon of female accomplishment and professional possibility. It’s no coincidence that in the wake of Roe v. Wade and earlier cases establishing a right to contraception access, American women surged toward greater independence, going to college and into the workforce in record numbers. The lessons of safe abortion and readily available contraception reverberate around the world: When women can plan their families, women thrive. We live longer. We are far less likely to die in childbirth, and our children are less likely to die, too. We are more likely to go to school; so are our daughters. We are less likely to be trapped in abusive relationships, and less likely to be stuck in poverty. Our families are more prosperous. Our communities are healthier.\n\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\n\nFeminists have fought long and hard for these rights — including for the right of women to choose to have large families, as Barrett has, even if they are not worth nearly $2.6 million, as Barrett is, but are instead struggling to keep their children safe and secure. Republicans and conservatives like Barrett have cheered on large (white) families, while refusing to do much of anything to help out when families struggle. Feminists have tried to clear the way for women to make their own reproductive choices — to have children or not, without state interference or professional discrimination. Barrett has benefited from that feminist work, which is why she is now in a position to undermine it. Being told that feminists and women generally should appreciate that and admire her is a hard pill to swallow.\n\nBarrett won’t be the first anti-abortion judge on the court (although if Republicans are looking for firsts, she would be the first staunchly anti-abortion woman). But her hostility to reproductive rights extends far beyond Roe and the right to abortion. In the hearings, Barrett couldn’t answer whether she believed Griswold v. Connecticut, the case that extended contraception access to married women, was rightly decided. We know that her mentor, Antonin Scalia, believed Griswold was indeed decided wrongly, and given the chance, would likely have overturned it. We know Barrett has said that, while she is her own woman, she believes Scalia got most of his decisions right. While Roe gets a lot of press, Griswold is at the heart of many of the court’s most significant decisions — it was the first case that fully laid out the right to sexual privacy, which has been understood since then to include the right of any woman to use contraception and have an abortion; the right of people of the same sex to have consensual intercourse; and the right of individuals to marry someone of the same sex. If Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\n\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it. And she’s right that it’s been a while since states have criminalized contraception. But they haven’t done that because abortion rights and Roe have taken the bulk of the focus of the anti-abortion movement. It’s worth noting, though, that most mainstream anti-abortion groups do not support contraception access; some are publicly opposed to it, and some falsely characterize common contraceptive methods as “abortifacients.” These same groups have pushed legislation that establishes personhood at the moment of conception, something at odds with the medical definition of pregnancy, but that could outlaw several of the most common and effective forms of birth control and even criminalize in-vitro fertilization. That’s all very far from an academic exercise. It is not “unthinkable.” It is, in fact, part of a well-thought-out plan. If Roe is overturned, there’s little to stop conservative groups from pressing forward and coming for contraception next — or marriage equality, or the right to have consensual intercourse with an adult of the same sex.\n\nThe message from Barrett’s confirmation hearing was clear: This is all on the line. She does not believe there is a constitutional right to sexual privacy. The question is whether the weight of the precedent — dozens of cases over five decades, millions of Americans who rely on what they believe to be their right to use contraception, end unwanted or dangerous pregnancies, have sex, and get married — will be enough to tip Barrett’s originalist scales toward upholding the law as it stands.\n\nBarrett showed us who she is: a woman who will not affirm even the least contested rights to sexual privacy and family planning. Which means even the least contested of those rights could be up for grabs with Barrett on the Supreme Court.",
    "keywords": [
      "barretts",
      "women",
      "confirmation",
      "effect",
      "cause",
      "barrett",
      "court",
      "griswold",
      "domino",
      "privacy",
      "rights",
      "amy",
      "coney",
      "hearings",
      "contraception",
      "right",
      "roe"
    ]
  },
  {
    "url": "https://elemental.medium.com/my-therapist-says-all-relationships-are-impossible-d4c61f7df249?source=extreme_main_feed---------2-74--------------------83808624_1fb3_475d_a073_1b209955b2cc-------",
    "title": "My Therapist Says All Relationships Are Impossible",
    "publish_date": "2020-10-14 05:32:29",
    "authors": [
      "Naveen Kumar"
    ],
    "summary": "My Therapist Says All Relationships Are ImpossibleIt’s okay to lose a friendshipThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement.\nMy therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!).\nMy therapist put it bluntly: “All relationships are impossible.”All relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\nLabels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\nThis type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences.",
    "text": "My Therapist Says All Relationships Are Impossible\n\nIt’s okay to lose a friendship\n\nThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement. In the decade we’ve known each other, I had always felt comfortable talking to him about my own experience of otherness as an Indian American. But when I pointed to his whiteness as a privilege he ought to examine, he grew defensive, blew up, and ghosted.\n\nI’m not someone who falls out with friends easily or often. The few times it has happened, my instinct is to ask, “How did I get myself into this?” or “Why didn’t I see this coming?”\n\nWhen any situation in my life goes awry, I tend to perseverate, fixating on how I might have caused it to fly off the rails. “Am I a bad judge of character?” I think. My therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!). But when it comes to the shock of a breakup, whether with a friend or a romantic partner, it’s the fantasy that we can ever fully know someone, or achieve a kind of perfect unity that’s to blame.\n\nMy therapist put it bluntly: “All relationships are impossible.”\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\nHis statement was one of those breakthrough moments when my jaw dropped and I felt an immediate sense of relief. The existentialism of it thrilled me, and its practical application made perfect sense. In every relationship, there will always come a conflict (likely many over time) that indicates an unbridgeable distance between two people. Labels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\n“A lot of the things that the world tells us about what a relationship is supposed to be present an ideal that everyone feels they’re failing to live up to,” says Jamieson Webster, PhD, a psychoanalyst in New York City and author of Conversion Disorder: Listening to the Body in Psychoanalysis. It’s not just that the messages we get from pop culture, about fairy tale romance and lifelong BFFs, are unrealistic. The very idea that any relationship, no matter how close, can make us less alone or separate from each other is perhaps the ultimate human fantasy.\n\n“Separation and difference are very hard, including the capacity to understand being alone,” Webster says. “There is so much fantasy that tries to cover over ‘aloneness,’ which is simply a factual reality.”\n\nWhen we’re able to more clearly understand our innate separateness, we can also more readily accept that personal differences are bound to arise in every relationship. The question then becomes how two people acknowledge the essential distance between them, communicate their feelings about it, and reach a mutual resolution that doesn’t attempt to paper over it. Sometimes it’s possible to bridge the gap and continue forward together; in other cases, it may be time to move on. “Whether with a friend or a partner, it’s about what you build on the basis of your differences,” Webster says. “Because you are two unique people with different histories and different pleasures and pains.”\n\nRecognizing the impossibility of a “perfect” relationship is also useful when we seek to build new ones. While swiping through dating profiles, for example, it’s easy to point to a picture you don’t particularly like or the fact that someone prefers cats over dogs as reasons why it would never work out. This type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences. How many potential connections have we cut off at the pass due to preconceived notions of compatibility?\n\nBreakups are hard, even and especially with close friends. But they’re also the surest way to recognize, and even honor, the truth of our individuality. “Breakups really propel people forward in terms of their development,” Webster says. “Whether it’s with friends or partners, a breakup is a time to recover yourself and find your separateness,” something you may have been struggling to find inside the relationship. That doesn’t mean we shouldn’t allow ourselves to feel hurt and disappointed, or take responsibility for our role in the process. But rather than frame a breakup as a personal failure, we can acknowledge it as a reflection of one of life’s most essential truths.",
    "keywords": [
      "differences",
      "partner",
      "therapist",
      "fantasy",
      "impossible",
      "friend",
      "relationship",
      "webster",
      "friends",
      "relationships",
      "perfect"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------83808624_1fb3_475d_a073_1b209955b2cc-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/fearless-she-wrote/we-should-be-ashamed-of-the-sexism-surrounding-the-murder-of-shanann-watts-904bc0fc0ef9?source=extreme_main_feed---------4-73--------------------83808624_1fb3_475d_a073_1b209955b2cc-------",
    "title": "We Should Be Ashamed of the Sexism Surrounding the Murder of Shanann Watts",
    "publish_date": "2020-10-13 16:37:33",
    "authors": [
      "Laura Fox"
    ],
    "summary": "We Should Be Ashamed of the Sexism Surrounding the Murder of Shanann WattsA pregnant woman was murdered by her husband.\nThe documentary is narrated by the victim Shanann Watts using audio and footage from her Facebook live streams.\nAny footage of her husband and murderer, Chris Watts, is from police body cams, cameras in the police interview rooms, and courtroom footage.\nChris Watts, husband of Shanann and father to Bella, Celeste, and Nico, eventually confessed to their murders, but not before trying to pin the blame on Shanann.\nWhy does a female murder victim have to be “perfect” in order to receive compassion?",
    "text": "We Should Be Ashamed of the Sexism Surrounding the Murder of Shanann Watts\n\nA pregnant woman was murdered by her husband. He went on to murder their two children. But somehow, she “drove him to it.”\n\nThe home of Shanann and where she was murdered. Image licensed for commercial use.\n\nSocial media has been buzzing with people’s reaction to the Netflix documentary American Murder: The Family Next Door. What sets this documentary apart from traditional murder documentaries is that it centers the victims in the story rather than the murderer. The documentary is narrated by the victim Shanann Watts using audio and footage from her Facebook live streams. Any footage of her husband and murderer, Chris Watts, is from police body cams, cameras in the police interview rooms, and courtroom footage.\n\nThe murder took place on August 13th, 2018. Shanann, who was pregnant at the time with a baby boy called Nico, was reported missing along with her two children, Bella,4, and Celeste, 3. Chris Watts, husband of Shanann and father to Bella, Celeste, and Nico, eventually confessed to their murders, but not before trying to pin the blame on Shanann. He insisted in police interviews that Shanann was the one who had killed their daughters and he killed her in retaliation.\n\nChris did not fully admit to what he had done until November 6th, 2018. In that time, social media was filled with people scrutinising Shanann’s Facebook page. Her parenting was criticised along with her personality. And despite the fact Chris would eventually admit that Shanann had not hurt their daughters, the internet still critcised her and tried to find ways of blaming her for Chris’s actions.\n\nI watched the documentary and found it impossible to hold back tears. Audio recordings were played of people calling her crazy, bossy, and highly strung. She was even called a bitch and people suggested she drove Chris to murder her and their children.\n\nThe public’s treatment of Shanann was disappointing, but not surprising. It’s true that Shanann seemed like the highly-strung one in the relationship. In one of her Facebook livestreams that was played in the documentary, she described herself as the more dominant one in the relationship and liked things a certain way.\n\nSomeone with these personality traits can be annoying sometimes. Shanann herself seemed aware of this. But do women deserve to be murdered for being bossy? No. Absolutely not. And the fact people were suggesting this was okay is extremely sexist.\n\nI can’t help but feel that if Shanann had been a man with these personality traits, she would have been seen as ambitious, hardworking, assertive, and the leader of her family. But because she was a woman, these traits were labeled as bossy, highly strung, and crazy.\n\nVictim blaming women is nothing new\n\nThe hashtag #iwasblamed was trending on Twitter earlier this year in response to an article where Sabrina Lekaj, who was stabbed to death, was painted in a negative light. Her murderer, Petrit Lekaj, was painted in a more favourable light as a father who was concerned about his daughter’s drinking, partying, and drug-taking. These are some of the tweets from people who have experienced victim-blaming for being women on the receiving end of male perpetrators:\n\n#iwasblamed I was told I was a slut, a home wrecker, a whore, a baby killer who didn’t deserve to live. I was 15 and had been sexually abused by a friends step dad. He also made me have an illegal abortion. Then the media said we had an affair and I was his “lover” I was 15. My abuser tried to kill me then shot himself. He was called lovesick and I was a heartbreaker. I was 21 #iwasblamed #iwasblamed for being beaten by my brother and almost killed by my father. My extended family all took the side of the guilty parties, despite the extent of the damage done to me. It always seemed as though the men in my family could do no wrong. #iwasblamed by the media for my 22 year old abusers suicide after I spoke to the police. .. I was 14 and quoted as his “girlfriend” in the subheading\n\nOther women have been blamed for the actions of their murderers\n\nMuch like how Shanann was blamed for her own murder, Tatyana Strakhova was vilified on social media after she was raped and murdered by her roommate. Her rapist and murderer killed himself, and as a result, Tatyana’s Instagram was filled with comments blaming her.\n\nOne opinion piece published by Dni.ru said that she “wasn’t as innocent as it might seem at first glance.” The piece featured photos from Strakhova’s social media accounts of her drinking or posing in sexually suggestive positions.\n\nThey Blamed A Victim For Her Own Murder. Here’s How Women Are Responding by Otillia Steadman of Buzzfeed News.\n\nSimilarly, Grace Millane was blamed for her own murder due to her sexual history of having a preference for BDSM. The media reporting of her murder was met with outrage and exposed a disturbing historical trend of women being blamed for not being the “perfect victim.” According to theconversation.com, this attitude can be traced as far back to the response to the murders of Jack the Ripper.\n\nIt has been argued by several feminist historians, that the whole grand narrative of the Whitechapel Murders is held aloft to all women — as a warning of what may happen should they breach their prescribed gendered limits of domesticity, geography and sexuality.\n\n‘Jack the Ripper’ was a serial killer who disemboweled women — we need to stop celebrating that by Charlotte Mallinson\n\nWhy did it take a documentary to evoke compassion towards Shanann?\n\nSince the documentary aired, I feel like I know Shanann and her children. The documentary sets an example for other murder documentaries as it gives the victims a voice. Due to its format, many people seem to feel the same way as I do and are largely in support of Shanann. Her Facebook page is filled with comments of love and support towards her. On photos of her and Chris, members of the public have commented to condemn his actions.\n\nMost victims don’t get to have their voices heard. And it’s sad that it took a Netflix documentary to evoke some compassion and understanding towards Shanann. Why does a female murder victim have to be “perfect” in order to receive compassion? And why is it when they do fit the bill of “perfect victim”, people desperately try to find reasons as to how they drove their male attacker to harm them?\n\nShanann was popular and thought of as a loving wife and mother, yet people were determined to find ways they could justify what happened to her. The psychology of victim-blaming explains that people do this because we want to believe that something unthinkable doesn’t just happen to anyone. We want to believe that we would have been more careful and done things differently so we can convince ourselves it would never happen to us.\n\nBut in reality, anyone can be a victim. Even people who are flawed and made choices many may not agree with. They are still a victim and their personal history or character flaws do not reduce the severity of the crime committed against them.\n\nSoon the buzz of this documentary will die down. Another woman will be murdered by a man and we will try to find ways to explain how she drove him to it. Or we could remember Shanann and pay tribute to her, and the many women who have been murdered and blamed before her, by learning from this shameful behaviour. History doesn’t have to repeat itself.\n\nWhether women are bossy, highly-strung, or even “crazy” or “bitches”, they do not deserve to be murdered. It’s shameful that has to be said.",
    "keywords": [
      "shanann",
      "women",
      "ashamed",
      "murdered",
      "surrounding",
      "sexism",
      "victim",
      "media",
      "murderer",
      "blamed",
      "murder",
      "watts",
      "chris",
      "documentary"
    ]
  },
  {
    "url": "https://towardsdatascience.com/real-time-time-series-anomaly-detection-981cf1e1ca13?source=extreme_main_feed---------5-73--------------------83808624_1fb3_475d_a073_1b209955b2cc-------",
    "title": "Real-Time Time Series Anomaly Detection",
    "publish_date": "2020-10-14 14:31:51",
    "authors": [
      "Marco Cerliani"
    ],
    "summary": "In this post, we explore different anomaly detection approaches that can scale on a big data source in real-time.\nTsmoothie is a python library for time series smoothing and outlier detection that can handle multiple series in a vectorized way.\nThe convolutional smoother uses weights generated using predefined windows function (linear, hanning, hamming, bartlett, blackman).\nThe exponential smoother uses weights generated with an exponential function.\nRespectively, two different data structures are taken into account: random walks series and seasonal series with no trend.",
    "text": "As much as it has become easier over the years to collect vast amounts of data across different sources, companies need to ensure that the data they’re gathering can bring value. To aid insight collection from the data, machine learning and analytics have become trending tools. Since these domains require real-time insights, an abundance of unwelcome data can create real issues.\n\nBefore decisions are made, and critically, before actions are taken, we must ask: are there anomalies in our data that could skew the results of the algorithmic analysis? If anomalies do exist, it is critical that we automatically detect and mitigate their influence. This ensures that we get the most accurate results possible before taking action.\n\nIn this post, we explore different anomaly detection approaches that can scale on a big data source in real-time. The tsmoothie package can help us to carry out this task. Tsmoothie is a python library for time series smoothing and outlier detection that can handle multiple series in a vectorized way. It’s useful because it can provide the techniques we needed to monitor sensors over time.\n\nTYPES OF ANOMALIES\n\nFirst, let’s define anomalies. They can be anything that is different or abnormal and deviates substantially from other data in the sample or historical data.\n\nAnomalies are often divided into point and pattern anomalies. Point anomalies are single instances of something abnormal, while pattern anomalies represent clusters of data that are abnormal.\n\nIn most of the case, some point anomalies may seem like a case of bad luck. With a pattern anomaly instead, the data creates a pattern that looks very different from normal. Pattern anomalies are more difficult to detect because we must first be able to define a normal pattern, and then we could need more data to be able to classify that this pattern is anomalous compared to historical activity.\n\nBelow we present different simulated scenarios, where we apply different techniques suitable for anomaly detection. Their adoption is domain-related and they are all based on simple assumptions. This simplicity is fundamental in all the tasks where we have a lack of information or in the presence of a little amount of data.\n\nPOINT ANOMALIES\n\nOur aim here is to detect data points that deviate so much from others. This arouses suspicions that the points were generated by a different mechanism.\n\nTwo different algorithms are used: a convolutional smoother and an exponential smoother. Both smooth the received signals using a sliding window approach. The convolution approach uses a discrete linear convolution while the exponential one uses an exponentially weighted convolution. Convolution is a mathematical operation that could be described as the integral of the product of two sequences: the raw signal and the weights. The convolutional smoother uses weights generated using predefined windows function (linear, hanning, hamming, bartlett, blackman). In the case of linear type, the weights are all the same and equal to one. This makes the operation equal to a moving average. The exponential smoother uses weights generated with an exponential function. As result, the most recent observations weight the most when computing the smoothing.\n\nRespectively, two different data structures are taken into account: random walks series and seasonal series with no trend.",
    "keywords": [
      "detection",
      "anomaly",
      "anomalies",
      "weights",
      "uses",
      "pattern",
      "convolution",
      "exponential",
      "smoother",
      "different",
      "realtime",
      "data",
      "series"
    ]
  },
  {
    "url": "https://towardsdatascience.com/25-lesser-known-java-libraries-you-should-try-ff8abd354a94?source=extreme_main_feed---------6-73--------------------83808624_1fb3_475d_a073_1b209955b2cc-------",
    "title": "25 lesser-known Java libraries you should try in 2020",
    "publish_date": "2020-10-07 22:09:24",
    "authors": [
      "Md Kamaruzzaman"
    ],
    "summary": "JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape.\nIn enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform.\nWiremockHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development.\nLink:ConclusionIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries.\nThere are many excellent Java libraries that I have not listed here but worth a try.",
    "text": "1. RxJava\n\nReactive Extensions (ReactiveX) is a popular software development paradigm to deal with asynchronous and event-driven programming. RxJava is the Java VM implementations of the Reactive Extensions by using Observables. It extends the Observer Pattern to support event-driven programming by adding composable operators on a sequence of events/data in a declarative way. It also hides the low-level complexities like threading, thread-safety, synchronization, and concurrent data structure.\n\nIf you want to do reactive programming in Java, it is a must-have library.\n\nLink:\n\n2. OkHttp\n\nHTTP is by far the most used Application layer protocol. There are many excellent Java-based HTTP client libraries out there. But OkHttp is the simplest yet powerful HTTP client library in the JVM. It offers fluent and clean API to develop HTTP client in Java.\n\nIt also supports some advanced features: Connection pooling, GZIP shrink, response caching, modern TLS features, and many more.\n\nLink:\n\n3. MyBatis\n\nIn most Software development projects, we need to store data. Although there are many types of data storage, SQL is still the most used data storage type. As a Java developer, we need to match our Java object to the SQL table. One way to achieve the mapping is to use ORM (e.g., Hibernate). But there are many use cases when you want to have full control over the Object-Table mapping (e.g., Performance). In those cases, you can directly use JDBC and write the SQL query. The other way is to use MyBatis to map Java Object to Stored Procedure or SQL statements. It offers both annotation-based or XML descriptor based mapping.\n\nI prefer MyBatis over plain JDBC, especially in larger projects, as it improves the separation of concerns.\n\nLink:\n\n4. HikariCP\n\nHikariCP is the second library in this list related to Database. Establishing a JDBC connection is resource expensive. If you create a new connection every time you access the Database and close it once you are done, it can severely impact your application performance. Not to mention that failure to close the connection properly or allowing limitless database connection can crash your application.\n\nUsing Connection Pooling means connections are reused rather than created each time a connection is requested. HikariCP is a very fast yet lightweight Database connection pooling in JVM. It is also very reliable and a “zero-overhead” JDBC connection pool.\n\nLink:\n\n5. Lombok\n\nIn modern days, Java is often criticized as a verbose and bloated programming language. Compared to other popular languages (JavaScript, Python, Scala, Kotlin), a developer needs to write lots of boilerplate code in Java. Although Java has introduced Records in JDK 15 to reduce boilerplate code in Java, it is not an LTS release. Fortunately, a library can already reduce your boilerplate code in Java significantly: Project Lombok. You can generate getters, setters, hashcode, equals, toString, Builder classes by adding a few annotations. Additionally, it offers null pointer check, logger, and many more.\n\nLink:\n\n6. VAVR\n\nJava finally released the much-awaited functional programming via Lambda and Streaming in version 8. If you are used to functional programming or want to dive deep into functional programming, you may find Java’s functional programming wanting. Compared to many other functional programming languages (Haskell, Scala), Java is pale. VAVR is a library that can fill the gap of the functional programming features in Java. It provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nLink:\n\n7. Gson\n\nOver the years, JSON has become the de-facto data exchange format. In Java, there also exist several excellent libraries to deal with JSON. One of them is Jackson, which I have covered in my previous article. The other excellent library is Google’s Gson. Unlike Jackson, it is a minimalistic library and only supports JSON. It offers Data Binding, extensive Generic support, flexible customization. One of the major advantage (or disadvantage depending on your liking) of Gson is that it does not need annotation.\n\nLink:\n\n8. jsoup\n\nIf you are developing your application in Java and need to deal with HTML, you should use jsoup. It is a Java library to work with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data. It implements the WHATWG HTML5 specification and parses HTML using the best of HTML5 DOM methods. It supports parsing HTML from URL/string, find and extract data, manipulate the HTML elements, clean HTML, output HTML.\n\nLink:\n\n9. JIB\n\nIf you are working on an enterprise-grade application, it should be at least Cloud-ready. The first step to make your application cloud-ready is to containerize your application, i.e., put your artifactory binary into Docker image. Dockerizing a Java application is a bit tedious work: you need to have deep knowledge of Docker, you need to create a Dockerfile, and you will need Docker Daemon. Fortunately for the Java developers, Google has created an Open-source Java containerizer using already existing tools. You can use JIB as a Java library to build an optimized Docker and OCI image.\n\nLink\n\n10. Tink\n\nTink is yet another handy Java library in this list from Google. Cryptography and security are becoming increasingly more important in Software Development. Cryptographic techniques are used to secure user data. Implementing cryptography correctly requires a lot of expertise and effort. A group of Cryptographers and security engineers in Google has written the multi-language cryptographic library Tink. It offers easy-to-use but hard to misuse security API. Tink offers cryptographic functionalities via different primitives. It provides symmetric key encryption, streaming symmetric key encryption, deterministic symmetric key encryption, digital signature, hybrid encryption, and many other encryption functionalities.\n\nLink:\n\n11. Webmagic\n\nIf you work on Web crawling, you can write your own crawler, which is time-consuming and tedious. In Java, Webmagic is an excellent Web crawler library that covers the complete life-cycle of crawler: downloading, URL management, content extraction, persistence. It offers a simple yet flexible core, Annotation support, multi-threaded, and easy-to-use API.\n\nLink:\n\n12. ANTLR 4\n\nIf you work on parsing and processing data, then the ANTLR library could be handy. It is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It does this by giving us access to language processing primitives like lexers, grammars, parsers, and the runtime to process text against them.\n\nIt’s often used to build tools and frameworks.\n\nLink:\n\n13. Caffeine\n\nIf your application is read-heavy, then caching can dramatically improve your application’s data access performance. Java has many great caching libraries. Caffeine is the best among the lot. It is a high-performance, near-optimal caching library based on Java. It offers a fluent caching API and some advanced features like asynchronous loading of entries, asynchronous refresh, weak referenced keys, etc.\n\nLink:\n\n14. Metrics\n\nOnce your Java application runs into production, you will want to have insight into your application's critical components. Metrics from the Dropwizard framework is a simple yet compelling Java library that provides insight into your application and JVMs KPI, e.g., rate of events, pending jobs, service health check, and more. It is modular and offers modules for other libraries/frameworks.\n\nLink:\n\n15. gRPC-Java\n\nGoogle has created gRPC as a modern Remote Procedure Call system in 2015. Since then, gRPC became extremely popular and one of the most used RPC system in modern software development. The library gRPC-Java is the Java implementation of the gRPC client. If you want to use gRPC in Java, then this library can be handy for you.\n\nLink:\n\n16. Java WebSocket\n\nTraditional Client-Server communications unidirectional. WebSocket is a bi-directional communication protocol over a single TCP connection. Java WebSocket is a barebone WebSocket server and client implementation in Java. If you are a Java developer and want to work with WebSocket, this library is highly recommended.\n\nLink:\n\n17. JJWT\n\nJSON Web Token (JWT) is the de-facto Authorization and secure Information exchange format in modern software development. Whether you are using a simple session-based Authorization or highly advanced OAuth2 based Authorization, you will probably use JWT. JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape. It is fully RFC specification compliant on all implemented functionality. It supports readable and convenient fluent API.\n\nLink:\n\n18. Swagger-Core\n\nOpenAPI is the specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. Swagger-Core is the Java implementation of the OpenAPI specification. If you are exposing REST API in your Java/JavaEE application, you can automatically provide and expose your API definitions using Swagger-Core.\n\nLink:\n\n19. Async Http Client\n\nAsynchronous programming is becoming increasingly popular of late because of its non-blocking nature. Most of the popular Java HTTP client libraries offer limited to no asynchronous HTTP response processing. Async Http Client is a popular Java library that offers asynchronous HTTP response processing. As a bonus feature, this library also supports the WebSocket protocol.\n\nLink:\n\n20. Liquibase\n\nAs a software developer, we all know the importance of version control, DevOps, and CI/CD of our code. In a blog post: Evolutionary Database Design, the great Martin Fowler argued that we also need version control and CI/CD of our code. Liquibase is a tool that supports tracking, version controlling, and deployment of SQL database changes in Java Applications. If you are working with an SQL database where the database is evolving, this tool can greatly simplify your database migration.\n\nLink:\n\n21. Springfox\n\nI have already listed Swagger-Core in this list, which can automatically generate REST API documentation for vanilla Java or Java EE application. In enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform. In Spring-based Java applications, the Springfox library can automatically generate REST API documentation from the source code.\n\nLink:\n\n22. JavaCV\n\nOpenCV is a computer vision and machine learning software library. It is open-source and was built to provide a common infrastructure for computer vision applications. JavaCV is a wrapper on OpenCV and many other popular libraries (FFmpeg, libdc 1394, PGR FlyCapture) in the field of computer vision. JavaCV also comes with hardware accelerated full-screen image display, easy-to-use methods to execute code in parallel on multiple cores, user-friendly geometric and the color calibration of cameras and projectors, detection and matching of feature points, and many other features.\n\nLink:\n\n23. Joda Time\n\nJava had a poor date and time functionalities in the pre-Java8 core library. Java8 released much needed advanced date and time functionalities in its java.time package. If you are working with an older version of Java (pre Java8), Joda time can provide you the advanced date and time functionalities. However, if you are working in a newer version of Java, you may not need this library.\n\nLink:\n\n24. Wiremock\n\nHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development. During the writing Unit test, it is best to focus on SUT (System Under Test) and mock the services used in the SUT. Wiremock is a simulator for REST API and enables developers to write code against an API that does not exist or incomplete. In microservice-based software development, Wiremock can significantly boost development velocity.\n\nLink:\n\n25. MapStruct\n\nIn Java application development, you often need to convert one type of POJO to another type of POJO. One way to achieve this POJO or Bean conversion is to explicitly code the transformation, which is tedious. The smart way is to use a library that is specifically developed to transform POJO/Bean. MapStruct is a code generator that implements mapping between POJO/Bean on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe, and easy to understand.\n\nLink:\n\nConclusion\n\nIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries. These libraries are not domain-specific and can help you whether you are developing Software for Business applications, Robotics, Android Apps or Personal projects. Please note that for a large and wide eco-system like Java, this list is not conclusive. There are many excellent Java libraries that I have not listed here but worth a try. But this list of libraries can provide a quick peek into the world of the Java eco-system.",
    "keywords": [
      "2020",
      "development",
      "lesserknown",
      "libraries",
      "try",
      "library",
      "25",
      "application",
      "java",
      "need",
      "offers",
      "programming",
      "software",
      "data"
    ]
  },
  {
    "url": "https://uxdesign.cc/29-of-my-favorite-websites-most-designers-have-never-heard-of-d7d99179cda7?source=extreme_main_feed---------7-73--------------------83808624_1fb3_475d_a073_1b209955b2cc-------",
    "title": "29 of My Favorite Design Tools & Websites You’ve Never Heard of",
    "publish_date": "2020-10-07 15:12:18",
    "authors": [
      "Danny Sapio"
    ],
    "summary": "The design space is awash with countless design tools, plugins, websites, resources, and more promising to improve your workflow and make you a savvier designer.\nI’ve tried my hand at a lot of them over the years, but there are only a few that really stand out.\nThis list is the cream of the crop — the most obscure, creative, unique, helpful or exceptional.\nSome are fun sites to be inspired from; others are tools and resources that will absolutely make you a better designer.\nLet me know what your favorite tools are on Twitter.",
    "text": "The design space is awash with countless design tools, plugins, websites, resources, and more promising to improve your workflow and make you a savvier designer. I’ve tried my hand at a lot of them over the years, but there are only a few that really stand out.\n\nThis list is the cream of the crop — the most obscure, creative, unique, helpful or exceptional. Some are fun sites to be inspired from; others are tools and resources that will absolutely make you a better designer.\n\nI hope you enjoy! Let me know what your favorite tools are on Twitter.\n\n1. The preposterous web portal of Erik Bernacchi\n\neeerik.com",
    "keywords": [
      "stand",
      "workflow",
      "heard",
      "resources",
      "favorite",
      "tools",
      "web",
      "design",
      "unique",
      "twitter1",
      "youve",
      "tried",
      "29",
      "websites"
    ]
  },
  {
    "url": "https://medium.com/its-tinkoff/typescript-tricks-that-allow-you-to-scale-your-app-endlessly-95a0ff3d160d?source=extreme_main_feed---------8-73--------------------83808624_1fb3_475d_a073_1b209955b2cc-------",
    "title": "TypeScript tricks that allow you to scale your app endlessly",
    "publish_date": "2020-10-08 12:02:05",
    "authors": [
      "Roman Sedov"
    ],
    "summary": "We collected a set of rules for more strict TypeScript.\nstrictTypeScript has a “strict” mode that is unfortunately disabled by default.\nWith “strict” mode you forget about errors like undefined is not a function or cannot read property X of null .\nIf you start a new project, enable “strict” and be happy.\ntsconfig.json filereadonlyThe next important rule for us as developers in TypeScript is using readonly everywhere.",
    "text": "We use TypeScript because it helps develop our apps safer and faster.\n\nTypeScript by default has many simplifications. They help JavaScript developers to start using it easier but they waste a lot of time in the long term.\n\nWe collected a set of rules for more strict TypeScript. You just get used to it once and save much time working with your code in the future.\n\nany\n\nThere is a simple rule that returns much profit in the long term.\n\nDo not use “any”. Ever.\n\nThere is simply no case where you cannot describe a type instead of using “any”. If you have such a situation, it can be a problem in architecture, legacy or something else.\n\nUse generics, unknown or overloads and do not worry about unexpected problems with data structures. Such problems are hard and expensive to debug.\n\nstrict\n\nTypeScript has a “strict” mode that is unfortunately disabled by default. This mode enables a set of rules for safe and comfortable TypeScript. If you do not know about this mode, read the following article.\n\nWith “strict” mode you forget about errors like undefined is not a function or cannot read property X of null . Your types are accurate and correct.\n\nAnd what should I do?\n\nIf you start a new project, enable “strict” and be happy.\n\nIf you have a project without “strict” mode and you want to enable it, you can meet a lot of compilations. It is very hard to write a strict code without alerts of the compiler. So it’s likely you have a lot of problematic places. Migrating the whole project to “strict” gets annoying pretty quickly.\n\nIt is recommended to cut this big task into pieces. The “strict” mode consists of a set of 6 rules. You can enable one of them and fix all errors. The next time, you enable the second one, fix errors and continue work and so on. One day you get a “strict” mode.\n\ntsconfig.json file\n\nreadonly\n\nThe next important rule for us as developers in TypeScript is using readonly everywhere.\n\nIt is a bad practice to mutate structures while working with them. For example, Angular does not like this way: there are some issues with ChangeDetection and updates of your view when you mutate data.\n\nBut you can prevent all attempts to mutate data easily. Just make a habit of writing readonly word.\n\nAnd how should I do it?\n\nThere are many places in your app where you can replace unsafe types to readonly options.\n\nUse “readonly” properties in interfaces\n\nPrefer “readonly” types\n\nUse “readonly” fields in a class when possible\n\nUse “readonly” structures\n\nas const\n\nIn TypeScript v.3.4 we got const-assertions\n\nIt is a more strict instrument than “readonly” types because it seals instance to the most precise type and you can be sure that nobody and nothing will change it.\n\nUsing as const you also get exact types in the tips of your IDE.\n\nUtility Types\n\nTypeScript has a set of types that are shortcut transformations of other types.\n\nPlease, explore the official utility types doc and use them in your app. It saves a lot of time.\n\nNarrow down your types\n\nTypeScript has many instruments to narrow down types. It is cool because we can support strict typing in our project in a wide variety of cases.\n\nLook at the following sample. It is a simple case but it can help to understand the difference between checking a type and narrowing it down.",
    "keywords": [
      "using",
      "typescript",
      "types",
      "endlessly",
      "set",
      "project",
      "lot",
      "readonly",
      "enable",
      "scale",
      "allow",
      "tricks",
      "mode",
      "strict",
      "app"
    ]
  },
  {
    "url": "https://eand.co/are-these-the-last-25-days-of-american-democracy-14fa529ba8bd?source=extreme_main_feed---------9-73--------------------83808624_1fb3_475d_a073_1b209955b2cc-------",
    "title": "Are These the Last 25 Days of American Democracy?",
    "publish_date": "2020-10-09 16:36:55",
    "authors": [
      "Umair Haque"
    ],
    "summary": "Are these to be the last 25 days of American democracy?\n!” while Trump was busy scapegoating immigrants, refugees, Jews, Muslims, and everyone else who wasn’t a “real” American.\nLike I said: it’s deeply abnormal for a society to feel this way, act this way, think this way, be this way.\nBecause I want you to really understand American collapse, so that you really understand what America is up against in this election.\nThese could very well be the last 25 days of American democracy.",
    "text": "The more desperate that Trump gets, the more egregious his transgressions become. The latest, as he plummets in the polls, is to call for his opponents to be prosecuted and indicted.\n\nThat’s straight out of the authoritarian’s playbook. And it should be a clear sign of what is to come. Are these to be the last 25 days of American democracy?\n\nTrump has long understood that he is unlikely to win the election outright. That the majority of Americans don’t back him — they didn’t the first time around, remember. That’s no mere coincidence: it is the culmination of a trend. The same happened with George W Bush, and it was an ominous sign of things to come. America’s ranked as a flawed democracy precisely because it’s obscure “electoral college” system at this point, a remnant of slavery and segregation, designed to empower wealthy landowners, stands against the wishes of the majority — who want a society more like Canada or Europe than the failed state of Texas.\n\nAnd so what has developed over the last few months — and the over the last several decades, with the GOP— is what looks like a sophisticated, complex strategy to thwart democracy itself, and steal the election. That’s no overstatement or hyperbole. As I’ve written in the recent past, the elements of this are in plain view — for those who care to look.\n\nBefore I discuss this strategy, and how its evolving, though, I want to point something out. Americans don’t quite seem to understand that they are living in a pre-authoritarian society now, and have been for quite some time. When the Supreme Court handed the win to Bush, that was a major, major development in pre-authoritarianism. When Obama — as good a person as he is, he made several major mistakes — bailed out the banks, but not Main St, that too was pre-authoritarianism, propping up failed predatory institutions. When warnings of Trump’s abuses of power to come were dismissed in 2016, that too was pre-authoritarianism, as it was when Hillary got attacked for “but her emails!!” while Trump was busy scapegoating immigrants, refugees, Jews, Muslims, and everyone else who wasn’t a “real” American.\n\nPre-authoritarianism isn’t just a political phenomenon, though. It’s also a kind of cultural and social current sweeping through a nation. And America’s long been pre-authoritarian in those ways, too. Americans are legendary the world over for their cruelty, indifference, and brutality — all of which are severe blinking-red indicators of pre-authoritarianism. Kids shooting each other up at schools — something which happens nowhere else in the world with such regularity? People having to beg strangers online to pay for basic medicine? Generations crippled by unpayable debt, beginning with “lunch debt,” becoming “student debt,” then turning into “credit card” and “medical debt” — a society of neo-serfs, in other words?\n\nAll these things are severe indicators of pre-authoritarianism, and yet they have also become normalised in America to the extent that many Americans don’t understand that living this way, among such severe cruelty and brutality, is deeply, deeply abnormal. An example I often raise is that of Pakistan, a place where you can buy AK-47s at gun markets — but nobody is shooting up schools. America’s problems are cultural and social.\n\nIt’s no overstatement to say that America is a nation in profound social and cultural crisis, with cultural and social problems — like school shootings, medical bankruptcy, skyrocketing despair and suicide, mass distrust, a level of vitriol and indifference that’s truly shocking — that exist almost nowhere else in the world. And all those problems are the ones of pre-authoritarian societies: they are what tend to happen just before societies collapse full on into authoritarianism.\n\nSo what is their genesis? What made America fall apart socially and culturally — by which I mean become a society in which no one much trusts anyone else, where indifference, despair, and rage are normalized? Like I said: it’s deeply abnormal for a society to feel this way, act this way, think this way, be this way.\n\nAmerica imploded into social and cultural crisis not out of the blue, but for a very simple reason, which predicted just such implosion. Economic collapse. The Soviet Union stagnated for thirty years — and that was enough to cause it to fracture into little nations, many of which are failing authoritarian states today. America’s stagnated for fifty. That’s almost twice as long, half a century where average incomes haven’t really risen.\n\nMeanwhile, the prices of basics have spiralled completely out of control, becoming flatly unaffordable. Education will cost you as much as a house, and so will falling ill. Food and water and utilities cost far, far more than they do in rich or poor societies. Retirement is an impossibility for three generations and counting right about now. These basics have become things that nobody much can afford in America.\n\nThe result of this dislocation — incomes stagnating, while prices rose and rose to amounts that the entire rest of the world finds startling and unbelievable, like $50K for childbirth — was that the American middle class finally collapsed. It took about two decades for the middle class to eat through its savings and assets, and finally, for the first time, around 2010, the middle class finally became a minority.\n\nToday, the average American dies in $62,000 of debt. That’s a figure, an idea, that Americans have normalized — isn’t this how everyone lives? — but it is so profoundly abnormal and perverse that to an economist like me it’s like having a patient who can’t breathe and is about to go into cardiac arrest. There is nothing — and I mean nothing — more alarming in the world of social statistics and economic figures than a nation dying in mass debt.\n\nWhat happens to societies where people die in mass debt? Debts they have never been able to repay? When entire generations fall prey to that failure? They implode into authoritarianism and/or fascism.\n\nThat is precisely the story of Weimar Germany, after all. It’s also the story of post-Soviet Russia. And the story of the Islamic world.\n\nWhy? What is the connection between a collapsing economy and an imploding society? Trust is. If you can’t make ends meet, no matter how hard you try, you live a life of panic, despair, fatalism, nihilism. You are perpetually angry, a human pistol with a hair trigger, ready to lash out. You have been denied the basics, and with them go peace of mind. And with all that goes trust. You being to grow suspicious of your neighbours, who were once friends. Now everyone is just a rival in a bitter, desperate battle for survival. Tribe turns on tribe, group on group. Atop it all stride elites, grinning, satisfied, because now the masses are too weak to even act for themselves. The bonds between them have been severed — and so no collective action is possible.\n\nA society dies, this way: an economy collapses, and takes trust with it, which produces a political implosion, by way of social disintegration.\n\nThat is exactly what happened in America. As the economy collapsed, from 1970 onwards, steadily, slowly, then fast, and finally all at once, collective action stopped being possible at all. Americans by the 2000s distrusted one another so much that they refused to give one another healthcare, retirement, education, and so on. Do you see the irony? That deficit was of the very basics that produced the vicious cycle of implosion, and yet because trust had gone missing from society, collective action to simply give one another the basics was no longer possible.\n\nAnd that created the opening for a demagogue. Sooner or later, someone was going to come along who blamed already hated minorities for all this. Who scapegoated Jews, Muslims, Mexicans, refugees, immigrants, for the problems of “real” Americans.\n\nAnd that is exactly what transpired. Trump led a neo-fascist movement to power, and soon kids were in camps, being ripped away from their families, minorities being hunted down in the streets, people being beaten and gassed, women forcibly sterilised in the camps. And there Trump is today, calling for his opponents to be prosecuted and indicted — a classic and predictable authoritarian move, to finalise the seizure of power.\n\nWhy am I telling you all this? Because I want you to really understand American collapse, so that you really understand what America is up against in this election. Let me put it bluntly.\n\nFor Trump to lose this election — really lose it, not just fail to win a majority but still retain power — America is going to have to commit its first act of collective action in a very, very long time. Its first positive act. Not just a negative one, as in denying everyone else healthcare, education, retirement, and so on — but an affirmative one, as in, we still want to be a democracy.\n\nIf that makes you shudder a little bit, then I’ve been successful — because you understand how big the stakes really are.\n\nAmerica isn’t just up against Trump. It is up against history. A toxic political party, a failed set of paradigms, a catastrophic set of ways of thinking about the world. That selfishness and cruelty and brutality — politely disguised as “self-interest” and “self-reliance” and “standing on your own two feet” and even “freedom” — can ever lead a society upwards, towards higher living standards.\n\nInstead, those ideologies, toxic remnants of slavery and segregation, which had never really gone away, led to the following sequence: economic collapse, even for the “real” American, which led to social disintegration, as social bonds were severed, and trust died, which led to predictable and inevitable political implosion, into fascism and demagoguery.\n\nThat is all what it means when I say “America was a pre-authoritarian society.” It goes deep, deep into the heart of America’s interlinked crises, economic, social, political, cultural, and is the central thread weaving them together, by way of indifference, despair, and enmity.\n\nThis election is America’s last chance. It is a pre-authoritarian society. If Trump wins — and remember, I don’t just mean that he loses the majority, but stays in power, thanks to legal challenges, the Supreme Court, voter intimidation and suppression — if he wins, whatever way he wins, America is finished. The transformation to an authoritarian society, which has been on the cards for decades now, will be complete.\n\nThat is why people like me — survivors and scholars of authoritarianism — have been trying to warn you about all these links. Sarah Kendzior has written about the despair in “flyover country,” Peter Daou warned how civil wars erupt, Jason Stanley discussed the evolution of fascism. America’s pundits — the ones you hear, on CNN and in the NYT and whatnot? They have no idea about this. They have been wrong from day one because they have never lived this, experienced it, understood it in a visceral, firsthand way. We have.\n\nTake the warnings seriously.\n\nThese could very well be the last 25 days of American democracy. America is up against all its mistakes, who have culminated in one man, Trump, and his movement of fascists, theocrats, flunkies, sycophants, idiots, and militias. It has never taken a majority to topple a democracy — only a fanatical enough minority.\n\nBut do you know what it takes to save one?\n\nA majority, who is capable of doing what is has not, for too long. Finally coming together, to resolve to stand up for decency, goodness, humility, truth, beauty, justice, wisdom, grace.\n\nThat is what needs to happen in the next 25 days. America needs to grow more in these last three and a half weeks than it has in the last three and a half decades.\n\nCan it do that? You, my friend, tell me.\n\nUmair\n\nOctober 2020",
    "keywords": [
      "american",
      "trump",
      "way",
      "world",
      "majority",
      "america",
      "social",
      "25",
      "debt",
      "really",
      "democracy",
      "society",
      "americas",
      "days"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------1abcd017_1563_4166_a83c_b573ce5ca19b-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------1abcd017_1563_4166_a83c_b573ce5ca19b-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------1abcd017_1563_4166_a83c_b573ce5ca19b-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------1abcd017_1563_4166_a83c_b573ce5ca19b-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------1abcd017_1563_4166_a83c_b573ce5ca19b-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://williamfleitch.medium.com/there-will-be-no-laughing-on-election-night-3d1d498afc38?source=extreme_main_feed---------1-74--------------------cffe8790_6a52_48ad_a9c0_82055b0031b6-------",
    "title": "There Will Be No Laughing on Election Night",
    "publish_date": "2020-10-13 20:34:19",
    "authors": [
      "Will Leitch"
    ],
    "summary": "But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off.\nBut one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000.\nAlready cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious.\nThere is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified.\nBut I damn sure know it won’t be funny.",
    "text": "NBC\n\nIn November 2000, I fell asleep to Al Gore being declared the next president, woke up to George W. Bush having won, and by lunchtime no one had any idea who had won or what was going on. What I remember the most is finding the whole thing very funny. And it was funny.\n\nI know now that being able to find such chaos amusing was a privilege, and an ugly one, of being an aimless but mostly comfortable white kid in his early 20s. One can argue about the specific differences of how the world would have turned out had Al Gore become president instead of George W. Bush, but there’s no question there were definite differences. But if you followed the race in 2000, this was not what everybody thought. I covered protests at the Democratic National Convention in Los Angeles that year — the same one Barack Obama couldn’t even get into — and the one thing every protestor believed, along with most young Gen Xers like myself, was that it didn’t matter whether the next president was Bush or Gore: They were two variations of the same flavor. That the race ended up so close sure didn’t feel like an accident. If you ask 300 million people whether they’d prefer two nickels or a dime, you shouldn’t be surprised when the results are 50–50. The madness that followed the close vote felt not like a moment of democratic peril. It felt like the logical conclusion to an incredibly stupid process. You just had to laugh.\n\nWhile watching 537 Votes, a new documentary about the 2000 Florida recount (and specifically the Miami-Dade county non-recount) that airs on HBO on October 21, I was reminded that it wasn’t just snarky former grunge kids who thought all this was ridiculous. The documentary itself is mediocre, more interested in cheap nostalgia and sight gags than the psychology of the era (director Billy Corben of Cocaine Cowboys has a persistent habit of dressing up his films with gimmicks rather than trusting his story to tell itself), but its ability to mine cultural artifacts of that time is remarkable. There’s a ton of clips from The Daily Show, and they each make a strong argument that the smugness that ultimately drove us all away from Jon Stewart was there from the get-go. There’s a reminder that Craig Kilborn used to host a late-night talk show. And there is a Wanda Sykes riff on Florida that is even rawer and more cutting 20 years later. But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off. Seriously, they found all of this hilarious. The most famous voice that night was Dan Rather and all his goofy homespun sayings—“If a frog had side pockets, he’d carry a hand gun”—but everyone was yucking it up. Second place was Tim Russert, the evening’s breakout star, with his whiteboards and his red states and blue states, with a big giddy grin on his face throughout, even at 3:17 a.m., like this was the most fun he’s ever had in his life. Isn’t this a blast? You hear the crew cackling off stage. What a night!\n\nIt sure seems less funny now.\n\nThere are many, many ways that 2020 is worse than 2000. (Sheesh, in 2000, Joe Rogan was just that guy from “NewsRadio.”) As Clare Malone pointed out in a fantastic piece for FiveThirtyEight, we’re a lot more polarized and a lot less likely to just give up and accept it if our preferred candidate loses in a tightly contested election. But one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000. Already cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious. There is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified. There is an awareness that if we are not careful about this democratic process, the whole thing could collapse.\n\nThere was none of that in 2000. It was all just a wacky story—this election is crazy close!—that was covered as if the stakes were a lot lower than they were. (Within three years, the NASDAQ collapsed, 9/11 happened and we were in multiple wars. The stakes turned out to be pretty freaking high.) What has changed, of course, is that we now know what a difference it can make when one candidate wins and one loses, that the entire nation is a fire just waiting for kindling, and that there are bad actors eager to pounce at the first sign of uncertainty. History will be made, and our anchors and analysts, by all accounts, understand how precise and meticulous they will need to be. And they understand, mostly, just how ungodly serious this is. And that’s where we’ve changed the most. In 2000, it felt like America would be around, and strong, forever, no matter who won, that the democratic process would do its job and we’d all be fine. Twenty years later, we’ve had 9/11 and endless wars and economic collapses and pandemics and Donald Trump. There are no illusions that America will just automatically land on its feet anymore. I don’t know how the networks, or the public, will react to what happens on November 3. But I damn sure know it won’t be funny.\n\nWill Leitch will be writing multiple pieces a week for Medium. He lives in Athens, Georgia, with his family, and is the author of five books, including the upcoming novel “How Lucky,” released by Harper next May. He also writes a free weekly newsletter that you might enjoy.",
    "keywords": [
      "sure",
      "2000",
      "lot",
      "night",
      "laughing",
      "democratic",
      "know",
      "thing",
      "election",
      "watching",
      "won"
    ]
  },
  {
    "url": "https://marquisele.medium.com/we-do-not-deserve-hospitals-abd8756d7bbf?source=extreme_main_feed---------2-74--------------------cffe8790_6a52_48ad_a9c0_82055b0031b6-------",
    "title": "We Do Not Deserve Hospitals",
    "publish_date": "2020-10-15 03:05:18",
    "authors": [
      "Marquisele Mercedes"
    ],
    "summary": "We Do Not Deserve HospitalsMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\nAt one point, I was sent to another room nearby that was a little larger and had no extra chairs.\nMy mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy.\nHave you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum?\nHas a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?",
    "text": "We Do Not Deserve Hospitals\n\nMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\n\nSource: Unsplash\n\nOn a night in my early teens, I went to the Pediatric Emergency Department at Montefiore’s Children’s Hospital for intense cramps. I was expecting my period in a few days, but had never felt that way before — like a heat lamp was burning into the meat of my pelvis.\n\nMy mother and I spent the better part of 9 hours in a tiny room with speckled vinyl floors and too-bright fluorescents. At one point, I was sent to another room nearby that was a little larger and had no extra chairs. My mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy. A nurse told me to undress from the waist down and wait for the doctor.\n\nMy doctor came in and asked me — in a few different ways — if I’d ever been “penetrated”. I had not and said so — repeatedly. She referenced the development of my body, implied the crudeness of the boys around me. It was an unsaid question, but one that still required an answer. “No,” I said, “I’ve never put anything in there.” She said “if you say so”, before telling me to lay down, scoot my butt towards the end of the examination table, and spread my legs so she could “take a look.”\n\nI didn’t know what that meant, but she was the doctor, so I did what she told me to do.\n\nHave you ever screamed “no!” and “stop!” at the top of your lungs while being penetrated by an unidentified object that scraped at your most intimate insides? Have you ever been told to “be still” and “hold on” like your pain was the most mundane thing that had ever happened? Have you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum? Have you ever redressed yourself afterwards with shaky hands and legs and raucously laughed about it to your mom who was just a few feet away getting a cup of water when she heard the tail-end of your screams? Has a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?\n\nI was sent home with instructions to take Motrin and “stay out of trouble”. My mother and I rode the bus while she angrily pondered on whether I was still a virgin. I wrapped my arms around my middle and tried to protect something that felt like pierced cellophane. The tests for STIs came back clean.",
    "keywords": [
      "sent",
      "doctor",
      "mother",
      "required",
      "penetrated",
      "hospitals",
      "stop",
      "wait",
      "told",
      "deserve",
      "room",
      "say"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------cffe8790_6a52_48ad_a9c0_82055b0031b6-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/javascript-in-plain-english/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6?source=extreme_main_feed---------4-73--------------------cffe8790_6a52_48ad_a9c0_82055b0031b6-------",
    "title": "11 Frontend tricks that most Frontend Developers don’t know about",
    "publish_date": "2020-10-14 19:17:01",
    "authors": [
      "Daniel Anderson"
    ],
    "summary": "Datalist elementOne HTML element that you don’t see used much at all and for no reason!\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements.\nYou will see a drop-down list of pre-defined options as you type.\n<datalist>Example:<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\"><option value=\"Cat\"><option value=\"Dog\"><option value=\"Chicken\"><option value=\"Cow\"><option value=\"Pig\"></datalist>",
    "text": "1. Datalist element\n\nOne HTML element that you don’t see used much at all and for no reason!\n\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements. You will see a drop-down list of pre-defined options as you type.\n\n<datalist>\n\nExample:\n\n<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\">\n\n<option value=\"Cat\">\n\n<option value=\"Dog\">\n\n<option value=\"Chicken\">\n\n<option value=\"Cow\">\n\n<option value=\"Pig\">\n\n</datalist>",
    "keywords": [
      "dont",
      "tag",
      "11",
      "datalist",
      "valuecatoption",
      "valuepigdatalist",
      "reasonthe",
      "frontend",
      "know",
      "valuedogoption",
      "valuecowoption",
      "developers",
      "typedatalistexampleinput",
      "tricks",
      "valuechickenoption",
      "used"
    ]
  },
  {
    "url": "https://medium.com/better-marketing/10-websites-that-pay-you-for-your-writing-241e455ac262?source=extreme_main_feed---------6-73--------------------cffe8790_6a52_48ad_a9c0_82055b0031b6-------",
    "title": "10 Websites That Pay You for Your Writing",
    "publish_date": "2020-10-13 20:26:49",
    "authors": [
      "Maryam Merchant"
    ],
    "summary": "10 Websites That Pay You for Your WritingWrite articles and get paid for your writingPhoto by Daria Shevtsova from PexelsAs a writer, we can’t always rely on one platform.\nAs every article I read about writing from top writers of Medium says, don’t put all eggs in one basket.\nIt means we need to look for other freelance writing platforms as well.\nSo if you want writing as a career or as a side hustle, then you need to mold yourself and, side by side, start looking at other freelance writing gigs that pay you.\nBut I still want to try something outside of this platform, so I found these ten websites that pay a writer for writing articles.",
    "text": "10 Websites That Pay You for Your Writing\n\nWrite articles and get paid for your writing\n\nPhoto by Daria Shevtsova from Pexels\n\nAs a writer, we can’t always rely on one platform. We all want to surf and get used to the competitive world. As every article I read about writing from top writers of Medium says, don’t put all eggs in one basket.\n\nIt means we need to look for other freelance writing platforms as well. So if you want writing as a career or as a side hustle, then you need to mold yourself and, side by side, start looking at other freelance writing gigs that pay you.\n\nAs a newbie, I found Medium two months back, and it’s one of the best platforms, which I am in love with. But I still want to try something outside of this platform, so I found these ten websites that pay a writer for writing articles. I just want to help you with that.",
    "keywords": [
      "articles",
      "platforms",
      "medium",
      "platform",
      "writing",
      "need",
      "freelance",
      "pay",
      "writer",
      "websites"
    ]
  },
  {
    "url": "https://medium.com/in-fitness-and-in-health/why-you-should-eat-oatmeal-at-least-once-a-week-9e6c1feadad9?source=extreme_main_feed---------9-73--------------------cffe8790_6a52_48ad_a9c0_82055b0031b6-------",
    "title": "Why You Should Eat Oatmeal at Least Once a Week",
    "publish_date": "2020-10-12 14:55:31",
    "authors": [
      "Alyssa Atkinson"
    ],
    "summary": "Why You Should Eat Oatmeal at Least Once a WeekAnd how to make it taste incrediblePhoto by Ellieelien on UnsplashIf there’s one controversial statement about food, it’s this: breakfast is superior to all other meals.\nAfter all, the options are endless — pancakes, waffles, cereal, peanut butter toast, bagels, cinnamon rolls, and of course, oatmeal.\nIn fact, when I was in college, one of my campus dining halls served breakfast all day every single day.\nYet, I felt it was worth it to make the trek so I could eat my favorite breakfast foods whenever I wanted.\nAnd despite the wide variety of breakfast foods I consume every single week, there is one that I consume almost every morning, and it’s a staple that you should be eating as well.",
    "text": "Why You Should Eat Oatmeal at Least Once a Week\n\nAnd how to make it taste incredible\n\nPhoto by Ellieelien on Unsplash\n\nIf there’s one controversial statement about food, it’s this: breakfast is superior to all other meals.\n\nWe’ve heard time and time again that breakfast is the most important meal of the day, and that it’s absolutely crucial if you want to maintain a healthy weight. However, evidence such as the following cited in Time Magazine:\n\n“has found no strong connection between breakfast and weight loss.”\n\nEven so, I can confidently say that breakfast is indeed my favorite meal, and I’m not one to skip it. After all, the options are endless — pancakes, waffles, cereal, peanut butter toast, bagels, cinnamon rolls, and of course, oatmeal.\n\nIn fact, when I was in college, one of my campus dining halls served breakfast all day every single day. The walk to that building from my dorm room was 15 minutes further than the other dining hall which was practically right outside my door. Yet, I felt it was worth it to make the trek so I could eat my favorite breakfast foods whenever I wanted.\n\nAnd despite the wide variety of breakfast foods I consume every single week, there is one that I consume almost every morning, and it’s a staple that you should be eating as well.\n\nThe powerhouse I’m referring to is oatmeal. It’s the meal I’ve been eating for years that’s inexpensive, offers a number of mindblowing health benefits, and is incredibly delicious if you know how to make it right.\n\nHere’s why you should add it to your meal plan, and how to dress it up for optimal flavor.",
    "keywords": [
      "week",
      "day",
      "eating",
      "im",
      "meal",
      "favorite",
      "single",
      "foods",
      "oatmeal",
      "breakfast",
      "weight",
      "eat"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------6632b75d_8a8e_4b4c_ba7c_a082f0298e90-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------6632b75d_8a8e_4b4c_ba7c_a082f0298e90-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------6632b75d_8a8e_4b4c_ba7c_a082f0298e90-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------6632b75d_8a8e_4b4c_ba7c_a082f0298e90-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------6632b75d_8a8e_4b4c_ba7c_a082f0298e90-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://gen.medium.com/2020-has-been-bad-but-things-are-going-to-get-worse-2e083903b0f4?source=extreme_main_feed---------0-74--------------------bd28317f_2913_4cdb_bd83_5a46b863fda1-------",
    "title": "2020 Has Been Bad. But Things Are Going to Get Worse.",
    "publish_date": "2020-10-15 16:16:45",
    "authors": [
      "Colin Horgan"
    ],
    "summary": "2020 Has Been Bad.\nBut Things Are Going to Get Worse.\nThe pandemic revealed our society’s failings.\nPhoto: Markus Spiske/UnsplashEarlier in 2020, as the lockdowns arrived, time started to feel warped.\nDisparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.",
    "text": "2020 Has Been Bad. But Things Are Going to Get Worse.\n\nThe pandemic revealed our society’s failings. We’re running out of time to fix them.\n\nPhoto: Markus Spiske/Unsplash\n\nEarlier in 2020, as the lockdowns arrived, time started to feel warped. We began to ask ourselves whether we were living in the past or the present or whether we were caught somewhere in between. This feeling of inertia was a function of recognizing a time lag between when the virus arrived and when we realized it was here.\n\nThe coronavirus case counts we saw updated every morning were already history — reality as it was two weeks prior. What was happening had already happened but also had not happened yet. Gradually, as the weeks and months followed, we learned more about the virus, including how long it had actually been around us — as well as how unprepared our society and our systems were for its arrival.\n\nThe pandemic has proven to be a clarifying force. While it will likely change some aspects of our society, before it does, it is first revealing what kind of a society we already had: one that is teetering on decaying foundations that have either gone unseen or have been deliberately ignored for decades.\n\nIn nearly every Western democracy it has hit, the pandemic has disproportionately affected people of color, the poor, and the elderly. Sometimes, like in the U.S., it’s hit them all. In short, the virus has shown us where our most egregious inequalities lie. Disparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.\n\nWe are living on a neglected structure, poorly constructed decades ago and then left largely unchecked. Even when we had the chance, after its near-collapse in 2008, to reassess the system, we didn’t bother and instead were steered for another decade in an ideological vacuum, maybe the last true product of late capitalist boredom. This long-standing failure to account for the obvious disparities at the heart of our society is probably why the pandemic will likely create a so-called K-shaped recession — one wherein “big companies and rich families have largely recovered, whereas mom-and-pops and the moms and pops who run them are living through a second Great Depression,” as Annie Lowrey wrote recently at The Atlantic.\n\nWe live every day under a looming sense of delayed inevitability. How long can it go on?\n\nThe mechanisms we have that ought to help us address those disparities, like politics, law, or journalism, have also been revealed to be heavily damaged. Our democracies are stressed, not from external enemies as much as from internal rot. Rebuilding them would require us to inhabit a shared reality. Thanks somewhat to our current acoustic information sphere dominated by platforms of fantasy, we don’t have one.\n\nThat lag time we noticed in the spring now feels more familiar, if not constant. We live every day under a looming sense of delayed inevitability. How long can it go on?",
    "keywords": [
      "bad",
      "2020",
      "long",
      "revealed",
      "disparities",
      "pandemic",
      "living",
      "going",
      "worse",
      "weeks",
      "virus",
      "society",
      "things",
      "sense"
    ]
  },
  {
    "url": "https://gen.medium.com/amy-coney-barretts-confirmation-could-cause-a-right-to-privacy-domino-effect-e0e721c2c36a?source=extreme_main_feed---------1-74--------------------bd28317f_2913_4cdb_bd83_5a46b863fda1-------",
    "title": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect",
    "publish_date": "2020-10-15 18:07:16",
    "authors": [
      "Jill Filipovic"
    ],
    "summary": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino EffectIf there’s no right to privacy, a whole line of rulings goes out the windowAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation.\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion.\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\nIf Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it.",
    "text": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect\n\nIf there’s no right to privacy, a whole line of rulings goes out the window\n\nAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation. Photo: Pool/Getty Images\n\nIf there is one stunningly clear takeaway from the hearings to confirm Amy Coney Barrett to the Supreme Court, it’s this: Enjoy your rights to bodily sovereignty and sexual privacy while you have them. Because if Barrett is confirmed to the Supreme Court, they may not last long.\n\nSupreme Court confirmation hearings are often farcical displays. A nominee, chosen from among the finest legal minds in the land and auditioning for a job to write legal opinions that have the power to profoundly shape Americans’ lives, sits before the Senate Judiciary Committee and purports to have few opinions at all on the cases and issues that are the most controversial and oft-discussed inside the legal academy and out of it. But Barrett brings the dissembling and disingenuous refusal to answer direct questions to a new level. No Supreme Court nominee in memory has been so evasive. And where Barrett hedges the most are the biggest tells: on the Affordable Care Act, on presidential powers in elections, and on reproductive rights and sexual privacy.\n\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion. She has said so herself, joining the “pro-life” faculty group at Notre Dame Law School, and signing an ad that said, “It’s time to put an end to the barbaric legacy of Roe v. Wade and restore laws that protect the lives of unborn children.” That isn’t a statement of a personal view; that’s a demand for the courts to act. And if confirmed, Barrett will be one of the nine people in the country with the power to do what the letter she signed demands.\n\nShe has already shown us her intentions. President Donald Trump believes her. Senate Republicans believe her. We should believe her, too.\n\nDiscerning what Barrett will do if she is elevated to the court is made a little more complicated by the fact that Barrett suddenly refuses to speak about her views at all. Neither she nor the president nor her Republican proponents in the Senate want her to be too transparent on the abortion question. Roe v. Wade is, after all, the law of the land, and most Americans do not want it overturned. The election concludes in just 20 days — a clear argument against holding these hearings now, but one Republicans have disregarded. If Barrett answers honestly in the confirmation hearings — if she says that she believes Roe was wrongly decided — then Republicans are going to face a lot of demands to vote no on her confirmation, and have a lot of angry voters on their hands.\n\nAnd so instead, we are treated to this joke of a hearing, where we all pretend that Barrett doesn’t believe exactly what she has repeatedly said she believes.\n\nBarrett is not the first Supreme Court nominee to dodge the abortion question. But she is even less committal than most. Ruth Bader Ginsburg answered clearly in her confirmation hearings that she believes Roe was rightly decided; Sonia Sotomayor agreed that Roe was settled law. Barrett won’t do that.\n\nTo add insult to injury, Senate Republicans (and a few Democrats) have spent precious minutes fawning over Barrett’s family and her ability to have both a career and a large family, something men have done for centuries without much comment. Over and over, conservative senators called Barrett a role model or an inspiration for girls and women (as if boys and men can’t look up to a woman). There is something particularly pernicious about demanding that women laud Barrett, a woman more in the mold of anti-feminist Phyllis Schlafly than women’s rights trailblazer Ruth Bader Ginsburg, as an icon of female accomplishment and professional possibility. It’s no coincidence that in the wake of Roe v. Wade and earlier cases establishing a right to contraception access, American women surged toward greater independence, going to college and into the workforce in record numbers. The lessons of safe abortion and readily available contraception reverberate around the world: When women can plan their families, women thrive. We live longer. We are far less likely to die in childbirth, and our children are less likely to die, too. We are more likely to go to school; so are our daughters. We are less likely to be trapped in abusive relationships, and less likely to be stuck in poverty. Our families are more prosperous. Our communities are healthier.\n\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\n\nFeminists have fought long and hard for these rights — including for the right of women to choose to have large families, as Barrett has, even if they are not worth nearly $2.6 million, as Barrett is, but are instead struggling to keep their children safe and secure. Republicans and conservatives like Barrett have cheered on large (white) families, while refusing to do much of anything to help out when families struggle. Feminists have tried to clear the way for women to make their own reproductive choices — to have children or not, without state interference or professional discrimination. Barrett has benefited from that feminist work, which is why she is now in a position to undermine it. Being told that feminists and women generally should appreciate that and admire her is a hard pill to swallow.\n\nBarrett won’t be the first anti-abortion judge on the court (although if Republicans are looking for firsts, she would be the first staunchly anti-abortion woman). But her hostility to reproductive rights extends far beyond Roe and the right to abortion. In the hearings, Barrett couldn’t answer whether she believed Griswold v. Connecticut, the case that extended contraception access to married women, was rightly decided. We know that her mentor, Antonin Scalia, believed Griswold was indeed decided wrongly, and given the chance, would likely have overturned it. We know Barrett has said that, while she is her own woman, she believes Scalia got most of his decisions right. While Roe gets a lot of press, Griswold is at the heart of many of the court’s most significant decisions — it was the first case that fully laid out the right to sexual privacy, which has been understood since then to include the right of any woman to use contraception and have an abortion; the right of people of the same sex to have consensual intercourse; and the right of individuals to marry someone of the same sex. If Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\n\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it. And she’s right that it’s been a while since states have criminalized contraception. But they haven’t done that because abortion rights and Roe have taken the bulk of the focus of the anti-abortion movement. It’s worth noting, though, that most mainstream anti-abortion groups do not support contraception access; some are publicly opposed to it, and some falsely characterize common contraceptive methods as “abortifacients.” These same groups have pushed legislation that establishes personhood at the moment of conception, something at odds with the medical definition of pregnancy, but that could outlaw several of the most common and effective forms of birth control and even criminalize in-vitro fertilization. That’s all very far from an academic exercise. It is not “unthinkable.” It is, in fact, part of a well-thought-out plan. If Roe is overturned, there’s little to stop conservative groups from pressing forward and coming for contraception next — or marriage equality, or the right to have consensual intercourse with an adult of the same sex.\n\nThe message from Barrett’s confirmation hearing was clear: This is all on the line. She does not believe there is a constitutional right to sexual privacy. The question is whether the weight of the precedent — dozens of cases over five decades, millions of Americans who rely on what they believe to be their right to use contraception, end unwanted or dangerous pregnancies, have sex, and get married — will be enough to tip Barrett’s originalist scales toward upholding the law as it stands.\n\nBarrett showed us who she is: a woman who will not affirm even the least contested rights to sexual privacy and family planning. Which means even the least contested of those rights could be up for grabs with Barrett on the Supreme Court.",
    "keywords": [
      "barretts",
      "women",
      "confirmation",
      "effect",
      "cause",
      "barrett",
      "court",
      "griswold",
      "domino",
      "privacy",
      "rights",
      "amy",
      "coney",
      "hearings",
      "contraception",
      "right",
      "roe"
    ]
  },
  {
    "url": "https://elemental.medium.com/my-therapist-says-all-relationships-are-impossible-d4c61f7df249?source=extreme_main_feed---------2-74--------------------bd28317f_2913_4cdb_bd83_5a46b863fda1-------",
    "title": "My Therapist Says All Relationships Are Impossible",
    "publish_date": "2020-10-14 05:32:29",
    "authors": [
      "Naveen Kumar"
    ],
    "summary": "My Therapist Says All Relationships Are ImpossibleIt’s okay to lose a friendshipThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement.\nMy therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!).\nMy therapist put it bluntly: “All relationships are impossible.”All relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\nLabels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\nThis type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences.",
    "text": "My Therapist Says All Relationships Are Impossible\n\nIt’s okay to lose a friendship\n\nThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement. In the decade we’ve known each other, I had always felt comfortable talking to him about my own experience of otherness as an Indian American. But when I pointed to his whiteness as a privilege he ought to examine, he grew defensive, blew up, and ghosted.\n\nI’m not someone who falls out with friends easily or often. The few times it has happened, my instinct is to ask, “How did I get myself into this?” or “Why didn’t I see this coming?”\n\nWhen any situation in my life goes awry, I tend to perseverate, fixating on how I might have caused it to fly off the rails. “Am I a bad judge of character?” I think. My therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!). But when it comes to the shock of a breakup, whether with a friend or a romantic partner, it’s the fantasy that we can ever fully know someone, or achieve a kind of perfect unity that’s to blame.\n\nMy therapist put it bluntly: “All relationships are impossible.”\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\nHis statement was one of those breakthrough moments when my jaw dropped and I felt an immediate sense of relief. The existentialism of it thrilled me, and its practical application made perfect sense. In every relationship, there will always come a conflict (likely many over time) that indicates an unbridgeable distance between two people. Labels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\n“A lot of the things that the world tells us about what a relationship is supposed to be present an ideal that everyone feels they’re failing to live up to,” says Jamieson Webster, PhD, a psychoanalyst in New York City and author of Conversion Disorder: Listening to the Body in Psychoanalysis. It’s not just that the messages we get from pop culture, about fairy tale romance and lifelong BFFs, are unrealistic. The very idea that any relationship, no matter how close, can make us less alone or separate from each other is perhaps the ultimate human fantasy.\n\n“Separation and difference are very hard, including the capacity to understand being alone,” Webster says. “There is so much fantasy that tries to cover over ‘aloneness,’ which is simply a factual reality.”\n\nWhen we’re able to more clearly understand our innate separateness, we can also more readily accept that personal differences are bound to arise in every relationship. The question then becomes how two people acknowledge the essential distance between them, communicate their feelings about it, and reach a mutual resolution that doesn’t attempt to paper over it. Sometimes it’s possible to bridge the gap and continue forward together; in other cases, it may be time to move on. “Whether with a friend or a partner, it’s about what you build on the basis of your differences,” Webster says. “Because you are two unique people with different histories and different pleasures and pains.”\n\nRecognizing the impossibility of a “perfect” relationship is also useful when we seek to build new ones. While swiping through dating profiles, for example, it’s easy to point to a picture you don’t particularly like or the fact that someone prefers cats over dogs as reasons why it would never work out. This type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences. How many potential connections have we cut off at the pass due to preconceived notions of compatibility?\n\nBreakups are hard, even and especially with close friends. But they’re also the surest way to recognize, and even honor, the truth of our individuality. “Breakups really propel people forward in terms of their development,” Webster says. “Whether it’s with friends or partners, a breakup is a time to recover yourself and find your separateness,” something you may have been struggling to find inside the relationship. That doesn’t mean we shouldn’t allow ourselves to feel hurt and disappointed, or take responsibility for our role in the process. But rather than frame a breakup as a personal failure, we can acknowledge it as a reflection of one of life’s most essential truths.",
    "keywords": [
      "differences",
      "partner",
      "therapist",
      "fantasy",
      "impossible",
      "friend",
      "relationship",
      "webster",
      "friends",
      "relationships",
      "perfect"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------bd28317f_2913_4cdb_bd83_5a46b863fda1-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/fearless-she-wrote/we-should-be-ashamed-of-the-sexism-surrounding-the-murder-of-shanann-watts-904bc0fc0ef9?source=extreme_main_feed---------4-73--------------------bd28317f_2913_4cdb_bd83_5a46b863fda1-------",
    "title": "We Should Be Ashamed of the Sexism Surrounding the Murder of Shanann Watts",
    "publish_date": "2020-10-13 16:37:33",
    "authors": [
      "Laura Fox"
    ],
    "summary": "We Should Be Ashamed of the Sexism Surrounding the Murder of Shanann WattsA pregnant woman was murdered by her husband.\nThe documentary is narrated by the victim Shanann Watts using audio and footage from her Facebook live streams.\nAny footage of her husband and murderer, Chris Watts, is from police body cams, cameras in the police interview rooms, and courtroom footage.\nChris Watts, husband of Shanann and father to Bella, Celeste, and Nico, eventually confessed to their murders, but not before trying to pin the blame on Shanann.\nWhy does a female murder victim have to be “perfect” in order to receive compassion?",
    "text": "We Should Be Ashamed of the Sexism Surrounding the Murder of Shanann Watts\n\nA pregnant woman was murdered by her husband. He went on to murder their two children. But somehow, she “drove him to it.”\n\nThe home of Shanann and where she was murdered. Image licensed for commercial use.\n\nSocial media has been buzzing with people’s reaction to the Netflix documentary American Murder: The Family Next Door. What sets this documentary apart from traditional murder documentaries is that it centers the victims in the story rather than the murderer. The documentary is narrated by the victim Shanann Watts using audio and footage from her Facebook live streams. Any footage of her husband and murderer, Chris Watts, is from police body cams, cameras in the police interview rooms, and courtroom footage.\n\nThe murder took place on August 13th, 2018. Shanann, who was pregnant at the time with a baby boy called Nico, was reported missing along with her two children, Bella,4, and Celeste, 3. Chris Watts, husband of Shanann and father to Bella, Celeste, and Nico, eventually confessed to their murders, but not before trying to pin the blame on Shanann. He insisted in police interviews that Shanann was the one who had killed their daughters and he killed her in retaliation.\n\nChris did not fully admit to what he had done until November 6th, 2018. In that time, social media was filled with people scrutinising Shanann’s Facebook page. Her parenting was criticised along with her personality. And despite the fact Chris would eventually admit that Shanann had not hurt their daughters, the internet still critcised her and tried to find ways of blaming her for Chris’s actions.\n\nI watched the documentary and found it impossible to hold back tears. Audio recordings were played of people calling her crazy, bossy, and highly strung. She was even called a bitch and people suggested she drove Chris to murder her and their children.\n\nThe public’s treatment of Shanann was disappointing, but not surprising. It’s true that Shanann seemed like the highly-strung one in the relationship. In one of her Facebook livestreams that was played in the documentary, she described herself as the more dominant one in the relationship and liked things a certain way.\n\nSomeone with these personality traits can be annoying sometimes. Shanann herself seemed aware of this. But do women deserve to be murdered for being bossy? No. Absolutely not. And the fact people were suggesting this was okay is extremely sexist.\n\nI can’t help but feel that if Shanann had been a man with these personality traits, she would have been seen as ambitious, hardworking, assertive, and the leader of her family. But because she was a woman, these traits were labeled as bossy, highly strung, and crazy.\n\nVictim blaming women is nothing new\n\nThe hashtag #iwasblamed was trending on Twitter earlier this year in response to an article where Sabrina Lekaj, who was stabbed to death, was painted in a negative light. Her murderer, Petrit Lekaj, was painted in a more favourable light as a father who was concerned about his daughter’s drinking, partying, and drug-taking. These are some of the tweets from people who have experienced victim-blaming for being women on the receiving end of male perpetrators:\n\n#iwasblamed I was told I was a slut, a home wrecker, a whore, a baby killer who didn’t deserve to live. I was 15 and had been sexually abused by a friends step dad. He also made me have an illegal abortion. Then the media said we had an affair and I was his “lover” I was 15. My abuser tried to kill me then shot himself. He was called lovesick and I was a heartbreaker. I was 21 #iwasblamed #iwasblamed for being beaten by my brother and almost killed by my father. My extended family all took the side of the guilty parties, despite the extent of the damage done to me. It always seemed as though the men in my family could do no wrong. #iwasblamed by the media for my 22 year old abusers suicide after I spoke to the police. .. I was 14 and quoted as his “girlfriend” in the subheading\n\nOther women have been blamed for the actions of their murderers\n\nMuch like how Shanann was blamed for her own murder, Tatyana Strakhova was vilified on social media after she was raped and murdered by her roommate. Her rapist and murderer killed himself, and as a result, Tatyana’s Instagram was filled with comments blaming her.\n\nOne opinion piece published by Dni.ru said that she “wasn’t as innocent as it might seem at first glance.” The piece featured photos from Strakhova’s social media accounts of her drinking or posing in sexually suggestive positions.\n\nThey Blamed A Victim For Her Own Murder. Here’s How Women Are Responding by Otillia Steadman of Buzzfeed News.\n\nSimilarly, Grace Millane was blamed for her own murder due to her sexual history of having a preference for BDSM. The media reporting of her murder was met with outrage and exposed a disturbing historical trend of women being blamed for not being the “perfect victim.” According to theconversation.com, this attitude can be traced as far back to the response to the murders of Jack the Ripper.\n\nIt has been argued by several feminist historians, that the whole grand narrative of the Whitechapel Murders is held aloft to all women — as a warning of what may happen should they breach their prescribed gendered limits of domesticity, geography and sexuality.\n\n‘Jack the Ripper’ was a serial killer who disemboweled women — we need to stop celebrating that by Charlotte Mallinson\n\nWhy did it take a documentary to evoke compassion towards Shanann?\n\nSince the documentary aired, I feel like I know Shanann and her children. The documentary sets an example for other murder documentaries as it gives the victims a voice. Due to its format, many people seem to feel the same way as I do and are largely in support of Shanann. Her Facebook page is filled with comments of love and support towards her. On photos of her and Chris, members of the public have commented to condemn his actions.\n\nMost victims don’t get to have their voices heard. And it’s sad that it took a Netflix documentary to evoke some compassion and understanding towards Shanann. Why does a female murder victim have to be “perfect” in order to receive compassion? And why is it when they do fit the bill of “perfect victim”, people desperately try to find reasons as to how they drove their male attacker to harm them?\n\nShanann was popular and thought of as a loving wife and mother, yet people were determined to find ways they could justify what happened to her. The psychology of victim-blaming explains that people do this because we want to believe that something unthinkable doesn’t just happen to anyone. We want to believe that we would have been more careful and done things differently so we can convince ourselves it would never happen to us.\n\nBut in reality, anyone can be a victim. Even people who are flawed and made choices many may not agree with. They are still a victim and their personal history or character flaws do not reduce the severity of the crime committed against them.\n\nSoon the buzz of this documentary will die down. Another woman will be murdered by a man and we will try to find ways to explain how she drove him to it. Or we could remember Shanann and pay tribute to her, and the many women who have been murdered and blamed before her, by learning from this shameful behaviour. History doesn’t have to repeat itself.\n\nWhether women are bossy, highly-strung, or even “crazy” or “bitches”, they do not deserve to be murdered. It’s shameful that has to be said.",
    "keywords": [
      "shanann",
      "women",
      "ashamed",
      "murdered",
      "surrounding",
      "sexism",
      "victim",
      "media",
      "murderer",
      "blamed",
      "murder",
      "watts",
      "chris",
      "documentary"
    ]
  },
  {
    "url": "https://towardsdatascience.com/real-time-time-series-anomaly-detection-981cf1e1ca13?source=extreme_main_feed---------5-73--------------------bd28317f_2913_4cdb_bd83_5a46b863fda1-------",
    "title": "Real-Time Time Series Anomaly Detection",
    "publish_date": "2020-10-14 14:31:51",
    "authors": [
      "Marco Cerliani"
    ],
    "summary": "In this post, we explore different anomaly detection approaches that can scale on a big data source in real-time.\nTsmoothie is a python library for time series smoothing and outlier detection that can handle multiple series in a vectorized way.\nThe convolutional smoother uses weights generated using predefined windows function (linear, hanning, hamming, bartlett, blackman).\nThe exponential smoother uses weights generated with an exponential function.\nRespectively, two different data structures are taken into account: random walks series and seasonal series with no trend.",
    "text": "As much as it has become easier over the years to collect vast amounts of data across different sources, companies need to ensure that the data they’re gathering can bring value. To aid insight collection from the data, machine learning and analytics have become trending tools. Since these domains require real-time insights, an abundance of unwelcome data can create real issues.\n\nBefore decisions are made, and critically, before actions are taken, we must ask: are there anomalies in our data that could skew the results of the algorithmic analysis? If anomalies do exist, it is critical that we automatically detect and mitigate their influence. This ensures that we get the most accurate results possible before taking action.\n\nIn this post, we explore different anomaly detection approaches that can scale on a big data source in real-time. The tsmoothie package can help us to carry out this task. Tsmoothie is a python library for time series smoothing and outlier detection that can handle multiple series in a vectorized way. It’s useful because it can provide the techniques we needed to monitor sensors over time.\n\nTYPES OF ANOMALIES\n\nFirst, let’s define anomalies. They can be anything that is different or abnormal and deviates substantially from other data in the sample or historical data.\n\nAnomalies are often divided into point and pattern anomalies. Point anomalies are single instances of something abnormal, while pattern anomalies represent clusters of data that are abnormal.\n\nIn most of the case, some point anomalies may seem like a case of bad luck. With a pattern anomaly instead, the data creates a pattern that looks very different from normal. Pattern anomalies are more difficult to detect because we must first be able to define a normal pattern, and then we could need more data to be able to classify that this pattern is anomalous compared to historical activity.\n\nBelow we present different simulated scenarios, where we apply different techniques suitable for anomaly detection. Their adoption is domain-related and they are all based on simple assumptions. This simplicity is fundamental in all the tasks where we have a lack of information or in the presence of a little amount of data.\n\nPOINT ANOMALIES\n\nOur aim here is to detect data points that deviate so much from others. This arouses suspicions that the points were generated by a different mechanism.\n\nTwo different algorithms are used: a convolutional smoother and an exponential smoother. Both smooth the received signals using a sliding window approach. The convolution approach uses a discrete linear convolution while the exponential one uses an exponentially weighted convolution. Convolution is a mathematical operation that could be described as the integral of the product of two sequences: the raw signal and the weights. The convolutional smoother uses weights generated using predefined windows function (linear, hanning, hamming, bartlett, blackman). In the case of linear type, the weights are all the same and equal to one. This makes the operation equal to a moving average. The exponential smoother uses weights generated with an exponential function. As result, the most recent observations weight the most when computing the smoothing.\n\nRespectively, two different data structures are taken into account: random walks series and seasonal series with no trend.",
    "keywords": [
      "detection",
      "anomaly",
      "anomalies",
      "weights",
      "uses",
      "pattern",
      "convolution",
      "exponential",
      "smoother",
      "different",
      "realtime",
      "data",
      "series"
    ]
  },
  {
    "url": "https://towardsdatascience.com/25-lesser-known-java-libraries-you-should-try-ff8abd354a94?source=extreme_main_feed---------6-73--------------------bd28317f_2913_4cdb_bd83_5a46b863fda1-------",
    "title": "25 lesser-known Java libraries you should try in 2020",
    "publish_date": "2020-10-07 22:09:24",
    "authors": [
      "Md Kamaruzzaman"
    ],
    "summary": "JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape.\nIn enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform.\nWiremockHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development.\nLink:ConclusionIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries.\nThere are many excellent Java libraries that I have not listed here but worth a try.",
    "text": "1. RxJava\n\nReactive Extensions (ReactiveX) is a popular software development paradigm to deal with asynchronous and event-driven programming. RxJava is the Java VM implementations of the Reactive Extensions by using Observables. It extends the Observer Pattern to support event-driven programming by adding composable operators on a sequence of events/data in a declarative way. It also hides the low-level complexities like threading, thread-safety, synchronization, and concurrent data structure.\n\nIf you want to do reactive programming in Java, it is a must-have library.\n\nLink:\n\n2. OkHttp\n\nHTTP is by far the most used Application layer protocol. There are many excellent Java-based HTTP client libraries out there. But OkHttp is the simplest yet powerful HTTP client library in the JVM. It offers fluent and clean API to develop HTTP client in Java.\n\nIt also supports some advanced features: Connection pooling, GZIP shrink, response caching, modern TLS features, and many more.\n\nLink:\n\n3. MyBatis\n\nIn most Software development projects, we need to store data. Although there are many types of data storage, SQL is still the most used data storage type. As a Java developer, we need to match our Java object to the SQL table. One way to achieve the mapping is to use ORM (e.g., Hibernate). But there are many use cases when you want to have full control over the Object-Table mapping (e.g., Performance). In those cases, you can directly use JDBC and write the SQL query. The other way is to use MyBatis to map Java Object to Stored Procedure or SQL statements. It offers both annotation-based or XML descriptor based mapping.\n\nI prefer MyBatis over plain JDBC, especially in larger projects, as it improves the separation of concerns.\n\nLink:\n\n4. HikariCP\n\nHikariCP is the second library in this list related to Database. Establishing a JDBC connection is resource expensive. If you create a new connection every time you access the Database and close it once you are done, it can severely impact your application performance. Not to mention that failure to close the connection properly or allowing limitless database connection can crash your application.\n\nUsing Connection Pooling means connections are reused rather than created each time a connection is requested. HikariCP is a very fast yet lightweight Database connection pooling in JVM. It is also very reliable and a “zero-overhead” JDBC connection pool.\n\nLink:\n\n5. Lombok\n\nIn modern days, Java is often criticized as a verbose and bloated programming language. Compared to other popular languages (JavaScript, Python, Scala, Kotlin), a developer needs to write lots of boilerplate code in Java. Although Java has introduced Records in JDK 15 to reduce boilerplate code in Java, it is not an LTS release. Fortunately, a library can already reduce your boilerplate code in Java significantly: Project Lombok. You can generate getters, setters, hashcode, equals, toString, Builder classes by adding a few annotations. Additionally, it offers null pointer check, logger, and many more.\n\nLink:\n\n6. VAVR\n\nJava finally released the much-awaited functional programming via Lambda and Streaming in version 8. If you are used to functional programming or want to dive deep into functional programming, you may find Java’s functional programming wanting. Compared to many other functional programming languages (Haskell, Scala), Java is pale. VAVR is a library that can fill the gap of the functional programming features in Java. It provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nLink:\n\n7. Gson\n\nOver the years, JSON has become the de-facto data exchange format. In Java, there also exist several excellent libraries to deal with JSON. One of them is Jackson, which I have covered in my previous article. The other excellent library is Google’s Gson. Unlike Jackson, it is a minimalistic library and only supports JSON. It offers Data Binding, extensive Generic support, flexible customization. One of the major advantage (or disadvantage depending on your liking) of Gson is that it does not need annotation.\n\nLink:\n\n8. jsoup\n\nIf you are developing your application in Java and need to deal with HTML, you should use jsoup. It is a Java library to work with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data. It implements the WHATWG HTML5 specification and parses HTML using the best of HTML5 DOM methods. It supports parsing HTML from URL/string, find and extract data, manipulate the HTML elements, clean HTML, output HTML.\n\nLink:\n\n9. JIB\n\nIf you are working on an enterprise-grade application, it should be at least Cloud-ready. The first step to make your application cloud-ready is to containerize your application, i.e., put your artifactory binary into Docker image. Dockerizing a Java application is a bit tedious work: you need to have deep knowledge of Docker, you need to create a Dockerfile, and you will need Docker Daemon. Fortunately for the Java developers, Google has created an Open-source Java containerizer using already existing tools. You can use JIB as a Java library to build an optimized Docker and OCI image.\n\nLink\n\n10. Tink\n\nTink is yet another handy Java library in this list from Google. Cryptography and security are becoming increasingly more important in Software Development. Cryptographic techniques are used to secure user data. Implementing cryptography correctly requires a lot of expertise and effort. A group of Cryptographers and security engineers in Google has written the multi-language cryptographic library Tink. It offers easy-to-use but hard to misuse security API. Tink offers cryptographic functionalities via different primitives. It provides symmetric key encryption, streaming symmetric key encryption, deterministic symmetric key encryption, digital signature, hybrid encryption, and many other encryption functionalities.\n\nLink:\n\n11. Webmagic\n\nIf you work on Web crawling, you can write your own crawler, which is time-consuming and tedious. In Java, Webmagic is an excellent Web crawler library that covers the complete life-cycle of crawler: downloading, URL management, content extraction, persistence. It offers a simple yet flexible core, Annotation support, multi-threaded, and easy-to-use API.\n\nLink:\n\n12. ANTLR 4\n\nIf you work on parsing and processing data, then the ANTLR library could be handy. It is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It does this by giving us access to language processing primitives like lexers, grammars, parsers, and the runtime to process text against them.\n\nIt’s often used to build tools and frameworks.\n\nLink:\n\n13. Caffeine\n\nIf your application is read-heavy, then caching can dramatically improve your application’s data access performance. Java has many great caching libraries. Caffeine is the best among the lot. It is a high-performance, near-optimal caching library based on Java. It offers a fluent caching API and some advanced features like asynchronous loading of entries, asynchronous refresh, weak referenced keys, etc.\n\nLink:\n\n14. Metrics\n\nOnce your Java application runs into production, you will want to have insight into your application's critical components. Metrics from the Dropwizard framework is a simple yet compelling Java library that provides insight into your application and JVMs KPI, e.g., rate of events, pending jobs, service health check, and more. It is modular and offers modules for other libraries/frameworks.\n\nLink:\n\n15. gRPC-Java\n\nGoogle has created gRPC as a modern Remote Procedure Call system in 2015. Since then, gRPC became extremely popular and one of the most used RPC system in modern software development. The library gRPC-Java is the Java implementation of the gRPC client. If you want to use gRPC in Java, then this library can be handy for you.\n\nLink:\n\n16. Java WebSocket\n\nTraditional Client-Server communications unidirectional. WebSocket is a bi-directional communication protocol over a single TCP connection. Java WebSocket is a barebone WebSocket server and client implementation in Java. If you are a Java developer and want to work with WebSocket, this library is highly recommended.\n\nLink:\n\n17. JJWT\n\nJSON Web Token (JWT) is the de-facto Authorization and secure Information exchange format in modern software development. Whether you are using a simple session-based Authorization or highly advanced OAuth2 based Authorization, you will probably use JWT. JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape. It is fully RFC specification compliant on all implemented functionality. It supports readable and convenient fluent API.\n\nLink:\n\n18. Swagger-Core\n\nOpenAPI is the specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. Swagger-Core is the Java implementation of the OpenAPI specification. If you are exposing REST API in your Java/JavaEE application, you can automatically provide and expose your API definitions using Swagger-Core.\n\nLink:\n\n19. Async Http Client\n\nAsynchronous programming is becoming increasingly popular of late because of its non-blocking nature. Most of the popular Java HTTP client libraries offer limited to no asynchronous HTTP response processing. Async Http Client is a popular Java library that offers asynchronous HTTP response processing. As a bonus feature, this library also supports the WebSocket protocol.\n\nLink:\n\n20. Liquibase\n\nAs a software developer, we all know the importance of version control, DevOps, and CI/CD of our code. In a blog post: Evolutionary Database Design, the great Martin Fowler argued that we also need version control and CI/CD of our code. Liquibase is a tool that supports tracking, version controlling, and deployment of SQL database changes in Java Applications. If you are working with an SQL database where the database is evolving, this tool can greatly simplify your database migration.\n\nLink:\n\n21. Springfox\n\nI have already listed Swagger-Core in this list, which can automatically generate REST API documentation for vanilla Java or Java EE application. In enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform. In Spring-based Java applications, the Springfox library can automatically generate REST API documentation from the source code.\n\nLink:\n\n22. JavaCV\n\nOpenCV is a computer vision and machine learning software library. It is open-source and was built to provide a common infrastructure for computer vision applications. JavaCV is a wrapper on OpenCV and many other popular libraries (FFmpeg, libdc 1394, PGR FlyCapture) in the field of computer vision. JavaCV also comes with hardware accelerated full-screen image display, easy-to-use methods to execute code in parallel on multiple cores, user-friendly geometric and the color calibration of cameras and projectors, detection and matching of feature points, and many other features.\n\nLink:\n\n23. Joda Time\n\nJava had a poor date and time functionalities in the pre-Java8 core library. Java8 released much needed advanced date and time functionalities in its java.time package. If you are working with an older version of Java (pre Java8), Joda time can provide you the advanced date and time functionalities. However, if you are working in a newer version of Java, you may not need this library.\n\nLink:\n\n24. Wiremock\n\nHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development. During the writing Unit test, it is best to focus on SUT (System Under Test) and mock the services used in the SUT. Wiremock is a simulator for REST API and enables developers to write code against an API that does not exist or incomplete. In microservice-based software development, Wiremock can significantly boost development velocity.\n\nLink:\n\n25. MapStruct\n\nIn Java application development, you often need to convert one type of POJO to another type of POJO. One way to achieve this POJO or Bean conversion is to explicitly code the transformation, which is tedious. The smart way is to use a library that is specifically developed to transform POJO/Bean. MapStruct is a code generator that implements mapping between POJO/Bean on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe, and easy to understand.\n\nLink:\n\nConclusion\n\nIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries. These libraries are not domain-specific and can help you whether you are developing Software for Business applications, Robotics, Android Apps or Personal projects. Please note that for a large and wide eco-system like Java, this list is not conclusive. There are many excellent Java libraries that I have not listed here but worth a try. But this list of libraries can provide a quick peek into the world of the Java eco-system.",
    "keywords": [
      "2020",
      "development",
      "lesserknown",
      "libraries",
      "try",
      "library",
      "25",
      "application",
      "java",
      "need",
      "offers",
      "programming",
      "software",
      "data"
    ]
  },
  {
    "url": "https://uxdesign.cc/29-of-my-favorite-websites-most-designers-have-never-heard-of-d7d99179cda7?source=extreme_main_feed---------7-73--------------------bd28317f_2913_4cdb_bd83_5a46b863fda1-------",
    "title": "29 of My Favorite Design Tools & Websites You’ve Never Heard of",
    "publish_date": "2020-10-07 15:12:18",
    "authors": [
      "Danny Sapio"
    ],
    "summary": "The design space is awash with countless design tools, plugins, websites, resources, and more promising to improve your workflow and make you a savvier designer.\nI’ve tried my hand at a lot of them over the years, but there are only a few that really stand out.\nThis list is the cream of the crop — the most obscure, creative, unique, helpful or exceptional.\nSome are fun sites to be inspired from; others are tools and resources that will absolutely make you a better designer.\nLet me know what your favorite tools are on Twitter.",
    "text": "The design space is awash with countless design tools, plugins, websites, resources, and more promising to improve your workflow and make you a savvier designer. I’ve tried my hand at a lot of them over the years, but there are only a few that really stand out.\n\nThis list is the cream of the crop — the most obscure, creative, unique, helpful or exceptional. Some are fun sites to be inspired from; others are tools and resources that will absolutely make you a better designer.\n\nI hope you enjoy! Let me know what your favorite tools are on Twitter.\n\n1. The preposterous web portal of Erik Bernacchi\n\neeerik.com",
    "keywords": [
      "stand",
      "workflow",
      "heard",
      "resources",
      "favorite",
      "tools",
      "web",
      "design",
      "unique",
      "twitter1",
      "youve",
      "tried",
      "29",
      "websites"
    ]
  },
  {
    "url": "https://medium.com/its-tinkoff/typescript-tricks-that-allow-you-to-scale-your-app-endlessly-95a0ff3d160d?source=extreme_main_feed---------8-73--------------------bd28317f_2913_4cdb_bd83_5a46b863fda1-------",
    "title": "TypeScript tricks that allow you to scale your app endlessly",
    "publish_date": "2020-10-08 12:02:05",
    "authors": [
      "Roman Sedov"
    ],
    "summary": "We collected a set of rules for more strict TypeScript.\nstrictTypeScript has a “strict” mode that is unfortunately disabled by default.\nWith “strict” mode you forget about errors like undefined is not a function or cannot read property X of null .\nIf you start a new project, enable “strict” and be happy.\ntsconfig.json filereadonlyThe next important rule for us as developers in TypeScript is using readonly everywhere.",
    "text": "We use TypeScript because it helps develop our apps safer and faster.\n\nTypeScript by default has many simplifications. They help JavaScript developers to start using it easier but they waste a lot of time in the long term.\n\nWe collected a set of rules for more strict TypeScript. You just get used to it once and save much time working with your code in the future.\n\nany\n\nThere is a simple rule that returns much profit in the long term.\n\nDo not use “any”. Ever.\n\nThere is simply no case where you cannot describe a type instead of using “any”. If you have such a situation, it can be a problem in architecture, legacy or something else.\n\nUse generics, unknown or overloads and do not worry about unexpected problems with data structures. Such problems are hard and expensive to debug.\n\nstrict\n\nTypeScript has a “strict” mode that is unfortunately disabled by default. This mode enables a set of rules for safe and comfortable TypeScript. If you do not know about this mode, read the following article.\n\nWith “strict” mode you forget about errors like undefined is not a function or cannot read property X of null . Your types are accurate and correct.\n\nAnd what should I do?\n\nIf you start a new project, enable “strict” and be happy.\n\nIf you have a project without “strict” mode and you want to enable it, you can meet a lot of compilations. It is very hard to write a strict code without alerts of the compiler. So it’s likely you have a lot of problematic places. Migrating the whole project to “strict” gets annoying pretty quickly.\n\nIt is recommended to cut this big task into pieces. The “strict” mode consists of a set of 6 rules. You can enable one of them and fix all errors. The next time, you enable the second one, fix errors and continue work and so on. One day you get a “strict” mode.\n\ntsconfig.json file\n\nreadonly\n\nThe next important rule for us as developers in TypeScript is using readonly everywhere.\n\nIt is a bad practice to mutate structures while working with them. For example, Angular does not like this way: there are some issues with ChangeDetection and updates of your view when you mutate data.\n\nBut you can prevent all attempts to mutate data easily. Just make a habit of writing readonly word.\n\nAnd how should I do it?\n\nThere are many places in your app where you can replace unsafe types to readonly options.\n\nUse “readonly” properties in interfaces\n\nPrefer “readonly” types\n\nUse “readonly” fields in a class when possible\n\nUse “readonly” structures\n\nas const\n\nIn TypeScript v.3.4 we got const-assertions\n\nIt is a more strict instrument than “readonly” types because it seals instance to the most precise type and you can be sure that nobody and nothing will change it.\n\nUsing as const you also get exact types in the tips of your IDE.\n\nUtility Types\n\nTypeScript has a set of types that are shortcut transformations of other types.\n\nPlease, explore the official utility types doc and use them in your app. It saves a lot of time.\n\nNarrow down your types\n\nTypeScript has many instruments to narrow down types. It is cool because we can support strict typing in our project in a wide variety of cases.\n\nLook at the following sample. It is a simple case but it can help to understand the difference between checking a type and narrowing it down.",
    "keywords": [
      "using",
      "typescript",
      "types",
      "endlessly",
      "set",
      "project",
      "lot",
      "readonly",
      "enable",
      "scale",
      "allow",
      "tricks",
      "mode",
      "strict",
      "app"
    ]
  },
  {
    "url": "https://eand.co/are-these-the-last-25-days-of-american-democracy-14fa529ba8bd?source=extreme_main_feed---------9-73--------------------bd28317f_2913_4cdb_bd83_5a46b863fda1-------",
    "title": "Are These the Last 25 Days of American Democracy?",
    "publish_date": "2020-10-09 16:36:55",
    "authors": [
      "Umair Haque"
    ],
    "summary": "Are these to be the last 25 days of American democracy?\n!” while Trump was busy scapegoating immigrants, refugees, Jews, Muslims, and everyone else who wasn’t a “real” American.\nLike I said: it’s deeply abnormal for a society to feel this way, act this way, think this way, be this way.\nBecause I want you to really understand American collapse, so that you really understand what America is up against in this election.\nThese could very well be the last 25 days of American democracy.",
    "text": "The more desperate that Trump gets, the more egregious his transgressions become. The latest, as he plummets in the polls, is to call for his opponents to be prosecuted and indicted.\n\nThat’s straight out of the authoritarian’s playbook. And it should be a clear sign of what is to come. Are these to be the last 25 days of American democracy?\n\nTrump has long understood that he is unlikely to win the election outright. That the majority of Americans don’t back him — they didn’t the first time around, remember. That’s no mere coincidence: it is the culmination of a trend. The same happened with George W Bush, and it was an ominous sign of things to come. America’s ranked as a flawed democracy precisely because it’s obscure “electoral college” system at this point, a remnant of slavery and segregation, designed to empower wealthy landowners, stands against the wishes of the majority — who want a society more like Canada or Europe than the failed state of Texas.\n\nAnd so what has developed over the last few months — and the over the last several decades, with the GOP— is what looks like a sophisticated, complex strategy to thwart democracy itself, and steal the election. That’s no overstatement or hyperbole. As I’ve written in the recent past, the elements of this are in plain view — for those who care to look.\n\nBefore I discuss this strategy, and how its evolving, though, I want to point something out. Americans don’t quite seem to understand that they are living in a pre-authoritarian society now, and have been for quite some time. When the Supreme Court handed the win to Bush, that was a major, major development in pre-authoritarianism. When Obama — as good a person as he is, he made several major mistakes — bailed out the banks, but not Main St, that too was pre-authoritarianism, propping up failed predatory institutions. When warnings of Trump’s abuses of power to come were dismissed in 2016, that too was pre-authoritarianism, as it was when Hillary got attacked for “but her emails!!” while Trump was busy scapegoating immigrants, refugees, Jews, Muslims, and everyone else who wasn’t a “real” American.\n\nPre-authoritarianism isn’t just a political phenomenon, though. It’s also a kind of cultural and social current sweeping through a nation. And America’s long been pre-authoritarian in those ways, too. Americans are legendary the world over for their cruelty, indifference, and brutality — all of which are severe blinking-red indicators of pre-authoritarianism. Kids shooting each other up at schools — something which happens nowhere else in the world with such regularity? People having to beg strangers online to pay for basic medicine? Generations crippled by unpayable debt, beginning with “lunch debt,” becoming “student debt,” then turning into “credit card” and “medical debt” — a society of neo-serfs, in other words?\n\nAll these things are severe indicators of pre-authoritarianism, and yet they have also become normalised in America to the extent that many Americans don’t understand that living this way, among such severe cruelty and brutality, is deeply, deeply abnormal. An example I often raise is that of Pakistan, a place where you can buy AK-47s at gun markets — but nobody is shooting up schools. America’s problems are cultural and social.\n\nIt’s no overstatement to say that America is a nation in profound social and cultural crisis, with cultural and social problems — like school shootings, medical bankruptcy, skyrocketing despair and suicide, mass distrust, a level of vitriol and indifference that’s truly shocking — that exist almost nowhere else in the world. And all those problems are the ones of pre-authoritarian societies: they are what tend to happen just before societies collapse full on into authoritarianism.\n\nSo what is their genesis? What made America fall apart socially and culturally — by which I mean become a society in which no one much trusts anyone else, where indifference, despair, and rage are normalized? Like I said: it’s deeply abnormal for a society to feel this way, act this way, think this way, be this way.\n\nAmerica imploded into social and cultural crisis not out of the blue, but for a very simple reason, which predicted just such implosion. Economic collapse. The Soviet Union stagnated for thirty years — and that was enough to cause it to fracture into little nations, many of which are failing authoritarian states today. America’s stagnated for fifty. That’s almost twice as long, half a century where average incomes haven’t really risen.\n\nMeanwhile, the prices of basics have spiralled completely out of control, becoming flatly unaffordable. Education will cost you as much as a house, and so will falling ill. Food and water and utilities cost far, far more than they do in rich or poor societies. Retirement is an impossibility for three generations and counting right about now. These basics have become things that nobody much can afford in America.\n\nThe result of this dislocation — incomes stagnating, while prices rose and rose to amounts that the entire rest of the world finds startling and unbelievable, like $50K for childbirth — was that the American middle class finally collapsed. It took about two decades for the middle class to eat through its savings and assets, and finally, for the first time, around 2010, the middle class finally became a minority.\n\nToday, the average American dies in $62,000 of debt. That’s a figure, an idea, that Americans have normalized — isn’t this how everyone lives? — but it is so profoundly abnormal and perverse that to an economist like me it’s like having a patient who can’t breathe and is about to go into cardiac arrest. There is nothing — and I mean nothing — more alarming in the world of social statistics and economic figures than a nation dying in mass debt.\n\nWhat happens to societies where people die in mass debt? Debts they have never been able to repay? When entire generations fall prey to that failure? They implode into authoritarianism and/or fascism.\n\nThat is precisely the story of Weimar Germany, after all. It’s also the story of post-Soviet Russia. And the story of the Islamic world.\n\nWhy? What is the connection between a collapsing economy and an imploding society? Trust is. If you can’t make ends meet, no matter how hard you try, you live a life of panic, despair, fatalism, nihilism. You are perpetually angry, a human pistol with a hair trigger, ready to lash out. You have been denied the basics, and with them go peace of mind. And with all that goes trust. You being to grow suspicious of your neighbours, who were once friends. Now everyone is just a rival in a bitter, desperate battle for survival. Tribe turns on tribe, group on group. Atop it all stride elites, grinning, satisfied, because now the masses are too weak to even act for themselves. The bonds between them have been severed — and so no collective action is possible.\n\nA society dies, this way: an economy collapses, and takes trust with it, which produces a political implosion, by way of social disintegration.\n\nThat is exactly what happened in America. As the economy collapsed, from 1970 onwards, steadily, slowly, then fast, and finally all at once, collective action stopped being possible at all. Americans by the 2000s distrusted one another so much that they refused to give one another healthcare, retirement, education, and so on. Do you see the irony? That deficit was of the very basics that produced the vicious cycle of implosion, and yet because trust had gone missing from society, collective action to simply give one another the basics was no longer possible.\n\nAnd that created the opening for a demagogue. Sooner or later, someone was going to come along who blamed already hated minorities for all this. Who scapegoated Jews, Muslims, Mexicans, refugees, immigrants, for the problems of “real” Americans.\n\nAnd that is exactly what transpired. Trump led a neo-fascist movement to power, and soon kids were in camps, being ripped away from their families, minorities being hunted down in the streets, people being beaten and gassed, women forcibly sterilised in the camps. And there Trump is today, calling for his opponents to be prosecuted and indicted — a classic and predictable authoritarian move, to finalise the seizure of power.\n\nWhy am I telling you all this? Because I want you to really understand American collapse, so that you really understand what America is up against in this election. Let me put it bluntly.\n\nFor Trump to lose this election — really lose it, not just fail to win a majority but still retain power — America is going to have to commit its first act of collective action in a very, very long time. Its first positive act. Not just a negative one, as in denying everyone else healthcare, education, retirement, and so on — but an affirmative one, as in, we still want to be a democracy.\n\nIf that makes you shudder a little bit, then I’ve been successful — because you understand how big the stakes really are.\n\nAmerica isn’t just up against Trump. It is up against history. A toxic political party, a failed set of paradigms, a catastrophic set of ways of thinking about the world. That selfishness and cruelty and brutality — politely disguised as “self-interest” and “self-reliance” and “standing on your own two feet” and even “freedom” — can ever lead a society upwards, towards higher living standards.\n\nInstead, those ideologies, toxic remnants of slavery and segregation, which had never really gone away, led to the following sequence: economic collapse, even for the “real” American, which led to social disintegration, as social bonds were severed, and trust died, which led to predictable and inevitable political implosion, into fascism and demagoguery.\n\nThat is all what it means when I say “America was a pre-authoritarian society.” It goes deep, deep into the heart of America’s interlinked crises, economic, social, political, cultural, and is the central thread weaving them together, by way of indifference, despair, and enmity.\n\nThis election is America’s last chance. It is a pre-authoritarian society. If Trump wins — and remember, I don’t just mean that he loses the majority, but stays in power, thanks to legal challenges, the Supreme Court, voter intimidation and suppression — if he wins, whatever way he wins, America is finished. The transformation to an authoritarian society, which has been on the cards for decades now, will be complete.\n\nThat is why people like me — survivors and scholars of authoritarianism — have been trying to warn you about all these links. Sarah Kendzior has written about the despair in “flyover country,” Peter Daou warned how civil wars erupt, Jason Stanley discussed the evolution of fascism. America’s pundits — the ones you hear, on CNN and in the NYT and whatnot? They have no idea about this. They have been wrong from day one because they have never lived this, experienced it, understood it in a visceral, firsthand way. We have.\n\nTake the warnings seriously.\n\nThese could very well be the last 25 days of American democracy. America is up against all its mistakes, who have culminated in one man, Trump, and his movement of fascists, theocrats, flunkies, sycophants, idiots, and militias. It has never taken a majority to topple a democracy — only a fanatical enough minority.\n\nBut do you know what it takes to save one?\n\nA majority, who is capable of doing what is has not, for too long. Finally coming together, to resolve to stand up for decency, goodness, humility, truth, beauty, justice, wisdom, grace.\n\nThat is what needs to happen in the next 25 days. America needs to grow more in these last three and a half weeks than it has in the last three and a half decades.\n\nCan it do that? You, my friend, tell me.\n\nUmair\n\nOctober 2020",
    "keywords": [
      "american",
      "trump",
      "way",
      "world",
      "majority",
      "america",
      "social",
      "25",
      "debt",
      "really",
      "democracy",
      "society",
      "americas",
      "days"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------af88f0e1_99eb_414e_8454_b8232b6a55d6-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------af88f0e1_99eb_414e_8454_b8232b6a55d6-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------af88f0e1_99eb_414e_8454_b8232b6a55d6-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------af88f0e1_99eb_414e_8454_b8232b6a55d6-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------af88f0e1_99eb_414e_8454_b8232b6a55d6-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------0-74--------------------4f07da36_ec33_48a6_8b7e_009849dfc6d4-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://hjauquet.medium.com/i-am-a-pro-life-housewife-1ff2cf1b05ec?source=extreme_main_feed---------1-74--------------------4f07da36_ec33_48a6_8b7e_009849dfc6d4-------",
    "title": "I am a Pro-Life Housewife",
    "publish_date": "2020-10-15 13:43:33",
    "authors": [
      "Heather Jauquet"
    ],
    "summary": "I am a Pro-Life HousewifeAnd I’m not voting for TrumpPicture by Maria Oswalt on UnsplashAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\nThey are seeing that while Trump is considered the pro-life candidate, he is not pro-life.\nBeing pro-life means having a consistent life ethic from womb to tomb.\nPro-life means honoring the sanctity of life at all stages.\nDon’t discount the vote of the pro-life housewife who is working towards change.",
    "text": "I am a Pro-Life Housewife\n\nAnd I’m not voting for Trump\n\nPicture by Maria Oswalt on Unsplash\n\nAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\n\nI acknowledge that I hate discussing politics and often hesitate to share my views. On the rare occasions I do, it’s usually about my support for the sanctity of human life. I have been admonished by friends from both political parties telling me that I am not pro-life enough, or I’m anti-woman, or I’m not Christian enough, or that I’m too naive. One person, went even so far as to tell me about her “great disappointment” in me and suggested I shouldn’t share my views or should only share them with like-minded people. But if I do as she suggested, my views go in an echo chamber and I forgo the opportunity for rich discussion and to see another perspective. While I might not change someone’s mind, I hope we walk away with a different perspective and the willingness to view every story with grace and compassion.\n\nI grew up loving Jesus and loving my country And now, as a pro-life religious conservative, I’m feeling bereft, without a political party who represents me. To be honest, I felt that way at the last election and even more so now. I disagree with the democratic platform on the issue of abortion. But I abhor the ongoing lack of respect for human life as demonstrated by the current president.\n\nAs we get closer to the U.S. Presidential election there is a contingent of pro-life Catholics and evangelicals who are making their departure from supporting Trump known. They are seeing that while Trump is considered the pro-life candidate, he is not pro-life. His actions against the marginalized show the truth.\n\nBeing pro-life means having a consistent life ethic from womb to tomb. It means valuing human life at all stages, not just when it’s convenient. Often when a new election looms on the horizon the discussion of life becomes a heated topic of debate: When should life be valued? Who is valued?\n\nI cannot in good conscience vote for a man who doesn’t value human dignity and decency. I cannot embrace the politics of a man who is willing to put children in cages and has not, as of yet, addressed the allegations of forced hysterectomies on Immigration and Custom Enforcement (ICE) detainees.\n\nI cannot support a leader who refuses to face the pandemic head on in hopes that it will disappear. The leader of our country mocked his political opponent for wearing a mask and then came down with the very plague he tried to ignore. Then he exposed his staff to the virus. That is not pro-life. It’s a flagrant display of ego and of disrespect for the people who work for him and the 209,000 dead that preceded his diagnosis.\n\nI cannot support a man who is unwilling to denounce white supremacy. It is not pro-life when President Trump refused to denounce white supremacy, but instead told the Proud Boys to “Stand back and stand by.” Pope Francis said in a message to the people of the United States after the killing of George Floyd: “We cannot tolerate or turn a blind eye to racism and exclusion in any form and yet claim to defend the sacredness of every human life.”\n\nWhen then candidate Trump mocked a disabled journalist during the 2016 campaign some people laughed, more were disgusted. His mockery is not pro-life. It points fingers and makes fun of people who are not neurotypical. I have a neurodivergent son and to know that he would be mocked or have his disability used against him is infuriating and heart wrenching. I expect more out of a leader. I expect compassion and restraint.\n\nHow can we support a pro-life candidate who is anything but? His hypocrisy is blatant.\n\nI am ardently pro-life. I hold that position because I believe in the dignity and the sanctity of human life. I believe we are made in the image of God and when we love one another we share the love of Jesus. I believe life is sacred. All life. I believe it begins in the womb and ends at natural death. At a lecture at Fordham University, Cardinal Joseph Bernardin shared this consistent life ethic: “The spectrum of life cuts across the issues of genetics, abortion, capital punishment, modern warfare and the care of the terminally ill.” In short, it’s valuing all life: the infirm, the dying, the disabled, the ones in cages whether they be prisons or at the border, the mentally ill.\n\nWe should show empathy, compassion, and grace when we talk to people about their situations. If we refuse to acknowledge the humanity, do people’s stories simply become pawns in our political stances?\n\nI believe we are called to serve one another. I believe in grace. I believe we shouldn’t be reduced to our mistakes. I believe that we are all broken, and that in our brokenness we can learn to see the whole person and embrace grace. Bryan Stevenson beautifully articulates how brokenness brings about compassion in his book Just Mercy: A story of Justice and Redemption. In his book, Stevenson describes our broken judicial system where too many are given a death sentence for crimes that they did not commit or crimes that do not warrant it.\n\nThe most politically active part of the pro-life position seeks an end to abortion. I fervently wish for an end for abortion. We also need to put in resources to empower women. This means consistent and available health care. This means jobs and housing. This means education. It means giving women the ability to support themselves and their children. It means support. We cannot demonize women for their decisions if we turn a blind eye to their needs. There are religious organizations that help women in crisis pregnancies and one of my favorites is The Gabriel Network whose slogan is “Empower Women.” They not only provide housing, but also angel friends who take women to their appointments, spend time with them getting to know them, and help by anticipating their needs whether it be friendship, baby supplies, or a hand to hold. The Gabriel Network also provides scholarships to help women further their education and careers.\n\nMany people see a pro-life position as a religious one. It is for me, but, it doesn’t have to be. Pro-life means honoring the sanctity of life at all stages. There are other organizations not affiliated with any religion that support a consistent life ethic such as New Wave Feminists and Rehumanize International. New Wave Feminists recognizes the “…full humanity of both the unborn child and the mother and looks to rebuild a culture that embodies legitimate justice for all.” Rehumanize International is a “…human rights organization dedicated to creating a culture of peace and life, and in so doing…seek to bring an end to all aggressive violence against humans through education, discourse, and action.”\n\nWhat if we set aside the presuppositions that being pro-life means that it is only a religious issue or a political stance? What if we used our time and energy to support, encourage, and embrace the sanctity of human life? When we stop pitting pro-choice and pro-life advocates against one another, we could do beautiful work together and shelter the homeless, clothe the naked, and feed the hungry. We can empower women, provide adequate healthcare, end racism, and advocate for social justice.\n\nAs I continue to read, listen, and learn, I embrace the dignity and sanctity of all human life. I acknowledge that if we want to change minds and change hearts, we have to be willing to listen to one another. Don’t discount the vote of the pro-life housewife who is working towards change.",
    "keywords": [
      "life",
      "women",
      "trump",
      "housewife",
      "human",
      "prolife",
      "believe",
      "support",
      "means",
      "sanctity",
      "political"
    ]
  },
  {
    "url": "https://medium.com/swlh/how-stealing-your-childrens-crayons-can-solve-your-ios-stackview-problems-c2aa5b707b02?source=extreme_main_feed---------2-74--------------------4f07da36_ec33_48a6_8b7e_009849dfc6d4-------",
    "title": "How Stealing Your Children’s Crayons Can Solve Your iOS StackView Problems",
    "publish_date": "2020-10-16 02:34:06",
    "authors": [
      "Austin Ramsdale"
    ],
    "summary": "Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other.\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here.\nLuckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\nWe can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view.\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons.",
    "text": "Designing responsive and performant iOS apps can be a frustrating chore for new developers. Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other. Alternatively, designing user interfaces programmatically may be preferred, but can take years of mastery and an in-depth understanding of the underlying display engine; and we haven’t even considered the varying sizes and layouts!\n\nIf you’re having issues laying out your interface and getting it to play nicely with the various sizes and orientations, here are some quick tips using nested StackViews that may be able to help you organize and speed up your development process!\n\nFor this article, I am using a Swift recreation of the simple calculator, but you’ll notice that there are two key buttons that differ in size and orientation from the others — creating a complication with traditional stack views, and can be really problematic when using conventional constraints and expecting them to orient properly.\n\nSo how did I tackle this quickly and easily? As the title might suggest, grab any markers, pens, or crayons you may have at your disposal, and start by printing out a copy of the Storyboard. You can also design it on-screen, but for many (myself included), putting pen-to-paper helps to unlock that creative critical thinking that is sometimes needed to crack the visual code.\n\nTo start, I need to outline the largest “block” of interactive elements that I want to organize and manipulate. I’ve marked the corners in red, but instead of working from the outside in, I’m now going to look for the elements that need specific handling, focusing on fitting them into a balanced container, called a Stack View, and then working outwards.\n\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here. Additional information can be found in Apple’s “App Development with Swift” in section 2.1.\n\nAs you can see, the two elements we need to work with are the “0” button, which spans 2x the conventional button width (below button “1” and “2”), and the “=“ button, which inconveniently spans 2x the conventional button height. Luckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\n\nNow that I’ve identified the unique elements, we can see that the buttons fit into a larger chunk of blocks, outlined in green below. We can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view. Lastly, we need to distribute the “1” and “2” buttons evenly, so they share the space inside of the block.\n\nSimilarly, the “=“ , “3”, and “.” button share the lower right block. We create a vertical stack view and put the “=“ button on the right side, and we’ll nest an additional horizontal stack view on the left, putting the “3” in the top, and “.” In the bottom, with “Fill equally” as the distribution method here as well.\n\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons. This makes it a little easier, but it helps to create “balanced” or even blocks where possible.\n\nConveniently, the buttons fit in a 3x4 grid for both top and bottom, so I drew two larger encompassing blocks in blue around those segments, and labeled them “Upper Stackview” and “Lower Stackview”, respectively. You’ll notice that I’ve also started to fill-in other attributes in the margins, marking both the top and bottom blocks as “Fill equally” also (however, the bottom is wrong — it’s actually Fill proportionally, but more on that in a bit).\n\nNow, I simply need to group and space the remaining buttons, starting with drawing a box around the “4”, “5”, “6”, and “-“ buttons, placing them in a vertical stack view, and doing the same with the “Upper Stackview” (highlighted in orange).",
    "keywords": [
      "blocks",
      "stealing",
      "buttons",
      "view",
      "problems",
      "childrens",
      "crayons",
      "button",
      "elements",
      "views",
      "stackview",
      "need",
      "vertical",
      "solve",
      "ios",
      "conventional",
      "stack"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------4f07da36_ec33_48a6_8b7e_009849dfc6d4-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------4-73--------------------4f07da36_ec33_48a6_8b7e_009849dfc6d4-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------6-73--------------------4f07da36_ec33_48a6_8b7e_009849dfc6d4-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------7-73--------------------4f07da36_ec33_48a6_8b7e_009849dfc6d4-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://uxdesign.cc/the-future-of-apple-ipad-b659b7da75a7?source=extreme_main_feed---------8-73--------------------4f07da36_ec33_48a6_8b7e_009849dfc6d4-------",
    "title": "The future of Apple iPad",
    "publish_date": "2020-10-09 22:27:25",
    "authors": [
      "Ali Çorak"
    ],
    "summary": "Harddisk connection, mouse, Bluetooth mouse, Bluetooth keyboard, keyboard with USB-C, etc…We were able to use the iPad as a computer with keyboards.\nAlthough the Magic Keyboard is made for iPad Pro, which is more advanced than other iPads, it now supports iPad Air 4th generation.\nWe use the iPad in a horizontal position with Magic Keyboard.\nWe don’t need a new computer, we’re just looking for a screen; iPad provides this with Sidecar support.\nWhen John Ive left Apple, he founded the design agency LoveFrom and his first customer was Apple.",
    "text": "Catalyst takes care of everything when you develop for iPadOS or iOS with recommendations from Apple. The application becomes available for macOS. As you can imagine, it looks “like a Mac” on the iPad. Also, if you have written your application with Swift, Catalyst is not needed. SwiftUI will automatically adapt to macOS. But SwiftUI supports iOS13 and above. This means that devices with the latest iOS 12 (such as iPhone 6, which are currently widely used in the market) will not be supported.\n\nIt’s a Computer. Because;\n\niPad Pro + Magic Keyboard\n\nAfter making software innovations to the old generations and hardware to the new generations, the iPad became a computer. Harddisk connection, mouse, Bluetooth mouse, Bluetooth keyboard, keyboard with USB-C, etc…\n\nWe were able to use the iPad as a computer with keyboards. But some things could affect the user experience. (Touching the screen and using the keyboard was difficult for some) But then the trackpad came on the Magic Keyboard. Although the Magic Keyboard is made for iPad Pro, which is more advanced than other iPads, it now supports iPad Air 4th generation.\n\nIf we talk about other hardware details, if you use your iPad Pro with Magic Keyboard, there are 2 USB-C ports in total; Like MacBook Air. This is an advantage because any extra accessory you buy for the MacBook can be used for the iPad. (and yes, wish we didn’t have to buy extra accessories) In the end, Magic Keyboard does not move 360 ​​degrees like the Smart Folio Keyboard. I don’t know why but I think it looks like a laptop.\n\nWe use the iPad in a horizontal position with Magic Keyboard. That’s why sidebar matters. But as a problem, some applications open vertically even in a horizontal position. (Maybe it will improve in the future because it will not give a MacBook experience like this)\n\nNote: If you are used to doing operations such as volume up/volume down increase/decrease screen light from the keyboard, unfortunately, there are no top keys in Magic Keyboard.\n\nIt’s Not a Computer. Because;\n\nApple’s Sidecar\n\nWhen using a laptop or desktop, we sometimes need a second screen. We don’t need a new computer, we’re just looking for a screen; iPad provides this with Sidecar support. iPad is not a computer here; a screen.\n\nAnother topic is games; We know that MacBook is not preferred for games. But the iPhone performs well in games. I’m not a gamer but in games, the iPad performs like an iPhone, not MacBook. Moreover, there is controller support.\n\nThe iPadOS should no longer be compared to the iPhone or the Mac. It seems to be between macOS and iOS, but it is not. Special applications should be made for the iPad. For example, the Sharpr3D app is just for the iPad.\n\nSharpr3D\n\nIn other words, you can also do professional works such as 3D modeling, video editing, photo editing on the iPad. So what’s the limit? It’s not currently at the Mac level. You can edit a very good video with an app such as Luma Fusion, iMovie, Adobe Rush on iPads. But when you want to take this to a more professional level, iPads will not be suitable for you.\n\nLuma Fusion\n\nNote: Everyone talks about Apple after John Ive. When John Ive left Apple, he founded the design agency LoveFrom and his first customer was Apple. So Apple still works with John Ive.",
    "keywords": [
      "future",
      "iphone",
      "ipad",
      "computer",
      "magic",
      "screen",
      "macbook",
      "games",
      "used",
      "apple",
      "keyboard"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/software-architecture-the-important-architectural-patterns-you-need-to-know-a1f5ea7e4e3d?source=extreme_main_feed---------9-73--------------------4f07da36_ec33_48a6_8b7e_009849dfc6d4-------",
    "title": "Software Architecture: The Most Important Architectural Patterns You Need to Know",
    "publish_date": "2020-10-15 08:17:04",
    "authors": [
      "Trung Anh Dang"
    ],
    "summary": "Software Architecture: The Most Important Architectural Patterns You Need to KnowExplaining common different architecture patternsPhoto by Alexander Andrews on UnsplashAn architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context.\nMany programmers are nowadays still confused about the difference between architecture patterns or don’t even know much about it.\nLayered ArchitecturePipe and FilterClient ServerModel View ControllerEvent Driven ArchitectureMicroservices ArchitectureLayered ArchitectureThe most common architecture pattern is the layered architecture or known as the n-tier architecture.\nOn the second concept, the layered architecture pattern is a technically partitioned architecture as opposed to a domain partitioned architecture.\nPipe and FilterOne of the patterns in software architecture that appears, again and again, is the pipe-filter pattern.",
    "text": "Software Architecture: The Most Important Architectural Patterns You Need to Know\n\nExplaining common different architecture patterns\n\nPhoto by Alexander Andrews on Unsplash\n\nAn architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context.\n\nA pattern is a solution to a problem in a context.\n\nMany programmers are nowadays still confused about the difference between architecture patterns or don’t even know much about it.\n\nLet me explain to you…!\n\nLayered Architecture\n\nPipe and Filter\n\nClient Server\n\nModel View Controller\n\nEvent Driven Architecture\n\nMicroservices Architecture\n\nLayered Architecture\n\nThe most common architecture pattern is the layered architecture or known as the n-tier architecture. It is widely known by most software architects, designers, developers. Although, there are no specific restrictions in terms of the number and type of layers that must exist, most layered architecture consists of four tiers: presentation, business, persistence and database as follows.\n\nan popular example of n-tier architecture\n\nContext\n\nAll complex systems experience the need to develop and evolve portions of the system independently. For this reason, the developers of the system need clear and well-documented separation of concerns, so that modules of the system may be independently developed and maintained.\n\nProblem\n\nThe software needs to be segmented in such a way that the modules can be developed and evolved separately with little interaction among the parts, supporting portability, modifiability, and reuse.\n\nSolution\n\nTo achieve this separation of concerns, the layered pattern divides the software into units called layers. Each layer is a grouping of modules that offers a cohesive set of services. The usage must be unidirectional. Layers completely partition a set of software, and each partition is exposed through a public interface.\n\nThe first concept is each of the layers has a specific role and responsibility. For example, the presentation layer would be responsible for handling all UI. Because this separation of concerns within the layered architecture makes it easy to build effective roles and responsibility.\n\nOn the second concept, the layered architecture pattern is a technically partitioned architecture as opposed to a domain partitioned architecture. They are groups of components, rather being by domain.\n\nThe last concept is that each of the layers in the layered architecture is marked as being either closed or open. A closed layer means that a request moves from layer to layer, it must go through the layer right below it to get to the next layer below that one. The request cannot skip any layers.\n\nClosed layers and request access\n\nWeakness\n\nLayers contribute to a performance penalty. The pattern does not lend itself to high-performance applications because it is not efficient to go through multiple layers of the architecture to fulfill a business request.\n\nThe addition of layers also adds up-front cost and complexity to a system.\n\nUsages\n\nWe should use this style for small, simple applications or websites. It is a good choice for situations with a very tight budget and time constraints.\n\nMulti-Tier Pattern\n\nContext\n\nIn a distributed deployment, there is often a need to distribute a system’s infrastructure into distinct subsets.\n\nProblem\n\nHow can we split the system into a number of computationally independent execution structures: groups of software and hardware connected by some communications media?\n\nSolution\n\na multi-tier example — consumer website J2EE\n\nThe execution structures of many systems are organized as a set of logical groupings of components. Each grouping is termed a tier.\n\nWeakness\n\nSubstantial up-front cost and complexity.\n\nUsages\n\nUsed in distributed systems.\n\nPipe and Filter\n\nOne of the patterns in software architecture that appears, again and again, is the pipe-filter pattern.\n\nthe pipe filter style\n\nContext\n\nMany systems are required to transform streams of discrete data items, from input to output. Many types of transformations occur repeatedly in practice, and so it is desirable to create these as independent, reusable parts.\n\nProblem\n\nSuch systems need to be divided into reusable, loosely coupled components with simple, generic interactionmechanisms. In this way they can be flexibly combined with each other. The components, being generic and loosely coupled, are easily reused. The components, being independent, can execute in parallel.\n\nSolution\n\nPipes in this architecture form the communication channel between filters. The first concept is each of the pipes is un-directional and point to point for performance reasons, accepting input from one source and always directing output to another.\n\nThere are four types of filters exist within this style as follows.\n\nproducer ( source ): the starting point of a process.\n\n): the starting point of a process. transformer ( map ): performs a transformation on some or all of the data.\n\n): performs a transformation on some or all of the data. tester ( reduce ): tests one or more criteria.\n\n): tests one or more criteria. consumer ( sink ): the terminating point.\n\nWeakness\n\nNot good choice for interactive systems, because of their transformational character.\n\nExcessive parsing and unparsing leads toloss of performance and increased complexity in writing the filters themselves.\n\nUsages\n\nThe pipe-filter architecture uses in a variety of applications, especially tasks that facilitate simple, one-way processing such as EDI, ETL tools.\n\nCompilers: the consecutive filters perform lexical analysis, parsing, semantic analysis, and code generation.\n\nClient Server\n\nContext\n\nThere are shared resources and services that large numbers of distributed clients wish to access, and for which we wish to control access or quality of service.\n\nProblem\n\nBy managing a set of shared resources and services, we can promote modifiability and reuse, by factoring out common services and having to modify these in a single location, or a small number of locations. We want to improve scalability and availability by centralizing the control of these resources and services while distributing the resources themselves across multiple physical servers.\n\nSolution\n\nIn a client-server style, components and connectors have a particular behavior.\n\nComponents, called “clients,” send requests to a component, called “server,” and wait for a reply.\n\nA server component receives a request from a client and sends it the reply.\n\nWeakness\n\nThe server can be a performance bottleneck and a single point of failure.\n\nDecisions about where to locate functionality (in the client or in the server) are often complex and costly to change after a system has been built.\n\nUsages\n\nWe can use the client-server style to model a part of a system that has many components sending requests (clients) to another component (server) that offer services: online applications such as email, document sharing and banking.\n\nModel View Controller\n\nContext\n\nThe user interface is typically the most frequently modified portion of an interactive application. Users often wish to look at data from different perspectives, such as a bar graph or a pie chart. These representations should both reflect the current state of the data.\n\nProblem\n\nHow can user interface functionality be kept separate from application functionality and yet still be responsive to user input, or to changes in the underlying application’s data?\n\nAnd how can multiple views of the user interface be created, maintained, and coordinated when the underlying application data changes?\n\nSolution\n\nThe model-view-controller (MVC) pattern separates application functionality into three kinds of components as follows.\n\nA model, which contains the application’s data.\n\nA view, which displays some portion of the underlying data and interacts with the user.\n\nA controller, which mediates between the model and the viewand manages the notifications of state changes.\n\nWeakness\n\nThe complexity may not be worth it for simple user interfaces.\n\nThe model, view, and controller abstractions may not be good fits for some user interface toolkits.\n\nUsages\n\nMVC is an architectural pattern that is commonly used in web, mobile applications while developing user interfaces.\n\nEvent Driven Architecture\n\nContext\n\nComputational and information resources need to be provided to handle incoming independent asynchronous application-generated events in a manner that can scale up as demand increases.\n\nProblem\n\nConstruct distributed systems that can service asynchronous arriving messages associated with an event, and that can scale from small and simple to large and complex.\n\nSolution\n\nDeploy independent event processes/processors for event handling. Arriving events are queued. A scheduler pulls events from the queue and distributes them to the appropriate event handler based on a scheduling policy.\n\nWeakness\n\nPerformance and error recovery may be issues.\n\nUsages\n\nAn e-commerce application that uses this approach would work as follows:\n\nThe Order Service creates an Order in a pending state and publishes an OrderCreated event.\n\nThe Customer Service receives the event and attempts to reserve credit for that Order. It then publishes either a Credit Reserved event or a CreditLimitExceeded event.\n\nevent. The Order Service receives the event from the Customer Service and changes the state of the order to either approved or canceled\n\nMicroservices Architecture\n\nContext\n\nDeploy server-based enterprise applications that support a variety of browsers and native mobile clients. The application handles client requests by executing business logic, accessing a database, exchanging messages with other systems, and returning responses. The application might expose a 3rd party API.\n\nProblem\n\nMonolithic applications can become too large and complex for efficient support, and deployment for optimal distributed resource utilization such as in cloud environments.\n\nSolution\n\nBuild applications as suites of services. Each service is independently deployable and scalable and has its own API boundary. Different services can be written in different programming languages, manage their own database, and developed by different teams.\n\nWeakness\n\nSystems must be designed to tolerate service failures that require more system monitoring. Service choreography and event collaboration overhead.\n\nWe also need more memory.\n\nUsages\n\nMany use cases are applicable for a microservices architecture, especially those that involve an extensive data pipeline. For example, a microservices-based system would be ideal for a reporting system on a company’s retail store sales. Each step in the data preparation process would be handled by a microservice: data collection, cleansing, normalization, enrichment, aggregation, reporting, etc.\n\nEasy, right?",
    "keywords": [
      "layers",
      "architectural",
      "service",
      "pattern",
      "systems",
      "important",
      "patterns",
      "know",
      "need",
      "services",
      "applications",
      "software",
      "data",
      "system",
      "architecture"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------4c9e42ab_09df_4ff8_a7b0_ae8f9aa908d8-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------4c9e42ab_09df_4ff8_a7b0_ae8f9aa908d8-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------4c9e42ab_09df_4ff8_a7b0_ae8f9aa908d8-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------4c9e42ab_09df_4ff8_a7b0_ae8f9aa908d8-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------4c9e42ab_09df_4ff8_a7b0_ae8f9aa908d8-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------0-74--------------------6a324b38_2821_4fca_8e45_0f3d99aee9d1-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://humanparts.medium.com/how-well-get-over-going-to-the-upper-room-with-donald-j-trump-4d63f2e9741a?source=extreme_main_feed---------1-74--------------------6a324b38_2821_4fca_8e45_0f3d99aee9d1-------",
    "title": "How We’ll Get Over: Going to the Upper Room With Donald J. Trump",
    "publish_date": "2020-10-15 21:12:55",
    "authors": [
      "Max S. Gordon"
    ],
    "summary": "What we are facing is bigger than Donald Trump.\nOr maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose.\nPolitically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved.\nIf, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.",
    "text": "We’ve been here before. Our ancestors knew, when you can’t control the evil of the world, you must become the weather. A howling wind through the trees, a blistering sun, an irresistible force. Our democracy is on a respirator now, and we must defend it.\n\nJustice and nonviolent resistance became an electrifying force in 1955 when working-class Blacks who relied on the buses in Montgomery, Alabama, shut down the discriminatory system for an entire year, permanently changing the laws in that city. We need the spirit of transcendence that led these heroic women and men, many of them maids and laborers, to walk to work each day and say, “I can’t feel the hurt in my feet when there is a balm for my soul. And I will walk five more miles to work if it means a better life for my children.”\n\nWe need the Holy Ghost power that stopped Eugene “Bull” O’Connor, the commissioner of public safety in Birmingham, Alabama, when he ordered a battalion of firefighters to turn hoses on a crowd of protesters, including children, on May 5, 1963, often called “Miracle Sunday.” The firefighters not only resisted the order—it was reported that some of them cried.\n\nThe power of the crowd, who had walked from a local church, was both vulnerable and authoritative — a compelling, mystical combination. Whatever racist trance had possessed those firefighters when they’d hosed the same crowds only days before, it was broken, perhaps when they looked at the children and thought, “The little girl I am aiming this hose at could be mine.” Rev. Martin Luther King, Jr. later wrote, “I felt there, for the first time, the pride and the power of nonviolence.”\n\nThe alchemy of grace and conviction works. It has worked. I know because I am alive. I write these words with the knowledge that once upon a time someone who belonged to my family would have been whipped or worse for even trying to learn the alphabet. Yet I read, I write. Something they did to survive must have worked — because I’m here.\n\nNo matter how much they try to distort the truth on Fox News or make us feel like fools for believing, the sacrifices of earlier generations matter. How many women had to die on kitchen floors and back alleys for just one woman to walk into a care facility, protected by Roe v. Wade, and make an appointment for her health — legally and safely? We will not go back. Their sacrifices matter. And we owe them our determination to see that Roe v. Wade is not overturned. A persuasive river of courage flows through history, from Harriet Tubman to the suffragettes to the rioters at Stonewall. We’ll never know all the names, but we know that river exists — because we’re here.\n\nHistory has always had rogues, scoundrels, reprobates, damn fools, men who have acted as children. Bullies. Dictators. As a human family, we’ve seen astounding acts of evil. But the thing about evil is not to make it personal or to take it personally. We have to look beyond the actors. The only way to combat evil is not to respond with evil, but to invest in a more compelling vision. Because of someone’s vision, I am married to the man I love.\n\n7\n\nWelcome to Niggerland. A place on the outskirts of town where there has been crime and poverty and drugs and lack of health care and denied educational opportunities. My white friends, you were once untouched by the pain of the people who live there. But please know, those divisions no longer exist the way they once did. Perhaps Donald Trump’s greatest achievement is that he’s turned every American into a nigger, black or white (including a few people who are convinced they hate niggers). One way or another, we’re all in the soup now.\n\nNigger. It’s an unpleasant word, and forgive me for using it, but it’s the right word. It’s not a Black person’s shame, but a white society’s shame for its ugliness. It’s a word meant to terrorize a group of people within a system of oppression and make them feel powerless so they won’t act and try to change it. In other words, in Donald Trump’s eyes, we’re all niggers now. There isn’t a single person or institution he doesn’t have contempt for.\n\nWhat we are facing is bigger than Donald Trump. Perhaps he is the fulfillment of America’s karma in the world, our political shadow finally come to life. Or maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose. He is the personification of the Ugly American trope, vulgarity incarnate, an ambling Frankenstein monster ripping the village apart with his bare hands. Politically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\n\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved. His message isn’t really new—it’s his malevolence that’s profound. Maybe one day we will perceive his legacy as an opportunity that afforded fundamental change. If, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.\n\nWe may not change his heart, but we need to alter ourselves so we are different when and if the next monster arrives. In the aftermath of what happens, assessments will be made, and we will have to acknowledge that while solidarity eventually came from unexpected sources — Republicans willing to abandon their tribe — this went on for far too long, and too many lives were lost.\n\n8\n\nThere is a Black teenage girl who studies her lipstick one more time in the mirror before cutting off the bathroom light. She is going to a demonstration. There may be violence. But she believes in that preacher, Dr. King, and the sermon he preached on racial equality last Sunday. She knows it is dangerous; they’ve unleashed dogs on protestors; they turned hoses on families, pinning them against buildings and cars. People have been jailed, students have been clubbed, just for having the audacity to want to go to school with whites, to vote without retaliation.\n\nIt is 1957, and only a girl herself, she has no way of knowing that one day her daughter will look back at her through history. Her daughter will move into her dorm at a public university, buy her books, and although every battle won’t have been won, she will walk into the classroom her mother envisioned for her, without having to be escorted by the National Guard. She will claim the seat her mother earned.\n\nWe have a legacy to uphold; we have ancestors to honor. We’ve been here before. The names are always different. But whenever justice is threatened anywhere, there are always brave ones.\n\n9\n\nRevolution begins with a flower. Hold it your hand. And know that the man who owns real estate and golf courses all over world, in all his presumed omnipotence, doesn’t have the power to make a single flower.\n\nAnd if he chooses to destroy that flower, there’s another flower next to it in the field. There will always be flowers. Legions of them, as there are legions of us.\n\nAnd when your hope is restored and you remember who you are and what is possible to achieve with fortitude and grace, step out the door with that flower in your hair.\n\nAnd act.",
    "keywords": [
      "trump",
      "world",
      "way",
      "weve",
      "upper",
      "evil",
      "j",
      "going",
      "know",
      "power",
      "walk",
      "white",
      "room",
      "donald"
    ]
  },
  {
    "url": "https://coronavirus.medium.com/the-company-set-to-roll-out-americas-future-vaccine-cb56ea9691fa?source=extreme_main_feed---------2-74--------------------6a324b38_2821_4fca_8e45_0f3d99aee9d1-------",
    "title": "The Company Set to Roll Out America’s Future Vaccine",
    "publish_date": "2020-10-15 20:44:45",
    "authors": [
      "Yasmin Tayag"
    ],
    "summary": "The Company Set to Roll Out America’s Future VaccineThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccinesMario Tama / Getty ImagesWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages.\nIt’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history.\nIn August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\nAt the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention.\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made.",
    "text": "The Company Set to Roll Out America’s Future Vaccine\n\nThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccines\n\nMario Tama / Getty Images\n\nWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages. It’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history. To do the job, the White House has contracted a company called McKesson Corporation. In August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\n\nThis isn’t McKesson Corporation’s first vaccine-distribution rodeo. The company, founded 187 years ago and the seventh-largest U.S. company in terms of revenue in 2019, was also responsible for managing the distribution of the H1N1 vaccine to as many as 90,000 sites across the U.S. during the 2009 swine flu outbreak. At the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention. The company has also had an existing contract with the CDC to distribute childrens’ vaccines since 2016, and its role in distributing vaccines during the pandemic is based on that contract. Its success during the H1N1 epidemic bodes well for Covid-19 rollout, but U.S. public health infrastructure may continue to pose problems.\n\nAs I wrote previously, the specifics of how a vaccine will be distributed by McKesson — and who will get it first — are not yet clear. In an email to the Medium Coronavirus Blog, Robert Redfield, PhD, director of the CDC, said: “Through the Advisory Committee on Immunization Practices, CDC will play a vital role in deciding, based on input from experts and stakeholders, how initial, limited vaccine doses will be allocated and distributed while reliably producing more than 100 million doses by January 2021.” McKesson shared its public statement about its CDC partnership with the Blog but did not answer questions.\n\nThere does seem to be a plan to determine where exactly McKesson will distribute vaccines, according to the HHS. A spokesperson for the agency tells the Blog that ensuring easy access for all Americans, notably minority communities and medically underserved populations, is a top priority. “Whether it’s at a doctor’s office, retail pharmacy, federally qualified health center, or hospital,” they said, “thousands of outlets will be available so no American must travel far to be vaccinated.”\n\nThe plan is that McKesson will deliver a specific amount of vaccine to a designated location once it’s allocated to a given jurisdiction or authorized partner. In many instances, says the spokesperson, these will be sites where the vaccine will actually be administered; in others, McKesson will deliver vaccines to sites where health departments will pick up the vaccine and further distribute it within their networks. National retail pharmacies will also use a similar system. “This system,” says the spokesperson, “will be scalable to meet demand.”\n\nUntil more is known about the vaccine to be distributed, it’s not clear how it will be transported. Some vaccines are more delicate than others, and sometimes they require refrigeration. According to HHS, if the vaccine has ultra-cold storage requirements, it may be shipped directly from the manufacturer to administration sites, but this too will be managed within McKesson’s centralized system. The contract the company has with the CDC covers the transportation of both refrigerated (2–8º Celsius) and frozen (-20ºC) vaccines.\n\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made. The HHS spokesperson says the U.S. government is “committed to working with other countries friendly to our national security to ensure safe and effective Covid-19 vaccines are developed as fast as possible, however, the vaccine and therapeutic candidates [Operation Warp Speed] has invested in are the candidates OWS believes to be the most promising, and all of those candidates are being manufactured in the U.S.”\n\nMcKesson’s performance during the H1N1 epidemic in 2009 bodes well for the Covid-19 pandemic: During that time, it distributed almost 81 million H1N1 vaccine doses to 90,000 sites. However, notes journalist Michele Cohen Marill in the medical publication Medscape this week, distribution ran into obstacles at the public health level: “Public health officials struggled with the mechanics of designating priority groups and reaching out to them for vaccination while asking others to wait.”\n\n“I’m not sure there’s much difference between 1976, 2009, and 2020–2021,” Rebecca Wurtz, MD, MPH, of the University of Minnesota School of Public Health in Minneapolis, told Medscape. “The issues around organizing a massive distribution of a new vaccine are pretty similar.”\n\nThe U.S. can’t afford to make administrative errors during the Covid-19 pandemic, especially as the fall surge continues and the death toll mounts. States ultimately shape the actual vaccination programs, notes Marill in Medscape, and it’s up to them to decide who can administer the vaccine, and where. The hope is that state governments authorize as many people as possible to safely administer the vaccine and make access to it widespread and equitable. Neighborhood pharmacies will likely play a key role, as the HHS spokesperson suggests: “For example, during H1N1, once vaccines became widely available pharmacies played an important role in the vaccine distribution,” they said, adding that pharmacies’ role “is even more critical to vaccinations today and will be fully integrated into the distribution plan.”",
    "keywords": [
      "role",
      "future",
      "company",
      "mckesson",
      "public",
      "set",
      "roll",
      "distribution",
      "vaccines",
      "vaccine",
      "health",
      "spokesperson",
      "americas",
      "covid19"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------6a324b38_2821_4fca_8e45_0f3d99aee9d1-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://towardsdatascience.com/25-lesser-known-java-libraries-you-should-try-ff8abd354a94?source=extreme_main_feed---------4-73--------------------6a324b38_2821_4fca_8e45_0f3d99aee9d1-------",
    "title": "25 lesser-known Java libraries you should try in 2020",
    "publish_date": "2020-10-07 22:09:24",
    "authors": [
      "Md Kamaruzzaman"
    ],
    "summary": "JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape.\nIn enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform.\nWiremockHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development.\nLink:ConclusionIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries.\nThere are many excellent Java libraries that I have not listed here but worth a try.",
    "text": "1. RxJava\n\nReactive Extensions (ReactiveX) is a popular software development paradigm to deal with asynchronous and event-driven programming. RxJava is the Java VM implementations of the Reactive Extensions by using Observables. It extends the Observer Pattern to support event-driven programming by adding composable operators on a sequence of events/data in a declarative way. It also hides the low-level complexities like threading, thread-safety, synchronization, and concurrent data structure.\n\nIf you want to do reactive programming in Java, it is a must-have library.\n\nLink:\n\n2. OkHttp\n\nHTTP is by far the most used Application layer protocol. There are many excellent Java-based HTTP client libraries out there. But OkHttp is the simplest yet powerful HTTP client library in the JVM. It offers fluent and clean API to develop HTTP client in Java.\n\nIt also supports some advanced features: Connection pooling, GZIP shrink, response caching, modern TLS features, and many more.\n\nLink:\n\n3. MyBatis\n\nIn most Software development projects, we need to store data. Although there are many types of data storage, SQL is still the most used data storage type. As a Java developer, we need to match our Java object to the SQL table. One way to achieve the mapping is to use ORM (e.g., Hibernate). But there are many use cases when you want to have full control over the Object-Table mapping (e.g., Performance). In those cases, you can directly use JDBC and write the SQL query. The other way is to use MyBatis to map Java Object to Stored Procedure or SQL statements. It offers both annotation-based or XML descriptor based mapping.\n\nI prefer MyBatis over plain JDBC, especially in larger projects, as it improves the separation of concerns.\n\nLink:\n\n4. HikariCP\n\nHikariCP is the second library in this list related to Database. Establishing a JDBC connection is resource expensive. If you create a new connection every time you access the Database and close it once you are done, it can severely impact your application performance. Not to mention that failure to close the connection properly or allowing limitless database connection can crash your application.\n\nUsing Connection Pooling means connections are reused rather than created each time a connection is requested. HikariCP is a very fast yet lightweight Database connection pooling in JVM. It is also very reliable and a “zero-overhead” JDBC connection pool.\n\nLink:\n\n5. Lombok\n\nIn modern days, Java is often criticized as a verbose and bloated programming language. Compared to other popular languages (JavaScript, Python, Scala, Kotlin), a developer needs to write lots of boilerplate code in Java. Although Java has introduced Records in JDK 15 to reduce boilerplate code in Java, it is not an LTS release. Fortunately, a library can already reduce your boilerplate code in Java significantly: Project Lombok. You can generate getters, setters, hashcode, equals, toString, Builder classes by adding a few annotations. Additionally, it offers null pointer check, logger, and many more.\n\nLink:\n\n6. VAVR\n\nJava finally released the much-awaited functional programming via Lambda and Streaming in version 8. If you are used to functional programming or want to dive deep into functional programming, you may find Java’s functional programming wanting. Compared to many other functional programming languages (Haskell, Scala), Java is pale. VAVR is a library that can fill the gap of the functional programming features in Java. It provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nLink:\n\n7. Gson\n\nOver the years, JSON has become the de-facto data exchange format. In Java, there also exist several excellent libraries to deal with JSON. One of them is Jackson, which I have covered in my previous article. The other excellent library is Google’s Gson. Unlike Jackson, it is a minimalistic library and only supports JSON. It offers Data Binding, extensive Generic support, flexible customization. One of the major advantage (or disadvantage depending on your liking) of Gson is that it does not need annotation.\n\nLink:\n\n8. jsoup\n\nIf you are developing your application in Java and need to deal with HTML, you should use jsoup. It is a Java library to work with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data. It implements the WHATWG HTML5 specification and parses HTML using the best of HTML5 DOM methods. It supports parsing HTML from URL/string, find and extract data, manipulate the HTML elements, clean HTML, output HTML.\n\nLink:\n\n9. JIB\n\nIf you are working on an enterprise-grade application, it should be at least Cloud-ready. The first step to make your application cloud-ready is to containerize your application, i.e., put your artifactory binary into Docker image. Dockerizing a Java application is a bit tedious work: you need to have deep knowledge of Docker, you need to create a Dockerfile, and you will need Docker Daemon. Fortunately for the Java developers, Google has created an Open-source Java containerizer using already existing tools. You can use JIB as a Java library to build an optimized Docker and OCI image.\n\nLink\n\n10. Tink\n\nTink is yet another handy Java library in this list from Google. Cryptography and security are becoming increasingly more important in Software Development. Cryptographic techniques are used to secure user data. Implementing cryptography correctly requires a lot of expertise and effort. A group of Cryptographers and security engineers in Google has written the multi-language cryptographic library Tink. It offers easy-to-use but hard to misuse security API. Tink offers cryptographic functionalities via different primitives. It provides symmetric key encryption, streaming symmetric key encryption, deterministic symmetric key encryption, digital signature, hybrid encryption, and many other encryption functionalities.\n\nLink:\n\n11. Webmagic\n\nIf you work on Web crawling, you can write your own crawler, which is time-consuming and tedious. In Java, Webmagic is an excellent Web crawler library that covers the complete life-cycle of crawler: downloading, URL management, content extraction, persistence. It offers a simple yet flexible core, Annotation support, multi-threaded, and easy-to-use API.\n\nLink:\n\n12. ANTLR 4\n\nIf you work on parsing and processing data, then the ANTLR library could be handy. It is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It does this by giving us access to language processing primitives like lexers, grammars, parsers, and the runtime to process text against them.\n\nIt’s often used to build tools and frameworks.\n\nLink:\n\n13. Caffeine\n\nIf your application is read-heavy, then caching can dramatically improve your application’s data access performance. Java has many great caching libraries. Caffeine is the best among the lot. It is a high-performance, near-optimal caching library based on Java. It offers a fluent caching API and some advanced features like asynchronous loading of entries, asynchronous refresh, weak referenced keys, etc.\n\nLink:\n\n14. Metrics\n\nOnce your Java application runs into production, you will want to have insight into your application's critical components. Metrics from the Dropwizard framework is a simple yet compelling Java library that provides insight into your application and JVMs KPI, e.g., rate of events, pending jobs, service health check, and more. It is modular and offers modules for other libraries/frameworks.\n\nLink:\n\n15. gRPC-Java\n\nGoogle has created gRPC as a modern Remote Procedure Call system in 2015. Since then, gRPC became extremely popular and one of the most used RPC system in modern software development. The library gRPC-Java is the Java implementation of the gRPC client. If you want to use gRPC in Java, then this library can be handy for you.\n\nLink:\n\n16. Java WebSocket\n\nTraditional Client-Server communications unidirectional. WebSocket is a bi-directional communication protocol over a single TCP connection. Java WebSocket is a barebone WebSocket server and client implementation in Java. If you are a Java developer and want to work with WebSocket, this library is highly recommended.\n\nLink:\n\n17. JJWT\n\nJSON Web Token (JWT) is the de-facto Authorization and secure Information exchange format in modern software development. Whether you are using a simple session-based Authorization or highly advanced OAuth2 based Authorization, you will probably use JWT. JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape. It is fully RFC specification compliant on all implemented functionality. It supports readable and convenient fluent API.\n\nLink:\n\n18. Swagger-Core\n\nOpenAPI is the specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. Swagger-Core is the Java implementation of the OpenAPI specification. If you are exposing REST API in your Java/JavaEE application, you can automatically provide and expose your API definitions using Swagger-Core.\n\nLink:\n\n19. Async Http Client\n\nAsynchronous programming is becoming increasingly popular of late because of its non-blocking nature. Most of the popular Java HTTP client libraries offer limited to no asynchronous HTTP response processing. Async Http Client is a popular Java library that offers asynchronous HTTP response processing. As a bonus feature, this library also supports the WebSocket protocol.\n\nLink:\n\n20. Liquibase\n\nAs a software developer, we all know the importance of version control, DevOps, and CI/CD of our code. In a blog post: Evolutionary Database Design, the great Martin Fowler argued that we also need version control and CI/CD of our code. Liquibase is a tool that supports tracking, version controlling, and deployment of SQL database changes in Java Applications. If you are working with an SQL database where the database is evolving, this tool can greatly simplify your database migration.\n\nLink:\n\n21. Springfox\n\nI have already listed Swagger-Core in this list, which can automatically generate REST API documentation for vanilla Java or Java EE application. In enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform. In Spring-based Java applications, the Springfox library can automatically generate REST API documentation from the source code.\n\nLink:\n\n22. JavaCV\n\nOpenCV is a computer vision and machine learning software library. It is open-source and was built to provide a common infrastructure for computer vision applications. JavaCV is a wrapper on OpenCV and many other popular libraries (FFmpeg, libdc 1394, PGR FlyCapture) in the field of computer vision. JavaCV also comes with hardware accelerated full-screen image display, easy-to-use methods to execute code in parallel on multiple cores, user-friendly geometric and the color calibration of cameras and projectors, detection and matching of feature points, and many other features.\n\nLink:\n\n23. Joda Time\n\nJava had a poor date and time functionalities in the pre-Java8 core library. Java8 released much needed advanced date and time functionalities in its java.time package. If you are working with an older version of Java (pre Java8), Joda time can provide you the advanced date and time functionalities. However, if you are working in a newer version of Java, you may not need this library.\n\nLink:\n\n24. Wiremock\n\nHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development. During the writing Unit test, it is best to focus on SUT (System Under Test) and mock the services used in the SUT. Wiremock is a simulator for REST API and enables developers to write code against an API that does not exist or incomplete. In microservice-based software development, Wiremock can significantly boost development velocity.\n\nLink:\n\n25. MapStruct\n\nIn Java application development, you often need to convert one type of POJO to another type of POJO. One way to achieve this POJO or Bean conversion is to explicitly code the transformation, which is tedious. The smart way is to use a library that is specifically developed to transform POJO/Bean. MapStruct is a code generator that implements mapping between POJO/Bean on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe, and easy to understand.\n\nLink:\n\nConclusion\n\nIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries. These libraries are not domain-specific and can help you whether you are developing Software for Business applications, Robotics, Android Apps or Personal projects. Please note that for a large and wide eco-system like Java, this list is not conclusive. There are many excellent Java libraries that I have not listed here but worth a try. But this list of libraries can provide a quick peek into the world of the Java eco-system.",
    "keywords": [
      "2020",
      "development",
      "lesserknown",
      "libraries",
      "try",
      "library",
      "25",
      "application",
      "java",
      "need",
      "offers",
      "programming",
      "software",
      "data"
    ]
  },
  {
    "url": "https://towardsdatascience.com/fastapi-has-ruined-flask-forever-for-me-73916127da?source=extreme_main_feed---------5-73--------------------6a324b38_2821_4fca_8e45_0f3d99aee9d1-------",
    "title": "FastAPI has Ruined Flask Forever for Me",
    "publish_date": "2020-10-11 09:01:22",
    "authors": [
      "Fahmi Nurfikri"
    ],
    "summary": "FastAPI has Ruined Flask Forever for MeWhy I prefer using FastAPI instead of FlaskFastAPI Logo — https://fastapi.tiangolo.comWhat do you like best about being a data scientist?\nIf you need to look for something about FastAPI, you usually don’t need to look anywhere else.\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running.\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords.\nFastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.",
    "text": "FastAPI has Ruined Flask Forever for Me\n\nWhy I prefer using FastAPI instead of Flask\n\nFastAPI Logo — https://fastapi.tiangolo.com\n\nWhat do you like best about being a data scientist? It’s definitely modeling and fine-tuning for optimal results. But what does it mean to be a good model if it’s never used or never deployed?\n\nTo produce a machine learning model, the typical approach is to wrap it in a REST API and use it as a microservice. One of the most widely used frameworks for creating APIs is Flask.\n\nThe main reason Flask is widely used is its simplicity. In general, we only use the API to model predictions, so we don’t need a complex architecture (example: Django). Another reason is that Flask is written in Python, which is the language used to do machine learning modeling in general, so we are familiar with it.\n\nHowever, if you want to create a REST API with clear, static, inputs that are validated, you must include several different packages from several third parties that do not cooperate with each other. And you have to create custom code to get everything running.\n\nThis is what caused me to look for alternatives for my needs, where finally I found a framework called FastAPI and it became my new favorite framework. Here are the reasons why I like to use FastAPI.\n\nDocumentation\n\nThe first thing I notice from FastAPI is the documentation. FastAPI has very extensive documentation and rich examples, which makes things easier. If you need to look for something about FastAPI, you usually don’t need to look anywhere else.\n\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running. So that we don’t need to write the API documentation that we created ourselves. As we all know, writing API documentation is annoying, not only because there is a lot of detail to go into, but also nothing more frustrating when the end-users are implementing but not match up the documentation. So that with the automatic generation of API documentation it will be very helpful\n\nBelow is a display example of the API documentation (provided by Swagger UI)\n\nAlternative automatic documentation is also provided (provided by ReDoc)\n\nTo define the created schema, it uses Pydantic, which is another awesome Python library, used for data validation. Its purpose is to validate the input that goes to FastAPI. If the input/request is incorrect then the appropriate error code will be returned.\n\nPerformance\n\nAs the name implies, this is indeed FastAPI. Based on data from techempower benchmarks, FastAPI beats every framework when it comes to performance. Where the most commonly used frameworks like Flask and Django lag behind.\n\nFramework performance — techempower\n\nYeah, it blazingly fast.\n\nAsynchronous\n\nOne of the drawbacks of Flask is the lack of asynchronous I/O support. Asynchronous is pretty important for HTTP endpoints, which tend to do a lot of waiting for I/O and network chat, making it a good one candidate for concurrency using async.\n\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords. FastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.\n\nAll you have to do is declare the endpoints with the async keyword like this:",
    "keywords": [
      "api",
      "dont",
      "using",
      "forever",
      "framework",
      "documentation",
      "flask",
      "need",
      "used",
      "ruined",
      "asynchronous",
      "fastapi"
    ]
  },
  {
    "url": "https://medium.com/lessons-from-history/what-you-dont-know-about-the-famous-templar-knights-e225932969a3?source=extreme_main_feed---------6-73--------------------6a324b38_2821_4fca_8e45_0f3d99aee9d1-------",
    "title": "What You Don’t Know About the Famous Knights Templar",
    "publish_date": "2020-10-03 21:34:41",
    "authors": [
      "Nicol Valentin"
    ],
    "summary": "They wrote their rule with the help of a saintHumility, chastity, and strict obedience were major tenants of the Templar rule.\nHeck, a Templar wasn’t even allowed to kiss his own mother.\nProponents of this idea also cite the fact that Templar knights were forbidden meat on Mondays, Wednesdays, and Fridays.\nNot only did the king feel his money was physically secure in Templar banks, but the fact that almost every English county had a Templar presence helped too.\nAnd so it was with King Philip of France.",
    "text": "In 1119, dangers lurked everywhere in the Holy Land. Saracens (Moslems) butchered 300 Christians in March, and another 7000 that June.\n\nThings like this weren’t uncommon, and every pilgrim knew it. The French knight Hugh of Payns knew it. Only Hugh decided to do something about it.\n\nHe and a small band of warrior pilgrims soon joined in a brotherhood in which all agreed to take on a life of penance, poverty, and strict obedience. Unlike other knights of the time, they would defend the poor and innocent.\n\nEven to the point of sacrificing their own lives if necessary. Later, the group would gain official recognition under the name The Poor Fellow-Soldiers of Christ and the Temple of Solomon. We know them as the Templars.\n\nAlthough the early days of the Templars were uneventful, it didn’t take long for the men to make a name for themselves throughout Europe. Their role in the Holy Land began to expand, and soon they were defending the entire Levant from enemy invaders.\n\nToday, no image of the crusades is complete without a picture of a Templar knight in his white mantle emblazoned with a red cross. And yet, with all that imagery, there's more to the Templars than meets the eye. Much more.\n\nThey wrote their rule with the help of a saint\n\nHumility, chastity, and strict obedience were major tenants of the Templar rule.\n\nWhen a man joined the Templars, he had to swear off furs, fancy clothes, and those oh so stylish pointy shoes everyone was raving about. They were also pretty hardcore when it came to chastity.\n\nHeck, a Templar wasn’t even allowed to kiss his own mother. That’s a lot of energy going to moral fortitude. In the end, it helped them become the elite fighting force that they were.\n\nTemplars were also required to do the standard things like take care of orphans and widows, and defend the church. Standing in church when praying or singing was forbidden, as well as talking to the excommunicated.\n\nAll this makes sense when you consider the Templars were actually warrior monks. Their rule was partly composed by one of the most famous monks of all time, St. Bernard of Clairvaux.\n\nKnown as the Primitive Rule of the Templars, Bernard based it on the writings of St. Benedict and St. Augustine. The order had already been established several years before the rule was completed. So, in the end, it was basically everything the guys had already been doing.\n\nThey were said to have the gift of long life\n\nWhich is ironic since 90 percent of fighting knights died. However, thanks to a healthy diet and great hygiene, Templars had a good chance of living into their 60s.\n\nBarring any spears through the heart that is. That may not seem like a ripe old age to you, but in the Middle Ages, that wasn’t so bad. Some people attribute the brother's good health to something called “The Elixir of Jerusalem” which consisted of palm wine, aloe pulp, and hemp.\n\nProponents of this idea also cite the fact that Templar knights were forbidden meat on Mondays, Wednesdays, and Fridays. However, on Sundays Chaplins and clerks were allowed to eat meat at both lunch and dinner. According to the rule, “the rest of the household, that is squires and sergeants, shall be content with one meal and should be thankful to God for it.”\n\nFasting was undertaken between All Saints (Nov. 1) and Easter, with the exception of Christmas Day, the Assumption, and the Feast of the Apostles. Of course, we can’t leave out the fact that Templars were physically fit. Couch potatoes wouldn’t last long in an outfit like this after all.\n\nUp to 90 percent of members never went to combat\n\nThat's because they were busy managing the large economic infrastructure they created throughout Europe.\n\nIn fact, the Templars were arguably the first multinational cooperation, and it took a lot of guys to keep it going. Their reputation as defenders of the weak along with their pious behavior brought them to the attention of patrons of both high and low status.\n\nTemplar coffers overflowed with gifts like sheep farms, water mills, even isolated villages complete with serfs. Common workers left things in their wills to, like donkeys and small plots of land. And the templars never poo-pooed any of it.\n\nAll those small parcels were combined to form larger estates that were then leased out or farmed. Of course, the properties needed managers, and that task fell to the lay brothers. Beside gifted properties, there were the Templer houses, known as commanderies. This would be run by sergeants who were brothers from non-noble families.\n\nThey excelled in banking\n\nTheir widespread network of commanderies made it easy for Templars to set up a deposit system for traveling pilgrims.\n\nA fellow leaving from London, for example, could deposit his money in the city’s Temple church. As he embarked on the precarious journey overseas, he could concentrate on escaping the pitfalls of travel to the Lavant. The one thing he didn’t have to worry about was losing his money.\n\nOnce he arrived safely at his destination, he simply found the nearest Templar bank and presented his letter of credit. His funds were then safely returned.\n\nEven Kings trusted them with their money\n\nIt wasn’t just the little guys who benefited from the brother's banking system, though. Many kings looked to the Templars to bail them out financially.\n\nFrance in particular had a complicated financial relationship with them. Louis VII was the first king to seek a loan from the Templars at the end of the second crusade. Once he was home and his debt repaid, Louis placed what was left in his treasury under the protection of his Templar friends.\n\nFrom then on the French Treasury was run by the Templars, They took in and accounted for all payments made to the crown, as well as keeping account of the king's creditors and debtors. Money was taken in, stored, and paid out with statements going to the king three times a year.\n\nIn 1185 English King Henry II began using the Temple in London as his treasury. He trusted the Templars with coins, valuables, and even his jewels. Not only did the king feel his money was physically secure in Templar banks, but the fact that almost every English county had a Templar presence helped too. After the deadly battle of Hattin,\n\nHenry charged the Templars with collecting taxes to raise funds for a new crusade. His son, Richard the Lionheart, favored the knights as well. He exempted them from a host of taxes and had every sheriff in England pay them an annual stipend.\n\nBanking was part of their glory, but also their downfall\n\nThe downside to lending governments loads of money is it can make leaders cranky. And so it was with King Philip of France. Philip was far from the most pleasant fellow and he set his eyes on the Templars coffers.\n\nPhilips's grandfather King Louis IX was a saint, and Philip liked to believe he was the epitome of a holy king too. Yet it’s kind of hard to believe a guy is pious when he disputes with the pope (Boniface VIII) for five years (1296–1301).\n\nThe fight, not surprisingly, was over tax revenue. It only ended because Philip took some of his thugs to the papal palace, smashed through the doors, and roughed Boniface up so badly he died a month later.\n\nA Greedy King was their biggest enemy\n\nPhilip really wanted that tax revenue because France was in dire need of money.\n\nBy 1306 the country was in dire straits. A guy can get crazy when he's desperate for money, and desperate Philip was. So in the name of his fake piety, he came up with a story. It was a horrid story, a devious story — a blasphemous story.\n\nThe Templars, he said, were “vilely insulting our religious faith” by means of sodomy, idol worship, heresy, and black magic. Basically, everything contrary to what they had been fighting for since their inception.\n\nFrom there Philip had all the Templars round-up and tortured so they would confess to the false charges he put against them. He burned a few at the stake and eventually convinced the rest of the world of the brother's evil ways.\n\nFinally, the Pope (under pressure from Philip) had the order disbanded in 1312. Assets were given to another famous group of knights, the Hospitallers. Of course, Philip confiscated a huge sum of that as payment for all the work he put into ridding the world of the evil Templars.\n\nNotes and Sources:\n\nGentle reader, please don’t tell me about my picture. I already know. Unfortunately, no Templars were available for photographs. It’s a hard thing, writing about history.\n\nThe Templars, Dan Jones\n\nhttps://www.marketwatch.com/story/how-the-knights-templar-became-the-worlds-first-financial-services-company-2017-09-26#:~:text=It's%20sometimes%20said%20the%20Templars,t%20the%20first%20world's%20bankers.\n\nhttps://erenow.net/postclassical/the-real-history-behind-the-templars/25.php\n\nhttps://www.gq-magazine.co.uk/article/ten-things-you-never-knew-about-the-knights-templar\n\nhttps://www.warhistoryonline.com/medieval/nine-rules-knights-templar.html\n\nhttps://www.history.co.uk/shows/knightfall/articles/holy-money-how-the-knights-templars-got-so-rich\n\nhttps://www.bbc.com/news/business-38499883\n\nhttps://www.history.co.uk/shows/lost-relics-of-the-knights-templar/articles/13-things-you-didn%25E2%2580%2599t-know-about-the-knights\n\nhttps://thetemplarknight.com/2011/01/27/king-philip-crush-templars/",
    "keywords": [
      "dont",
      "templars",
      "philip",
      "king",
      "fact",
      "brothers",
      "knights",
      "famous",
      "rule",
      "know",
      "money",
      "wasnt",
      "templar"
    ]
  },
  {
    "url": "https://medium.com/swlh/working-with-a-really-terrible-developer-e942299ee1b4?source=extreme_main_feed---------7-73--------------------6a324b38_2821_4fca_8e45_0f3d99aee9d1-------",
    "title": "Working With a Really Terrible Developer",
    "publish_date": "2020-10-13 08:52:08",
    "authors": [
      "Chris Fox"
    ],
    "summary": "Working With a Really Terrible DeveloperWe recognize them.\nExternalitiesI was working until a few weeks ago on a distributed team for a company in England.\nThanks, L, I didn’t know how to spell “foreign key.”I came to dread the call because his abrasive and loud voice gave me a headache.\nI am usually a back-end developer; in this project L did all the back-end work.\nI didn’t know Django well enough to do it perfectly, not knowing where Python ends and Django begins (I really dislike Django, it shows no coherence or idiom), but I wrote out all the logic and status codes.",
    "text": "Working With a Really Terrible Developer\n\nWe recognize them. Managers often don’t.\n\nIf you’ve never had this experience you have my envy. You’re on a development team and one of the developers does sloppy work and there is nothing you can do about it.\n\nTime was when everyone in software from the first-day QA trainee to the executives had some experience at coding. That is long gone and now we have layers of methodology “masters” and managers who have never written a line, and who regard any and all complaints about others’ work as insubordinate and as personal conflicts, never considering the criticisms on their technical merits.\n\nIf I say that one of the other members of the group is doing shoddy work, even if I explain politely and in technical detail, managers hear “unpleasantness” and focus all their attention on team cohesion, which means I’m the one who gets in trouble.\n\nExternalities\n\nI was working until a few weeks ago on a distributed team for a company in England. One team member, whom I will refer to as L, not only did terrible work (more on this below) but on the daily Zoom status update was three times louder than anyone else in a voice that could etch diamond, made little effort to pronounce English clearly, and insisted on hijacking others’ computers with a compulsive screen-share that illuminated nothing, just so the rest of us could watch him wiggle his mouse.\n\nHe was mechanical. His reaction to any transition was always the same. His turn to talk? “Let me share my screen.” Get an error message? Take a screen shot. Explain a keyword? Another screen shot. Thanks, L, I didn’t know how to spell “foreign key.”\n\nI came to dread the call because his abrasive and loud voice gave me a headache. While everyone else on the team had mastered English well enough to be understood, L moved the accented syllables of words in a way that reminded of why so many companies that outsourced tech support to his country are now moving it to the Philippines.\n\nHe was unresponsive to communication and made changes to interfaces and API behavior without informing anyone of them. Since we did not have code reviews, which I tried hard to spearhead, we only discovered these wanton changes when things broke.\n\nWorst of all L appeared to get cognitively rebooted every few minutes. This company had its Git branches set up all wrong, two “master” branches in the same repo, one for the front end and one for the back. My cryptography work was in a branch off the front end “master.” We had been talking about the branches by name for about ten minutes, and it was clear as could be that I was doing my work in “frontend-crypto,” which we had both mentioned many times.\n\nHe suddenly asked me, apropos of nothing, “Chris, which branch are you working in?”\n\nThis sort of thing happened many times and managers would patiently explain to him what any eight year old could have followed. They could see he wasn’t tracking but for some reason it was only a problem when I expressed my frustration at having to explain simple matters over and over.\n\nBad Code\n\nI usually work in the C family of languages and in web development I write in C#. I had to learn JavaScript, Python, and Django. I ended up working almost exclusively in JavaScript and in the front end. I am usually a back-end developer; in this project L did all the back-end work.\n\nHe did a lot of work, all of it very low quality. In addition to industry standard illegibility he did the absolute bare minimum in rigor that he could get away with.\n\nI Write an Endpoint\n\nI needed a new API, one that would return two or more rows for recipients who may or may not already be in the database. I didn’t know Django well enough to do it perfectly, not knowing where Python ends and Django begins (I really dislike Django, it shows no coherence or idiom), but I wrote out all the logic and status codes.\n\nSuppose I called this API seeking the encryption keys for ten people. Here are the number found and the HTTP status codes in my original bad Django:\n\nNumber returned HTTP code\n\n10 200 (full success)\n\n1-9 206 (partial content)\n\n0 204 (data not found)\n\nserver exception 500 (exception)\n\nIf the response had fewer rows than the number requested I returned an array of their not-found identifiers.\n\nI turned it over to L to fix up the Django syntax, not to rewrite it, but this is what he did:\n\nNumber returned HTTP code\n\n10 200 (full success)\n\n1-9 200 (wrong)\n\n0 200 (wrong)\n\nserver exception 400 (wrong)\n\nSo even if not a single row was returned, he called it a complete success, and he removed my array of the rows not found, so the client had to enumerate the returned data, compare to the request and determine which ones didn’t come back. And a server exception returned 400, Bad Request, which was completely wrong.\n\nThis guy was supposed to be their back end expert. I expected him to know these codes; I don’t know every single one of them but I know the dozen or so most common ones. And even with the logic and intended status codes right in front of him he threw it all away and did it “his way.”\n\nTo be fair there are multiple schools of thought on how to handle intermediate levels of API success. I almost never see any 2XX status code other than 200; that and 500 are the only codes most developers return.\n\nIt would be charitable to allow that L had his own approach that was different from mine; in my view we have more than four status codes for a reason, and I use them. I knew however from months of working with him that he had just copied and pasted in 200 for all of them; he left my sieving logic for the cases above (0, 1–9, 10) but pasted the same line without checking.\n\nIn any case an API is a transaction and if he changed the behavior it was incumbent on him to inform me or whoever was issuing the call, expecting these more detailed status codes. Not only did he fail to do so, he never answered me when I asked him about it. This isn’t teamwork. This was a pattern in working with him. Since this project had no QA it would likely have been customers who first saw the holes in the logic.\n\nManagement Reaction\n\nI was furious. I had done it all correctly except for the Django syntax which he could have fixed in under a minute, but instead he rewrote the whole thing with significantly altered logic. And of course his code looked like a pair of cats had fought on the keyboard.\n\nI tried asking L why he had made these changes but when he ignored me as usual I asked the managers for a conference call. I showed them what I’ve written above. They tut-tutted and said they would talk to L about it. I don’t think they did, because two weeks later it was still unchanged.\n\nAnd they paid this guy.\n\nSo if they didn’t talk to L then they probably decided I was bringing conflict to the team, though they never told me so. This was my last item in the work, all my stuff worked except this mangled API. I was done. With three new languages under my belt and experience in a really cool cryptographic implementation.\n\nI didn’t bother talking to L again. What would be the point? He had done a bare minimum lousy job and in his work ethic that was just fine. In previous debates on design he had contributed nothing. I could have mentored him but I knew from months of working with him that he would have ignored me and gone on doing things the way he was accustomed: sloppy, shoddy, and illegible.\n\nManagers Who Don’t Know Code\n\nAs with so many who say that “people skills” are more important than “coding skills,” the managers on this project were more interested in keeping things nicey-nicey in the team than in doing a solid product. Since this was a very security-centric application it was more vital than usual to do the most rigorous job possible, but they allowed L’s sloppy rewrite to remain.\n\nTheir attitude toward my report was probably that there was some “friction” between me and L; I got along fine with everyone and managed to mask my frustration with L and his mysterious context-loss episodes and godawful code, and my part was about done so not much came of this.\n\nThis is what comes of regarding software development as a social activity. It sure as hell isn’t engineering yet.\n\nBut had I been the development lead, L would have been looking for another job.\n\nThere is a continuum in the software development work ethic; the two poles are\n\nDo it as perfectly as possible and to hell with the deadlines Do as little as you can get away with and make clearing your task list your only priority. Take up the slack by writing unit tests (which we didn’t do).\n\nL and I were at opposite poles of this continuum. Stir in his disinterest in communication and we had a mess.",
    "keywords": [
      "returned",
      "django",
      "l",
      "didnt",
      "status",
      "managers",
      "developer",
      "really",
      "terrible",
      "team",
      "working",
      "know",
      "work"
    ]
  },
  {
    "url": "https://medium.com/the-ascent/how-i-make-an-extra-1-000-per-month-without-breaking-a-sweat-79da349bee6b?source=extreme_main_feed---------8-73--------------------6a324b38_2821_4fca_8e45_0f3d99aee9d1-------",
    "title": "How I Make An Extra $1,000 Per Month Without Breaking A Sweat",
    "publish_date": "2020-09-21 16:32:45",
    "authors": [
      "Cheshta Mann"
    ],
    "summary": "How I Make An Extra $1,000 Per Month Without Breaking A SweatThe catch is to spend 1–2 hours daily to make this side hustle work.\nPhoto by Chronis Yan on UnsplashHave you ever thought of having at least one additional income source besides your regular 9–5 job?\nWell, having an extra source of income never hurts.\nAfter getting a full-time job in a financial organization in 2019, I thought I had achieved financial stability.\nWell, having an extra source of income never hurts.",
    "text": "How I Make An Extra $1,000 Per Month Without Breaking A Sweat\n\nThe catch is to spend 1–2 hours daily to make this side hustle work.\n\nPhoto by Chronis Yan on Unsplash\n\nHave you ever thought of having at least one additional income source besides your regular 9–5 job? While a full-time job meets your fixed and lifestyle expenses, the side hustle helps you utilize that money for future investments or savings.\n\nWell, having an extra source of income never hurts.\n\nIt helps you support yourself as well as your family’s needs better. But sometimes, we feel clueless about where to start.\n\nI was in the same boat a few years ago. I had a lot to accomplish but had no idea about getting started. I wanted to make money and land a stable job that helped me achieve my first objective, that was to make money and be financially independent. After getting a full-time job in a financial organization in 2019, I thought I had achieved financial stability.\n\nIt was true to some extent. I received decent pay-checks on a bi-weekly basis, and I was able to meet my monthly expenses, and satiate my lifestyle costs with them. Furthermore, I was able to keep some of the amounts aside for my further studies, savings, and investments.\n\n“Some people want it to happen, some people wish it would happen, others make it happen.” — Michael Jordan\n\nDespite having my savings and expenses on track, I knew that I could devote my time and energy to earning a little extra per month. Moreover, watching the idiot box and scrolling down through my IG feed was becoming toxic. So, to keep a check on my sanity and ensure that I was utilizing my time in the right manner, I decided to contribute a few hours of my day towards the side gigs that I’ll be discussing below.\n\nWell, having an extra source of income never hurts. One can use that chunk for meeting personal obligations and improving their skills.\n\nAccording to research published in Harvard Business Review, individuals who were working in a full-time profession, as well as a side hustle, exhibited more signs of empowerment followed by being in charge of their emotional and cognitive well-being. The study was based on the sample size of 1,000 individuals who spent an average of 13 hours every week on their side hustle for 4 days.",
    "keywords": [
      "1000",
      "month",
      "sweat",
      "breaking",
      "job",
      "hustle",
      "source",
      "income",
      "money",
      "having",
      "happen",
      "fulltime",
      "hours",
      "extra"
    ]
  },
  {
    "url": "https://medium.com/bigger-picture/tucker-carlson-got-it-right-7556391c827?source=extreme_main_feed---------9-73--------------------6a324b38_2821_4fca_8e45_0f3d99aee9d1-------",
    "title": "Tucker Carlson Got It Right",
    "publish_date": "2020-10-02 21:47:02",
    "authors": [
      "Deborah Handover"
    ],
    "summary": "Tucker Carlson Got It RightAnd it’s high time we listenedMonday night, Tucker Carlson covered the recent breaking news that President Trump paid only $750 in federal income taxes during the first two years of his presidency and no income taxes at all for 10 of the 15 years on record.\nIndeed, just as Carlson said, many Americans voted for Trump because they believed he would right the imbalance, taking power from the elites to bolster the middle class.\nBut here’s what Carlson, alongside those 2016 Trump voters, missed: Donald Trump is, and always has been, one of those elites.\nCarlson was quite right to say that billionaires should not pay lower taxes than you do, no matter who they are.\nWill four more years of this administration produce a new, truly populist Donald Trump?",
    "text": "Tucker Carlson Got It Right\n\nAnd it’s high time we listened\n\nMonday night, Tucker Carlson covered the recent breaking news that President Trump paid only $750 in federal income taxes during the first two years of his presidency and no income taxes at all for 10 of the 15 years on record.\n\n“Trump’s accountants took advantage of the many provisions in our tax code to make that possible,” Carlson said during the segment. “What the president did was legal — in fact it’s all but universal among the affluent who earn their money from investments rather than from salaries.”\n\n“Should the president have used these conventional tax loopholes to his own benefit?” Carlson asked, “We’ll leave that to the ‘professional hyperventilators’” — referring to liberal news networks — “on the other channels….But far more interesting is this question: Why does our tax code remain so obviously, so grotesquely unfair?”\n\nCarlson continued:\n\n“Billionaires should not be paying a lower rate than you are paying, no matter who they are, no matter who the president is. The main problem with America right now is that a shrinking group of people controls a growing share of our nation’s wealth and power. America is lopsided, and it’s getting more lopsided every year. That makes our country unstable. “Lopsidedness….is why young people seem so hopeless and nihilistic, why so many of them are not starting families. It’s why some of them are breaking things in the streets. It’s why your grandchildren will almost certainly earn less than you do. And by the way, it’s also why Donald Trump got elected four years ago. Americans could feel that something was profoundly wrong with the way our country was structured…. It seemed clear that the people in charge were in it for themselves.”\n\nCarlson closed his monologue by declaring that the “core drivers of the crisis that we face — a dying middle class and the growing hegemony of billionaires — remain unresolved.” He forewarned a “guaranteed disaster,” saying that if the economy is not “flattened” soon, “America is going to become a very radical place.”\n\nCarlson’s comments reflect a fairly typical conservative outlook — that the middle class is constantly forced to bear the burden of America’s economic hardship while the affluent, elite “ruling class” protects itself. Conservatives have long been proponents of flat tax rates. Indeed, just as Carlson said, many Americans voted for Trump because they believed he would right the imbalance, taking power from the elites to bolster the middle class.\n\nBut here’s what Carlson, alongside those 2016 Trump voters, missed: Donald Trump is, and always has been, one of those elites. And he has no intention of flattening a system that directly benefits him.\n\nIt’s well-known that Donald Trump was born to an affluent NYC real estate mogul, and even Trump’s version of his success story begins with a $1 million loan from his father. But a 2018 New York Times investigation found that Fred Trump frequently avoided paying federal income taxes by undervaluing his investments and funneling money to his children. According to financial statements, the president had been earning $200,000 a year by the age of three and was a millionaire by age eight.\n\nNow, the Times alleges that Trump readily uses his father’s tried-and-true tax avoidance methods, including funneling hundreds of thousands to his daughter Ivanka under the guise of “consulting fees.” In other words, Donald Trump is carrying on the time-honored tradition of American billionaires skirting their duty to contribute to their country— in this case, the country Trump himself runs.\n\nSo, why does our tax code remain so grotesquely unfair? In the nearly four years that Trump has been president, why has he not only failed to fix the imbalance that his voters elected him to fix, but allowed America to “get more lopsided every year”? Why did he cut the corporate tax rate by 14% in 2017, if big corporate moguls are the “main drivers” of the wedge between the middle and upper class? How were big corporations allowed to snap up $243 million of the $349 billion made available to small businesses that were suffering from lockdown closures? How were billionaires allowed to increase their profits by nearly $640 billion while 40 million Americans filed for unemployment?\n\nThe answer, to which many Americans are now waking up, is that Trump never planned to “flatten” the economy. He never planned to correct that imbalance, to dismantle the system that made him rich and benefit a class he was never part of. He is, just as Tucker Carlson said, only in it for himself.\n\nCarlson was quite right to say that billionaires should not pay lower taxes than you do, no matter who they are. And he was quite right to say that the American people elected Trump because they sought a leader who would level the playing field. But that’s why, in this case, who the president is matters quite a bit. This was the job America hired Donald Trump to do. Not only did he fail to do it; it turns out he is an enthusiastic participant in the very system voters elected him to dismantle.\n\nWill four more years of this administration produce a new, truly populist Donald Trump? Will it end the practice of billionaires like Trump exploiting the nation’s tax code and forcing the middle class to shoulder the economic burden? That’s for voters to decide. But, perhaps, the next time a politician says it’s time for the “rich to start paying their fair share,” think for a moment about what Tucker Carlson would say.",
    "keywords": [
      "trump",
      "tax",
      "america",
      "voters",
      "class",
      "middle",
      "carlson",
      "president",
      "billionaires",
      "tucker",
      "right",
      "donald"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------32444c5b_b51f_4aba_8628_0616c63b3a3a-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------32444c5b_b51f_4aba_8628_0616c63b3a3a-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------32444c5b_b51f_4aba_8628_0616c63b3a3a-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------32444c5b_b51f_4aba_8628_0616c63b3a3a-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------32444c5b_b51f_4aba_8628_0616c63b3a3a-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------0-74--------------------9693c868_ce26_4562_a122_40c6b740d10e-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://hjauquet.medium.com/i-am-a-pro-life-housewife-1ff2cf1b05ec?source=extreme_main_feed---------1-74--------------------9693c868_ce26_4562_a122_40c6b740d10e-------",
    "title": "I am a Pro-Life Housewife",
    "publish_date": "2020-10-15 13:43:33",
    "authors": [
      "Heather Jauquet"
    ],
    "summary": "I am a Pro-Life HousewifeAnd I’m not voting for TrumpPicture by Maria Oswalt on UnsplashAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\nThey are seeing that while Trump is considered the pro-life candidate, he is not pro-life.\nBeing pro-life means having a consistent life ethic from womb to tomb.\nPro-life means honoring the sanctity of life at all stages.\nDon’t discount the vote of the pro-life housewife who is working towards change.",
    "text": "I am a Pro-Life Housewife\n\nAnd I’m not voting for Trump\n\nPicture by Maria Oswalt on Unsplash\n\nAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\n\nI acknowledge that I hate discussing politics and often hesitate to share my views. On the rare occasions I do, it’s usually about my support for the sanctity of human life. I have been admonished by friends from both political parties telling me that I am not pro-life enough, or I’m anti-woman, or I’m not Christian enough, or that I’m too naive. One person, went even so far as to tell me about her “great disappointment” in me and suggested I shouldn’t share my views or should only share them with like-minded people. But if I do as she suggested, my views go in an echo chamber and I forgo the opportunity for rich discussion and to see another perspective. While I might not change someone’s mind, I hope we walk away with a different perspective and the willingness to view every story with grace and compassion.\n\nI grew up loving Jesus and loving my country And now, as a pro-life religious conservative, I’m feeling bereft, without a political party who represents me. To be honest, I felt that way at the last election and even more so now. I disagree with the democratic platform on the issue of abortion. But I abhor the ongoing lack of respect for human life as demonstrated by the current president.\n\nAs we get closer to the U.S. Presidential election there is a contingent of pro-life Catholics and evangelicals who are making their departure from supporting Trump known. They are seeing that while Trump is considered the pro-life candidate, he is not pro-life. His actions against the marginalized show the truth.\n\nBeing pro-life means having a consistent life ethic from womb to tomb. It means valuing human life at all stages, not just when it’s convenient. Often when a new election looms on the horizon the discussion of life becomes a heated topic of debate: When should life be valued? Who is valued?\n\nI cannot in good conscience vote for a man who doesn’t value human dignity and decency. I cannot embrace the politics of a man who is willing to put children in cages and has not, as of yet, addressed the allegations of forced hysterectomies on Immigration and Custom Enforcement (ICE) detainees.\n\nI cannot support a leader who refuses to face the pandemic head on in hopes that it will disappear. The leader of our country mocked his political opponent for wearing a mask and then came down with the very plague he tried to ignore. Then he exposed his staff to the virus. That is not pro-life. It’s a flagrant display of ego and of disrespect for the people who work for him and the 209,000 dead that preceded his diagnosis.\n\nI cannot support a man who is unwilling to denounce white supremacy. It is not pro-life when President Trump refused to denounce white supremacy, but instead told the Proud Boys to “Stand back and stand by.” Pope Francis said in a message to the people of the United States after the killing of George Floyd: “We cannot tolerate or turn a blind eye to racism and exclusion in any form and yet claim to defend the sacredness of every human life.”\n\nWhen then candidate Trump mocked a disabled journalist during the 2016 campaign some people laughed, more were disgusted. His mockery is not pro-life. It points fingers and makes fun of people who are not neurotypical. I have a neurodivergent son and to know that he would be mocked or have his disability used against him is infuriating and heart wrenching. I expect more out of a leader. I expect compassion and restraint.\n\nHow can we support a pro-life candidate who is anything but? His hypocrisy is blatant.\n\nI am ardently pro-life. I hold that position because I believe in the dignity and the sanctity of human life. I believe we are made in the image of God and when we love one another we share the love of Jesus. I believe life is sacred. All life. I believe it begins in the womb and ends at natural death. At a lecture at Fordham University, Cardinal Joseph Bernardin shared this consistent life ethic: “The spectrum of life cuts across the issues of genetics, abortion, capital punishment, modern warfare and the care of the terminally ill.” In short, it’s valuing all life: the infirm, the dying, the disabled, the ones in cages whether they be prisons or at the border, the mentally ill.\n\nWe should show empathy, compassion, and grace when we talk to people about their situations. If we refuse to acknowledge the humanity, do people’s stories simply become pawns in our political stances?\n\nI believe we are called to serve one another. I believe in grace. I believe we shouldn’t be reduced to our mistakes. I believe that we are all broken, and that in our brokenness we can learn to see the whole person and embrace grace. Bryan Stevenson beautifully articulates how brokenness brings about compassion in his book Just Mercy: A story of Justice and Redemption. In his book, Stevenson describes our broken judicial system where too many are given a death sentence for crimes that they did not commit or crimes that do not warrant it.\n\nThe most politically active part of the pro-life position seeks an end to abortion. I fervently wish for an end for abortion. We also need to put in resources to empower women. This means consistent and available health care. This means jobs and housing. This means education. It means giving women the ability to support themselves and their children. It means support. We cannot demonize women for their decisions if we turn a blind eye to their needs. There are religious organizations that help women in crisis pregnancies and one of my favorites is The Gabriel Network whose slogan is “Empower Women.” They not only provide housing, but also angel friends who take women to their appointments, spend time with them getting to know them, and help by anticipating their needs whether it be friendship, baby supplies, or a hand to hold. The Gabriel Network also provides scholarships to help women further their education and careers.\n\nMany people see a pro-life position as a religious one. It is for me, but, it doesn’t have to be. Pro-life means honoring the sanctity of life at all stages. There are other organizations not affiliated with any religion that support a consistent life ethic such as New Wave Feminists and Rehumanize International. New Wave Feminists recognizes the “…full humanity of both the unborn child and the mother and looks to rebuild a culture that embodies legitimate justice for all.” Rehumanize International is a “…human rights organization dedicated to creating a culture of peace and life, and in so doing…seek to bring an end to all aggressive violence against humans through education, discourse, and action.”\n\nWhat if we set aside the presuppositions that being pro-life means that it is only a religious issue or a political stance? What if we used our time and energy to support, encourage, and embrace the sanctity of human life? When we stop pitting pro-choice and pro-life advocates against one another, we could do beautiful work together and shelter the homeless, clothe the naked, and feed the hungry. We can empower women, provide adequate healthcare, end racism, and advocate for social justice.\n\nAs I continue to read, listen, and learn, I embrace the dignity and sanctity of all human life. I acknowledge that if we want to change minds and change hearts, we have to be willing to listen to one another. Don’t discount the vote of the pro-life housewife who is working towards change.",
    "keywords": [
      "life",
      "women",
      "trump",
      "housewife",
      "human",
      "prolife",
      "believe",
      "support",
      "means",
      "sanctity",
      "political"
    ]
  },
  {
    "url": "https://medium.com/swlh/how-stealing-your-childrens-crayons-can-solve-your-ios-stackview-problems-c2aa5b707b02?source=extreme_main_feed---------2-74--------------------9693c868_ce26_4562_a122_40c6b740d10e-------",
    "title": "How Stealing Your Children’s Crayons Can Solve Your iOS StackView Problems",
    "publish_date": "2020-10-16 02:34:06",
    "authors": [
      "Austin Ramsdale"
    ],
    "summary": "Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other.\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here.\nLuckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\nWe can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view.\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons.",
    "text": "Designing responsive and performant iOS apps can be a frustrating chore for new developers. Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other. Alternatively, designing user interfaces programmatically may be preferred, but can take years of mastery and an in-depth understanding of the underlying display engine; and we haven’t even considered the varying sizes and layouts!\n\nIf you’re having issues laying out your interface and getting it to play nicely with the various sizes and orientations, here are some quick tips using nested StackViews that may be able to help you organize and speed up your development process!\n\nFor this article, I am using a Swift recreation of the simple calculator, but you’ll notice that there are two key buttons that differ in size and orientation from the others — creating a complication with traditional stack views, and can be really problematic when using conventional constraints and expecting them to orient properly.\n\nSo how did I tackle this quickly and easily? As the title might suggest, grab any markers, pens, or crayons you may have at your disposal, and start by printing out a copy of the Storyboard. You can also design it on-screen, but for many (myself included), putting pen-to-paper helps to unlock that creative critical thinking that is sometimes needed to crack the visual code.\n\nTo start, I need to outline the largest “block” of interactive elements that I want to organize and manipulate. I’ve marked the corners in red, but instead of working from the outside in, I’m now going to look for the elements that need specific handling, focusing on fitting them into a balanced container, called a Stack View, and then working outwards.\n\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here. Additional information can be found in Apple’s “App Development with Swift” in section 2.1.\n\nAs you can see, the two elements we need to work with are the “0” button, which spans 2x the conventional button width (below button “1” and “2”), and the “=“ button, which inconveniently spans 2x the conventional button height. Luckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\n\nNow that I’ve identified the unique elements, we can see that the buttons fit into a larger chunk of blocks, outlined in green below. We can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view. Lastly, we need to distribute the “1” and “2” buttons evenly, so they share the space inside of the block.\n\nSimilarly, the “=“ , “3”, and “.” button share the lower right block. We create a vertical stack view and put the “=“ button on the right side, and we’ll nest an additional horizontal stack view on the left, putting the “3” in the top, and “.” In the bottom, with “Fill equally” as the distribution method here as well.\n\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons. This makes it a little easier, but it helps to create “balanced” or even blocks where possible.\n\nConveniently, the buttons fit in a 3x4 grid for both top and bottom, so I drew two larger encompassing blocks in blue around those segments, and labeled them “Upper Stackview” and “Lower Stackview”, respectively. You’ll notice that I’ve also started to fill-in other attributes in the margins, marking both the top and bottom blocks as “Fill equally” also (however, the bottom is wrong — it’s actually Fill proportionally, but more on that in a bit).\n\nNow, I simply need to group and space the remaining buttons, starting with drawing a box around the “4”, “5”, “6”, and “-“ buttons, placing them in a vertical stack view, and doing the same with the “Upper Stackview” (highlighted in orange).",
    "keywords": [
      "blocks",
      "stealing",
      "buttons",
      "view",
      "problems",
      "childrens",
      "crayons",
      "button",
      "elements",
      "views",
      "stackview",
      "need",
      "vertical",
      "solve",
      "ios",
      "conventional",
      "stack"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------9693c868_ce26_4562_a122_40c6b740d10e-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://uxdesign.cc/the-future-of-apple-ipad-b659b7da75a7?source=extreme_main_feed---------4-73--------------------9693c868_ce26_4562_a122_40c6b740d10e-------",
    "title": "The future of Apple iPad",
    "publish_date": "2020-10-09 22:27:25",
    "authors": [
      "Ali Çorak"
    ],
    "summary": "Harddisk connection, mouse, Bluetooth mouse, Bluetooth keyboard, keyboard with USB-C, etc…We were able to use the iPad as a computer with keyboards.\nAlthough the Magic Keyboard is made for iPad Pro, which is more advanced than other iPads, it now supports iPad Air 4th generation.\nWe use the iPad in a horizontal position with Magic Keyboard.\nWe don’t need a new computer, we’re just looking for a screen; iPad provides this with Sidecar support.\nWhen John Ive left Apple, he founded the design agency LoveFrom and his first customer was Apple.",
    "text": "Catalyst takes care of everything when you develop for iPadOS or iOS with recommendations from Apple. The application becomes available for macOS. As you can imagine, it looks “like a Mac” on the iPad. Also, if you have written your application with Swift, Catalyst is not needed. SwiftUI will automatically adapt to macOS. But SwiftUI supports iOS13 and above. This means that devices with the latest iOS 12 (such as iPhone 6, which are currently widely used in the market) will not be supported.\n\nIt’s a Computer. Because;\n\niPad Pro + Magic Keyboard\n\nAfter making software innovations to the old generations and hardware to the new generations, the iPad became a computer. Harddisk connection, mouse, Bluetooth mouse, Bluetooth keyboard, keyboard with USB-C, etc…\n\nWe were able to use the iPad as a computer with keyboards. But some things could affect the user experience. (Touching the screen and using the keyboard was difficult for some) But then the trackpad came on the Magic Keyboard. Although the Magic Keyboard is made for iPad Pro, which is more advanced than other iPads, it now supports iPad Air 4th generation.\n\nIf we talk about other hardware details, if you use your iPad Pro with Magic Keyboard, there are 2 USB-C ports in total; Like MacBook Air. This is an advantage because any extra accessory you buy for the MacBook can be used for the iPad. (and yes, wish we didn’t have to buy extra accessories) In the end, Magic Keyboard does not move 360 ​​degrees like the Smart Folio Keyboard. I don’t know why but I think it looks like a laptop.\n\nWe use the iPad in a horizontal position with Magic Keyboard. That’s why sidebar matters. But as a problem, some applications open vertically even in a horizontal position. (Maybe it will improve in the future because it will not give a MacBook experience like this)\n\nNote: If you are used to doing operations such as volume up/volume down increase/decrease screen light from the keyboard, unfortunately, there are no top keys in Magic Keyboard.\n\nIt’s Not a Computer. Because;\n\nApple’s Sidecar\n\nWhen using a laptop or desktop, we sometimes need a second screen. We don’t need a new computer, we’re just looking for a screen; iPad provides this with Sidecar support. iPad is not a computer here; a screen.\n\nAnother topic is games; We know that MacBook is not preferred for games. But the iPhone performs well in games. I’m not a gamer but in games, the iPad performs like an iPhone, not MacBook. Moreover, there is controller support.\n\nThe iPadOS should no longer be compared to the iPhone or the Mac. It seems to be between macOS and iOS, but it is not. Special applications should be made for the iPad. For example, the Sharpr3D app is just for the iPad.\n\nSharpr3D\n\nIn other words, you can also do professional works such as 3D modeling, video editing, photo editing on the iPad. So what’s the limit? It’s not currently at the Mac level. You can edit a very good video with an app such as Luma Fusion, iMovie, Adobe Rush on iPads. But when you want to take this to a more professional level, iPads will not be suitable for you.\n\nLuma Fusion\n\nNote: Everyone talks about Apple after John Ive. When John Ive left Apple, he founded the design agency LoveFrom and his first customer was Apple. So Apple still works with John Ive.",
    "keywords": [
      "future",
      "iphone",
      "ipad",
      "computer",
      "magic",
      "screen",
      "macbook",
      "games",
      "used",
      "apple",
      "keyboard"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/software-architecture-the-important-architectural-patterns-you-need-to-know-a1f5ea7e4e3d?source=extreme_main_feed---------5-73--------------------9693c868_ce26_4562_a122_40c6b740d10e-------",
    "title": "Software Architecture: The Most Important Architectural Patterns You Need to Know",
    "publish_date": "2020-10-15 08:17:04",
    "authors": [
      "Trung Anh Dang"
    ],
    "summary": "Software Architecture: The Most Important Architectural Patterns You Need to KnowExplaining common different architecture patternsPhoto by Alexander Andrews on UnsplashAn architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context.\nMany programmers are nowadays still confused about the difference between architecture patterns or don’t even know much about it.\nLayered ArchitecturePipe and FilterClient ServerModel View ControllerEvent Driven ArchitectureMicroservices ArchitectureLayered ArchitectureThe most common architecture pattern is the layered architecture or known as the n-tier architecture.\nOn the second concept, the layered architecture pattern is a technically partitioned architecture as opposed to a domain partitioned architecture.\nPipe and FilterOne of the patterns in software architecture that appears, again and again, is the pipe-filter pattern.",
    "text": "Software Architecture: The Most Important Architectural Patterns You Need to Know\n\nExplaining common different architecture patterns\n\nPhoto by Alexander Andrews on Unsplash\n\nAn architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context.\n\nA pattern is a solution to a problem in a context.\n\nMany programmers are nowadays still confused about the difference between architecture patterns or don’t even know much about it.\n\nLet me explain to you…!\n\nLayered Architecture\n\nPipe and Filter\n\nClient Server\n\nModel View Controller\n\nEvent Driven Architecture\n\nMicroservices Architecture\n\nLayered Architecture\n\nThe most common architecture pattern is the layered architecture or known as the n-tier architecture. It is widely known by most software architects, designers, developers. Although, there are no specific restrictions in terms of the number and type of layers that must exist, most layered architecture consists of four tiers: presentation, business, persistence and database as follows.\n\nan popular example of n-tier architecture\n\nContext\n\nAll complex systems experience the need to develop and evolve portions of the system independently. For this reason, the developers of the system need clear and well-documented separation of concerns, so that modules of the system may be independently developed and maintained.\n\nProblem\n\nThe software needs to be segmented in such a way that the modules can be developed and evolved separately with little interaction among the parts, supporting portability, modifiability, and reuse.\n\nSolution\n\nTo achieve this separation of concerns, the layered pattern divides the software into units called layers. Each layer is a grouping of modules that offers a cohesive set of services. The usage must be unidirectional. Layers completely partition a set of software, and each partition is exposed through a public interface.\n\nThe first concept is each of the layers has a specific role and responsibility. For example, the presentation layer would be responsible for handling all UI. Because this separation of concerns within the layered architecture makes it easy to build effective roles and responsibility.\n\nOn the second concept, the layered architecture pattern is a technically partitioned architecture as opposed to a domain partitioned architecture. They are groups of components, rather being by domain.\n\nThe last concept is that each of the layers in the layered architecture is marked as being either closed or open. A closed layer means that a request moves from layer to layer, it must go through the layer right below it to get to the next layer below that one. The request cannot skip any layers.\n\nClosed layers and request access\n\nWeakness\n\nLayers contribute to a performance penalty. The pattern does not lend itself to high-performance applications because it is not efficient to go through multiple layers of the architecture to fulfill a business request.\n\nThe addition of layers also adds up-front cost and complexity to a system.\n\nUsages\n\nWe should use this style for small, simple applications or websites. It is a good choice for situations with a very tight budget and time constraints.\n\nMulti-Tier Pattern\n\nContext\n\nIn a distributed deployment, there is often a need to distribute a system’s infrastructure into distinct subsets.\n\nProblem\n\nHow can we split the system into a number of computationally independent execution structures: groups of software and hardware connected by some communications media?\n\nSolution\n\na multi-tier example — consumer website J2EE\n\nThe execution structures of many systems are organized as a set of logical groupings of components. Each grouping is termed a tier.\n\nWeakness\n\nSubstantial up-front cost and complexity.\n\nUsages\n\nUsed in distributed systems.\n\nPipe and Filter\n\nOne of the patterns in software architecture that appears, again and again, is the pipe-filter pattern.\n\nthe pipe filter style\n\nContext\n\nMany systems are required to transform streams of discrete data items, from input to output. Many types of transformations occur repeatedly in practice, and so it is desirable to create these as independent, reusable parts.\n\nProblem\n\nSuch systems need to be divided into reusable, loosely coupled components with simple, generic interactionmechanisms. In this way they can be flexibly combined with each other. The components, being generic and loosely coupled, are easily reused. The components, being independent, can execute in parallel.\n\nSolution\n\nPipes in this architecture form the communication channel between filters. The first concept is each of the pipes is un-directional and point to point for performance reasons, accepting input from one source and always directing output to another.\n\nThere are four types of filters exist within this style as follows.\n\nproducer ( source ): the starting point of a process.\n\n): the starting point of a process. transformer ( map ): performs a transformation on some or all of the data.\n\n): performs a transformation on some or all of the data. tester ( reduce ): tests one or more criteria.\n\n): tests one or more criteria. consumer ( sink ): the terminating point.\n\nWeakness\n\nNot good choice for interactive systems, because of their transformational character.\n\nExcessive parsing and unparsing leads toloss of performance and increased complexity in writing the filters themselves.\n\nUsages\n\nThe pipe-filter architecture uses in a variety of applications, especially tasks that facilitate simple, one-way processing such as EDI, ETL tools.\n\nCompilers: the consecutive filters perform lexical analysis, parsing, semantic analysis, and code generation.\n\nClient Server\n\nContext\n\nThere are shared resources and services that large numbers of distributed clients wish to access, and for which we wish to control access or quality of service.\n\nProblem\n\nBy managing a set of shared resources and services, we can promote modifiability and reuse, by factoring out common services and having to modify these in a single location, or a small number of locations. We want to improve scalability and availability by centralizing the control of these resources and services while distributing the resources themselves across multiple physical servers.\n\nSolution\n\nIn a client-server style, components and connectors have a particular behavior.\n\nComponents, called “clients,” send requests to a component, called “server,” and wait for a reply.\n\nA server component receives a request from a client and sends it the reply.\n\nWeakness\n\nThe server can be a performance bottleneck and a single point of failure.\n\nDecisions about where to locate functionality (in the client or in the server) are often complex and costly to change after a system has been built.\n\nUsages\n\nWe can use the client-server style to model a part of a system that has many components sending requests (clients) to another component (server) that offer services: online applications such as email, document sharing and banking.\n\nModel View Controller\n\nContext\n\nThe user interface is typically the most frequently modified portion of an interactive application. Users often wish to look at data from different perspectives, such as a bar graph or a pie chart. These representations should both reflect the current state of the data.\n\nProblem\n\nHow can user interface functionality be kept separate from application functionality and yet still be responsive to user input, or to changes in the underlying application’s data?\n\nAnd how can multiple views of the user interface be created, maintained, and coordinated when the underlying application data changes?\n\nSolution\n\nThe model-view-controller (MVC) pattern separates application functionality into three kinds of components as follows.\n\nA model, which contains the application’s data.\n\nA view, which displays some portion of the underlying data and interacts with the user.\n\nA controller, which mediates between the model and the viewand manages the notifications of state changes.\n\nWeakness\n\nThe complexity may not be worth it for simple user interfaces.\n\nThe model, view, and controller abstractions may not be good fits for some user interface toolkits.\n\nUsages\n\nMVC is an architectural pattern that is commonly used in web, mobile applications while developing user interfaces.\n\nEvent Driven Architecture\n\nContext\n\nComputational and information resources need to be provided to handle incoming independent asynchronous application-generated events in a manner that can scale up as demand increases.\n\nProblem\n\nConstruct distributed systems that can service asynchronous arriving messages associated with an event, and that can scale from small and simple to large and complex.\n\nSolution\n\nDeploy independent event processes/processors for event handling. Arriving events are queued. A scheduler pulls events from the queue and distributes them to the appropriate event handler based on a scheduling policy.\n\nWeakness\n\nPerformance and error recovery may be issues.\n\nUsages\n\nAn e-commerce application that uses this approach would work as follows:\n\nThe Order Service creates an Order in a pending state and publishes an OrderCreated event.\n\nThe Customer Service receives the event and attempts to reserve credit for that Order. It then publishes either a Credit Reserved event or a CreditLimitExceeded event.\n\nevent. The Order Service receives the event from the Customer Service and changes the state of the order to either approved or canceled\n\nMicroservices Architecture\n\nContext\n\nDeploy server-based enterprise applications that support a variety of browsers and native mobile clients. The application handles client requests by executing business logic, accessing a database, exchanging messages with other systems, and returning responses. The application might expose a 3rd party API.\n\nProblem\n\nMonolithic applications can become too large and complex for efficient support, and deployment for optimal distributed resource utilization such as in cloud environments.\n\nSolution\n\nBuild applications as suites of services. Each service is independently deployable and scalable and has its own API boundary. Different services can be written in different programming languages, manage their own database, and developed by different teams.\n\nWeakness\n\nSystems must be designed to tolerate service failures that require more system monitoring. Service choreography and event collaboration overhead.\n\nWe also need more memory.\n\nUsages\n\nMany use cases are applicable for a microservices architecture, especially those that involve an extensive data pipeline. For example, a microservices-based system would be ideal for a reporting system on a company’s retail store sales. Each step in the data preparation process would be handled by a microservice: data collection, cleansing, normalization, enrichment, aggregation, reporting, etc.\n\nEasy, right?",
    "keywords": [
      "layers",
      "architectural",
      "service",
      "pattern",
      "systems",
      "important",
      "patterns",
      "know",
      "need",
      "services",
      "applications",
      "software",
      "data",
      "system",
      "architecture"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------7-73--------------------9693c868_ce26_4562_a122_40c6b740d10e-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------8-73--------------------9693c868_ce26_4562_a122_40c6b740d10e-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------9-73--------------------9693c868_ce26_4562_a122_40c6b740d10e-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------52617aa6_2e43_4591_93b8_b6b8962be96c-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------52617aa6_2e43_4591_93b8_b6b8962be96c-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------52617aa6_2e43_4591_93b8_b6b8962be96c-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------52617aa6_2e43_4591_93b8_b6b8962be96c-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------52617aa6_2e43_4591_93b8_b6b8962be96c-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------0-74--------------------b86f1ba1_cdfb_4a08_b5ac_d6f9fb53a736-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://humanparts.medium.com/how-well-get-over-going-to-the-upper-room-with-donald-j-trump-4d63f2e9741a?source=extreme_main_feed---------1-74--------------------b86f1ba1_cdfb_4a08_b5ac_d6f9fb53a736-------",
    "title": "How We’ll Get Over: Going to the Upper Room With Donald J. Trump",
    "publish_date": "2020-10-15 21:12:55",
    "authors": [
      "Max S. Gordon"
    ],
    "summary": "What we are facing is bigger than Donald Trump.\nOr maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose.\nPolitically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved.\nIf, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.",
    "text": "We’ve been here before. Our ancestors knew, when you can’t control the evil of the world, you must become the weather. A howling wind through the trees, a blistering sun, an irresistible force. Our democracy is on a respirator now, and we must defend it.\n\nJustice and nonviolent resistance became an electrifying force in 1955 when working-class Blacks who relied on the buses in Montgomery, Alabama, shut down the discriminatory system for an entire year, permanently changing the laws in that city. We need the spirit of transcendence that led these heroic women and men, many of them maids and laborers, to walk to work each day and say, “I can’t feel the hurt in my feet when there is a balm for my soul. And I will walk five more miles to work if it means a better life for my children.”\n\nWe need the Holy Ghost power that stopped Eugene “Bull” O’Connor, the commissioner of public safety in Birmingham, Alabama, when he ordered a battalion of firefighters to turn hoses on a crowd of protesters, including children, on May 5, 1963, often called “Miracle Sunday.” The firefighters not only resisted the order—it was reported that some of them cried.\n\nThe power of the crowd, who had walked from a local church, was both vulnerable and authoritative — a compelling, mystical combination. Whatever racist trance had possessed those firefighters when they’d hosed the same crowds only days before, it was broken, perhaps when they looked at the children and thought, “The little girl I am aiming this hose at could be mine.” Rev. Martin Luther King, Jr. later wrote, “I felt there, for the first time, the pride and the power of nonviolence.”\n\nThe alchemy of grace and conviction works. It has worked. I know because I am alive. I write these words with the knowledge that once upon a time someone who belonged to my family would have been whipped or worse for even trying to learn the alphabet. Yet I read, I write. Something they did to survive must have worked — because I’m here.\n\nNo matter how much they try to distort the truth on Fox News or make us feel like fools for believing, the sacrifices of earlier generations matter. How many women had to die on kitchen floors and back alleys for just one woman to walk into a care facility, protected by Roe v. Wade, and make an appointment for her health — legally and safely? We will not go back. Their sacrifices matter. And we owe them our determination to see that Roe v. Wade is not overturned. A persuasive river of courage flows through history, from Harriet Tubman to the suffragettes to the rioters at Stonewall. We’ll never know all the names, but we know that river exists — because we’re here.\n\nHistory has always had rogues, scoundrels, reprobates, damn fools, men who have acted as children. Bullies. Dictators. As a human family, we’ve seen astounding acts of evil. But the thing about evil is not to make it personal or to take it personally. We have to look beyond the actors. The only way to combat evil is not to respond with evil, but to invest in a more compelling vision. Because of someone’s vision, I am married to the man I love.\n\n7\n\nWelcome to Niggerland. A place on the outskirts of town where there has been crime and poverty and drugs and lack of health care and denied educational opportunities. My white friends, you were once untouched by the pain of the people who live there. But please know, those divisions no longer exist the way they once did. Perhaps Donald Trump’s greatest achievement is that he’s turned every American into a nigger, black or white (including a few people who are convinced they hate niggers). One way or another, we’re all in the soup now.\n\nNigger. It’s an unpleasant word, and forgive me for using it, but it’s the right word. It’s not a Black person’s shame, but a white society’s shame for its ugliness. It’s a word meant to terrorize a group of people within a system of oppression and make them feel powerless so they won’t act and try to change it. In other words, in Donald Trump’s eyes, we’re all niggers now. There isn’t a single person or institution he doesn’t have contempt for.\n\nWhat we are facing is bigger than Donald Trump. Perhaps he is the fulfillment of America’s karma in the world, our political shadow finally come to life. Or maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose. He is the personification of the Ugly American trope, vulgarity incarnate, an ambling Frankenstein monster ripping the village apart with his bare hands. Politically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\n\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved. His message isn’t really new—it’s his malevolence that’s profound. Maybe one day we will perceive his legacy as an opportunity that afforded fundamental change. If, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.\n\nWe may not change his heart, but we need to alter ourselves so we are different when and if the next monster arrives. In the aftermath of what happens, assessments will be made, and we will have to acknowledge that while solidarity eventually came from unexpected sources — Republicans willing to abandon their tribe — this went on for far too long, and too many lives were lost.\n\n8\n\nThere is a Black teenage girl who studies her lipstick one more time in the mirror before cutting off the bathroom light. She is going to a demonstration. There may be violence. But she believes in that preacher, Dr. King, and the sermon he preached on racial equality last Sunday. She knows it is dangerous; they’ve unleashed dogs on protestors; they turned hoses on families, pinning them against buildings and cars. People have been jailed, students have been clubbed, just for having the audacity to want to go to school with whites, to vote without retaliation.\n\nIt is 1957, and only a girl herself, she has no way of knowing that one day her daughter will look back at her through history. Her daughter will move into her dorm at a public university, buy her books, and although every battle won’t have been won, she will walk into the classroom her mother envisioned for her, without having to be escorted by the National Guard. She will claim the seat her mother earned.\n\nWe have a legacy to uphold; we have ancestors to honor. We’ve been here before. The names are always different. But whenever justice is threatened anywhere, there are always brave ones.\n\n9\n\nRevolution begins with a flower. Hold it your hand. And know that the man who owns real estate and golf courses all over world, in all his presumed omnipotence, doesn’t have the power to make a single flower.\n\nAnd if he chooses to destroy that flower, there’s another flower next to it in the field. There will always be flowers. Legions of them, as there are legions of us.\n\nAnd when your hope is restored and you remember who you are and what is possible to achieve with fortitude and grace, step out the door with that flower in your hair.\n\nAnd act.",
    "keywords": [
      "trump",
      "world",
      "way",
      "weve",
      "upper",
      "evil",
      "j",
      "going",
      "know",
      "power",
      "walk",
      "white",
      "room",
      "donald"
    ]
  },
  {
    "url": "https://coronavirus.medium.com/the-company-set-to-roll-out-americas-future-vaccine-cb56ea9691fa?source=extreme_main_feed---------2-74--------------------b86f1ba1_cdfb_4a08_b5ac_d6f9fb53a736-------",
    "title": "The Company Set to Roll Out America’s Future Vaccine",
    "publish_date": "2020-10-15 20:44:45",
    "authors": [
      "Yasmin Tayag"
    ],
    "summary": "The Company Set to Roll Out America’s Future VaccineThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccinesMario Tama / Getty ImagesWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages.\nIt’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history.\nIn August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\nAt the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention.\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made.",
    "text": "The Company Set to Roll Out America’s Future Vaccine\n\nThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccines\n\nMario Tama / Getty Images\n\nWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages. It’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history. To do the job, the White House has contracted a company called McKesson Corporation. In August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\n\nThis isn’t McKesson Corporation’s first vaccine-distribution rodeo. The company, founded 187 years ago and the seventh-largest U.S. company in terms of revenue in 2019, was also responsible for managing the distribution of the H1N1 vaccine to as many as 90,000 sites across the U.S. during the 2009 swine flu outbreak. At the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention. The company has also had an existing contract with the CDC to distribute childrens’ vaccines since 2016, and its role in distributing vaccines during the pandemic is based on that contract. Its success during the H1N1 epidemic bodes well for Covid-19 rollout, but U.S. public health infrastructure may continue to pose problems.\n\nAs I wrote previously, the specifics of how a vaccine will be distributed by McKesson — and who will get it first — are not yet clear. In an email to the Medium Coronavirus Blog, Robert Redfield, PhD, director of the CDC, said: “Through the Advisory Committee on Immunization Practices, CDC will play a vital role in deciding, based on input from experts and stakeholders, how initial, limited vaccine doses will be allocated and distributed while reliably producing more than 100 million doses by January 2021.” McKesson shared its public statement about its CDC partnership with the Blog but did not answer questions.\n\nThere does seem to be a plan to determine where exactly McKesson will distribute vaccines, according to the HHS. A spokesperson for the agency tells the Blog that ensuring easy access for all Americans, notably minority communities and medically underserved populations, is a top priority. “Whether it’s at a doctor’s office, retail pharmacy, federally qualified health center, or hospital,” they said, “thousands of outlets will be available so no American must travel far to be vaccinated.”\n\nThe plan is that McKesson will deliver a specific amount of vaccine to a designated location once it’s allocated to a given jurisdiction or authorized partner. In many instances, says the spokesperson, these will be sites where the vaccine will actually be administered; in others, McKesson will deliver vaccines to sites where health departments will pick up the vaccine and further distribute it within their networks. National retail pharmacies will also use a similar system. “This system,” says the spokesperson, “will be scalable to meet demand.”\n\nUntil more is known about the vaccine to be distributed, it’s not clear how it will be transported. Some vaccines are more delicate than others, and sometimes they require refrigeration. According to HHS, if the vaccine has ultra-cold storage requirements, it may be shipped directly from the manufacturer to administration sites, but this too will be managed within McKesson’s centralized system. The contract the company has with the CDC covers the transportation of both refrigerated (2–8º Celsius) and frozen (-20ºC) vaccines.\n\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made. The HHS spokesperson says the U.S. government is “committed to working with other countries friendly to our national security to ensure safe and effective Covid-19 vaccines are developed as fast as possible, however, the vaccine and therapeutic candidates [Operation Warp Speed] has invested in are the candidates OWS believes to be the most promising, and all of those candidates are being manufactured in the U.S.”\n\nMcKesson’s performance during the H1N1 epidemic in 2009 bodes well for the Covid-19 pandemic: During that time, it distributed almost 81 million H1N1 vaccine doses to 90,000 sites. However, notes journalist Michele Cohen Marill in the medical publication Medscape this week, distribution ran into obstacles at the public health level: “Public health officials struggled with the mechanics of designating priority groups and reaching out to them for vaccination while asking others to wait.”\n\n“I’m not sure there’s much difference between 1976, 2009, and 2020–2021,” Rebecca Wurtz, MD, MPH, of the University of Minnesota School of Public Health in Minneapolis, told Medscape. “The issues around organizing a massive distribution of a new vaccine are pretty similar.”\n\nThe U.S. can’t afford to make administrative errors during the Covid-19 pandemic, especially as the fall surge continues and the death toll mounts. States ultimately shape the actual vaccination programs, notes Marill in Medscape, and it’s up to them to decide who can administer the vaccine, and where. The hope is that state governments authorize as many people as possible to safely administer the vaccine and make access to it widespread and equitable. Neighborhood pharmacies will likely play a key role, as the HHS spokesperson suggests: “For example, during H1N1, once vaccines became widely available pharmacies played an important role in the vaccine distribution,” they said, adding that pharmacies’ role “is even more critical to vaccinations today and will be fully integrated into the distribution plan.”",
    "keywords": [
      "role",
      "future",
      "company",
      "mckesson",
      "public",
      "set",
      "roll",
      "distribution",
      "vaccines",
      "vaccine",
      "health",
      "spokesperson",
      "americas",
      "covid19"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------b86f1ba1_cdfb_4a08_b5ac_d6f9fb53a736-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://towardsdatascience.com/25-lesser-known-java-libraries-you-should-try-ff8abd354a94?source=extreme_main_feed---------4-73--------------------b86f1ba1_cdfb_4a08_b5ac_d6f9fb53a736-------",
    "title": "25 lesser-known Java libraries you should try in 2020",
    "publish_date": "2020-10-07 22:09:24",
    "authors": [
      "Md Kamaruzzaman"
    ],
    "summary": "JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape.\nIn enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform.\nWiremockHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development.\nLink:ConclusionIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries.\nThere are many excellent Java libraries that I have not listed here but worth a try.",
    "text": "1. RxJava\n\nReactive Extensions (ReactiveX) is a popular software development paradigm to deal with asynchronous and event-driven programming. RxJava is the Java VM implementations of the Reactive Extensions by using Observables. It extends the Observer Pattern to support event-driven programming by adding composable operators on a sequence of events/data in a declarative way. It also hides the low-level complexities like threading, thread-safety, synchronization, and concurrent data structure.\n\nIf you want to do reactive programming in Java, it is a must-have library.\n\nLink:\n\n2. OkHttp\n\nHTTP is by far the most used Application layer protocol. There are many excellent Java-based HTTP client libraries out there. But OkHttp is the simplest yet powerful HTTP client library in the JVM. It offers fluent and clean API to develop HTTP client in Java.\n\nIt also supports some advanced features: Connection pooling, GZIP shrink, response caching, modern TLS features, and many more.\n\nLink:\n\n3. MyBatis\n\nIn most Software development projects, we need to store data. Although there are many types of data storage, SQL is still the most used data storage type. As a Java developer, we need to match our Java object to the SQL table. One way to achieve the mapping is to use ORM (e.g., Hibernate). But there are many use cases when you want to have full control over the Object-Table mapping (e.g., Performance). In those cases, you can directly use JDBC and write the SQL query. The other way is to use MyBatis to map Java Object to Stored Procedure or SQL statements. It offers both annotation-based or XML descriptor based mapping.\n\nI prefer MyBatis over plain JDBC, especially in larger projects, as it improves the separation of concerns.\n\nLink:\n\n4. HikariCP\n\nHikariCP is the second library in this list related to Database. Establishing a JDBC connection is resource expensive. If you create a new connection every time you access the Database and close it once you are done, it can severely impact your application performance. Not to mention that failure to close the connection properly or allowing limitless database connection can crash your application.\n\nUsing Connection Pooling means connections are reused rather than created each time a connection is requested. HikariCP is a very fast yet lightweight Database connection pooling in JVM. It is also very reliable and a “zero-overhead” JDBC connection pool.\n\nLink:\n\n5. Lombok\n\nIn modern days, Java is often criticized as a verbose and bloated programming language. Compared to other popular languages (JavaScript, Python, Scala, Kotlin), a developer needs to write lots of boilerplate code in Java. Although Java has introduced Records in JDK 15 to reduce boilerplate code in Java, it is not an LTS release. Fortunately, a library can already reduce your boilerplate code in Java significantly: Project Lombok. You can generate getters, setters, hashcode, equals, toString, Builder classes by adding a few annotations. Additionally, it offers null pointer check, logger, and many more.\n\nLink:\n\n6. VAVR\n\nJava finally released the much-awaited functional programming via Lambda and Streaming in version 8. If you are used to functional programming or want to dive deep into functional programming, you may find Java’s functional programming wanting. Compared to many other functional programming languages (Haskell, Scala), Java is pale. VAVR is a library that can fill the gap of the functional programming features in Java. It provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nLink:\n\n7. Gson\n\nOver the years, JSON has become the de-facto data exchange format. In Java, there also exist several excellent libraries to deal with JSON. One of them is Jackson, which I have covered in my previous article. The other excellent library is Google’s Gson. Unlike Jackson, it is a minimalistic library and only supports JSON. It offers Data Binding, extensive Generic support, flexible customization. One of the major advantage (or disadvantage depending on your liking) of Gson is that it does not need annotation.\n\nLink:\n\n8. jsoup\n\nIf you are developing your application in Java and need to deal with HTML, you should use jsoup. It is a Java library to work with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data. It implements the WHATWG HTML5 specification and parses HTML using the best of HTML5 DOM methods. It supports parsing HTML from URL/string, find and extract data, manipulate the HTML elements, clean HTML, output HTML.\n\nLink:\n\n9. JIB\n\nIf you are working on an enterprise-grade application, it should be at least Cloud-ready. The first step to make your application cloud-ready is to containerize your application, i.e., put your artifactory binary into Docker image. Dockerizing a Java application is a bit tedious work: you need to have deep knowledge of Docker, you need to create a Dockerfile, and you will need Docker Daemon. Fortunately for the Java developers, Google has created an Open-source Java containerizer using already existing tools. You can use JIB as a Java library to build an optimized Docker and OCI image.\n\nLink\n\n10. Tink\n\nTink is yet another handy Java library in this list from Google. Cryptography and security are becoming increasingly more important in Software Development. Cryptographic techniques are used to secure user data. Implementing cryptography correctly requires a lot of expertise and effort. A group of Cryptographers and security engineers in Google has written the multi-language cryptographic library Tink. It offers easy-to-use but hard to misuse security API. Tink offers cryptographic functionalities via different primitives. It provides symmetric key encryption, streaming symmetric key encryption, deterministic symmetric key encryption, digital signature, hybrid encryption, and many other encryption functionalities.\n\nLink:\n\n11. Webmagic\n\nIf you work on Web crawling, you can write your own crawler, which is time-consuming and tedious. In Java, Webmagic is an excellent Web crawler library that covers the complete life-cycle of crawler: downloading, URL management, content extraction, persistence. It offers a simple yet flexible core, Annotation support, multi-threaded, and easy-to-use API.\n\nLink:\n\n12. ANTLR 4\n\nIf you work on parsing and processing data, then the ANTLR library could be handy. It is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It does this by giving us access to language processing primitives like lexers, grammars, parsers, and the runtime to process text against them.\n\nIt’s often used to build tools and frameworks.\n\nLink:\n\n13. Caffeine\n\nIf your application is read-heavy, then caching can dramatically improve your application’s data access performance. Java has many great caching libraries. Caffeine is the best among the lot. It is a high-performance, near-optimal caching library based on Java. It offers a fluent caching API and some advanced features like asynchronous loading of entries, asynchronous refresh, weak referenced keys, etc.\n\nLink:\n\n14. Metrics\n\nOnce your Java application runs into production, you will want to have insight into your application's critical components. Metrics from the Dropwizard framework is a simple yet compelling Java library that provides insight into your application and JVMs KPI, e.g., rate of events, pending jobs, service health check, and more. It is modular and offers modules for other libraries/frameworks.\n\nLink:\n\n15. gRPC-Java\n\nGoogle has created gRPC as a modern Remote Procedure Call system in 2015. Since then, gRPC became extremely popular and one of the most used RPC system in modern software development. The library gRPC-Java is the Java implementation of the gRPC client. If you want to use gRPC in Java, then this library can be handy for you.\n\nLink:\n\n16. Java WebSocket\n\nTraditional Client-Server communications unidirectional. WebSocket is a bi-directional communication protocol over a single TCP connection. Java WebSocket is a barebone WebSocket server and client implementation in Java. If you are a Java developer and want to work with WebSocket, this library is highly recommended.\n\nLink:\n\n17. JJWT\n\nJSON Web Token (JWT) is the de-facto Authorization and secure Information exchange format in modern software development. Whether you are using a simple session-based Authorization or highly advanced OAuth2 based Authorization, you will probably use JWT. JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape. It is fully RFC specification compliant on all implemented functionality. It supports readable and convenient fluent API.\n\nLink:\n\n18. Swagger-Core\n\nOpenAPI is the specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. Swagger-Core is the Java implementation of the OpenAPI specification. If you are exposing REST API in your Java/JavaEE application, you can automatically provide and expose your API definitions using Swagger-Core.\n\nLink:\n\n19. Async Http Client\n\nAsynchronous programming is becoming increasingly popular of late because of its non-blocking nature. Most of the popular Java HTTP client libraries offer limited to no asynchronous HTTP response processing. Async Http Client is a popular Java library that offers asynchronous HTTP response processing. As a bonus feature, this library also supports the WebSocket protocol.\n\nLink:\n\n20. Liquibase\n\nAs a software developer, we all know the importance of version control, DevOps, and CI/CD of our code. In a blog post: Evolutionary Database Design, the great Martin Fowler argued that we also need version control and CI/CD of our code. Liquibase is a tool that supports tracking, version controlling, and deployment of SQL database changes in Java Applications. If you are working with an SQL database where the database is evolving, this tool can greatly simplify your database migration.\n\nLink:\n\n21. Springfox\n\nI have already listed Swagger-Core in this list, which can automatically generate REST API documentation for vanilla Java or Java EE application. In enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform. In Spring-based Java applications, the Springfox library can automatically generate REST API documentation from the source code.\n\nLink:\n\n22. JavaCV\n\nOpenCV is a computer vision and machine learning software library. It is open-source and was built to provide a common infrastructure for computer vision applications. JavaCV is a wrapper on OpenCV and many other popular libraries (FFmpeg, libdc 1394, PGR FlyCapture) in the field of computer vision. JavaCV also comes with hardware accelerated full-screen image display, easy-to-use methods to execute code in parallel on multiple cores, user-friendly geometric and the color calibration of cameras and projectors, detection and matching of feature points, and many other features.\n\nLink:\n\n23. Joda Time\n\nJava had a poor date and time functionalities in the pre-Java8 core library. Java8 released much needed advanced date and time functionalities in its java.time package. If you are working with an older version of Java (pre Java8), Joda time can provide you the advanced date and time functionalities. However, if you are working in a newer version of Java, you may not need this library.\n\nLink:\n\n24. Wiremock\n\nHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development. During the writing Unit test, it is best to focus on SUT (System Under Test) and mock the services used in the SUT. Wiremock is a simulator for REST API and enables developers to write code against an API that does not exist or incomplete. In microservice-based software development, Wiremock can significantly boost development velocity.\n\nLink:\n\n25. MapStruct\n\nIn Java application development, you often need to convert one type of POJO to another type of POJO. One way to achieve this POJO or Bean conversion is to explicitly code the transformation, which is tedious. The smart way is to use a library that is specifically developed to transform POJO/Bean. MapStruct is a code generator that implements mapping between POJO/Bean on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe, and easy to understand.\n\nLink:\n\nConclusion\n\nIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries. These libraries are not domain-specific and can help you whether you are developing Software for Business applications, Robotics, Android Apps or Personal projects. Please note that for a large and wide eco-system like Java, this list is not conclusive. There are many excellent Java libraries that I have not listed here but worth a try. But this list of libraries can provide a quick peek into the world of the Java eco-system.",
    "keywords": [
      "2020",
      "development",
      "lesserknown",
      "libraries",
      "try",
      "library",
      "25",
      "application",
      "java",
      "need",
      "offers",
      "programming",
      "software",
      "data"
    ]
  },
  {
    "url": "https://towardsdatascience.com/fastapi-has-ruined-flask-forever-for-me-73916127da?source=extreme_main_feed---------5-73--------------------b86f1ba1_cdfb_4a08_b5ac_d6f9fb53a736-------",
    "title": "FastAPI has Ruined Flask Forever for Me",
    "publish_date": "2020-10-11 09:01:22",
    "authors": [
      "Fahmi Nurfikri"
    ],
    "summary": "FastAPI has Ruined Flask Forever for MeWhy I prefer using FastAPI instead of FlaskFastAPI Logo — https://fastapi.tiangolo.comWhat do you like best about being a data scientist?\nIf you need to look for something about FastAPI, you usually don’t need to look anywhere else.\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running.\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords.\nFastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.",
    "text": "FastAPI has Ruined Flask Forever for Me\n\nWhy I prefer using FastAPI instead of Flask\n\nFastAPI Logo — https://fastapi.tiangolo.com\n\nWhat do you like best about being a data scientist? It’s definitely modeling and fine-tuning for optimal results. But what does it mean to be a good model if it’s never used or never deployed?\n\nTo produce a machine learning model, the typical approach is to wrap it in a REST API and use it as a microservice. One of the most widely used frameworks for creating APIs is Flask.\n\nThe main reason Flask is widely used is its simplicity. In general, we only use the API to model predictions, so we don’t need a complex architecture (example: Django). Another reason is that Flask is written in Python, which is the language used to do machine learning modeling in general, so we are familiar with it.\n\nHowever, if you want to create a REST API with clear, static, inputs that are validated, you must include several different packages from several third parties that do not cooperate with each other. And you have to create custom code to get everything running.\n\nThis is what caused me to look for alternatives for my needs, where finally I found a framework called FastAPI and it became my new favorite framework. Here are the reasons why I like to use FastAPI.\n\nDocumentation\n\nThe first thing I notice from FastAPI is the documentation. FastAPI has very extensive documentation and rich examples, which makes things easier. If you need to look for something about FastAPI, you usually don’t need to look anywhere else.\n\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running. So that we don’t need to write the API documentation that we created ourselves. As we all know, writing API documentation is annoying, not only because there is a lot of detail to go into, but also nothing more frustrating when the end-users are implementing but not match up the documentation. So that with the automatic generation of API documentation it will be very helpful\n\nBelow is a display example of the API documentation (provided by Swagger UI)\n\nAlternative automatic documentation is also provided (provided by ReDoc)\n\nTo define the created schema, it uses Pydantic, which is another awesome Python library, used for data validation. Its purpose is to validate the input that goes to FastAPI. If the input/request is incorrect then the appropriate error code will be returned.\n\nPerformance\n\nAs the name implies, this is indeed FastAPI. Based on data from techempower benchmarks, FastAPI beats every framework when it comes to performance. Where the most commonly used frameworks like Flask and Django lag behind.\n\nFramework performance — techempower\n\nYeah, it blazingly fast.\n\nAsynchronous\n\nOne of the drawbacks of Flask is the lack of asynchronous I/O support. Asynchronous is pretty important for HTTP endpoints, which tend to do a lot of waiting for I/O and network chat, making it a good one candidate for concurrency using async.\n\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords. FastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.\n\nAll you have to do is declare the endpoints with the async keyword like this:",
    "keywords": [
      "api",
      "dont",
      "using",
      "forever",
      "framework",
      "documentation",
      "flask",
      "need",
      "used",
      "ruined",
      "asynchronous",
      "fastapi"
    ]
  },
  {
    "url": "https://medium.com/lessons-from-history/what-you-dont-know-about-the-famous-templar-knights-e225932969a3?source=extreme_main_feed---------6-73--------------------b86f1ba1_cdfb_4a08_b5ac_d6f9fb53a736-------",
    "title": "What You Don’t Know About the Famous Knights Templar",
    "publish_date": "2020-10-03 21:34:41",
    "authors": [
      "Nicol Valentin"
    ],
    "summary": "They wrote their rule with the help of a saintHumility, chastity, and strict obedience were major tenants of the Templar rule.\nHeck, a Templar wasn’t even allowed to kiss his own mother.\nProponents of this idea also cite the fact that Templar knights were forbidden meat on Mondays, Wednesdays, and Fridays.\nNot only did the king feel his money was physically secure in Templar banks, but the fact that almost every English county had a Templar presence helped too.\nAnd so it was with King Philip of France.",
    "text": "In 1119, dangers lurked everywhere in the Holy Land. Saracens (Moslems) butchered 300 Christians in March, and another 7000 that June.\n\nThings like this weren’t uncommon, and every pilgrim knew it. The French knight Hugh of Payns knew it. Only Hugh decided to do something about it.\n\nHe and a small band of warrior pilgrims soon joined in a brotherhood in which all agreed to take on a life of penance, poverty, and strict obedience. Unlike other knights of the time, they would defend the poor and innocent.\n\nEven to the point of sacrificing their own lives if necessary. Later, the group would gain official recognition under the name The Poor Fellow-Soldiers of Christ and the Temple of Solomon. We know them as the Templars.\n\nAlthough the early days of the Templars were uneventful, it didn’t take long for the men to make a name for themselves throughout Europe. Their role in the Holy Land began to expand, and soon they were defending the entire Levant from enemy invaders.\n\nToday, no image of the crusades is complete without a picture of a Templar knight in his white mantle emblazoned with a red cross. And yet, with all that imagery, there's more to the Templars than meets the eye. Much more.\n\nThey wrote their rule with the help of a saint\n\nHumility, chastity, and strict obedience were major tenants of the Templar rule.\n\nWhen a man joined the Templars, he had to swear off furs, fancy clothes, and those oh so stylish pointy shoes everyone was raving about. They were also pretty hardcore when it came to chastity.\n\nHeck, a Templar wasn’t even allowed to kiss his own mother. That’s a lot of energy going to moral fortitude. In the end, it helped them become the elite fighting force that they were.\n\nTemplars were also required to do the standard things like take care of orphans and widows, and defend the church. Standing in church when praying or singing was forbidden, as well as talking to the excommunicated.\n\nAll this makes sense when you consider the Templars were actually warrior monks. Their rule was partly composed by one of the most famous monks of all time, St. Bernard of Clairvaux.\n\nKnown as the Primitive Rule of the Templars, Bernard based it on the writings of St. Benedict and St. Augustine. The order had already been established several years before the rule was completed. So, in the end, it was basically everything the guys had already been doing.\n\nThey were said to have the gift of long life\n\nWhich is ironic since 90 percent of fighting knights died. However, thanks to a healthy diet and great hygiene, Templars had a good chance of living into their 60s.\n\nBarring any spears through the heart that is. That may not seem like a ripe old age to you, but in the Middle Ages, that wasn’t so bad. Some people attribute the brother's good health to something called “The Elixir of Jerusalem” which consisted of palm wine, aloe pulp, and hemp.\n\nProponents of this idea also cite the fact that Templar knights were forbidden meat on Mondays, Wednesdays, and Fridays. However, on Sundays Chaplins and clerks were allowed to eat meat at both lunch and dinner. According to the rule, “the rest of the household, that is squires and sergeants, shall be content with one meal and should be thankful to God for it.”\n\nFasting was undertaken between All Saints (Nov. 1) and Easter, with the exception of Christmas Day, the Assumption, and the Feast of the Apostles. Of course, we can’t leave out the fact that Templars were physically fit. Couch potatoes wouldn’t last long in an outfit like this after all.\n\nUp to 90 percent of members never went to combat\n\nThat's because they were busy managing the large economic infrastructure they created throughout Europe.\n\nIn fact, the Templars were arguably the first multinational cooperation, and it took a lot of guys to keep it going. Their reputation as defenders of the weak along with their pious behavior brought them to the attention of patrons of both high and low status.\n\nTemplar coffers overflowed with gifts like sheep farms, water mills, even isolated villages complete with serfs. Common workers left things in their wills to, like donkeys and small plots of land. And the templars never poo-pooed any of it.\n\nAll those small parcels were combined to form larger estates that were then leased out or farmed. Of course, the properties needed managers, and that task fell to the lay brothers. Beside gifted properties, there were the Templer houses, known as commanderies. This would be run by sergeants who were brothers from non-noble families.\n\nThey excelled in banking\n\nTheir widespread network of commanderies made it easy for Templars to set up a deposit system for traveling pilgrims.\n\nA fellow leaving from London, for example, could deposit his money in the city’s Temple church. As he embarked on the precarious journey overseas, he could concentrate on escaping the pitfalls of travel to the Lavant. The one thing he didn’t have to worry about was losing his money.\n\nOnce he arrived safely at his destination, he simply found the nearest Templar bank and presented his letter of credit. His funds were then safely returned.\n\nEven Kings trusted them with their money\n\nIt wasn’t just the little guys who benefited from the brother's banking system, though. Many kings looked to the Templars to bail them out financially.\n\nFrance in particular had a complicated financial relationship with them. Louis VII was the first king to seek a loan from the Templars at the end of the second crusade. Once he was home and his debt repaid, Louis placed what was left in his treasury under the protection of his Templar friends.\n\nFrom then on the French Treasury was run by the Templars, They took in and accounted for all payments made to the crown, as well as keeping account of the king's creditors and debtors. Money was taken in, stored, and paid out with statements going to the king three times a year.\n\nIn 1185 English King Henry II began using the Temple in London as his treasury. He trusted the Templars with coins, valuables, and even his jewels. Not only did the king feel his money was physically secure in Templar banks, but the fact that almost every English county had a Templar presence helped too. After the deadly battle of Hattin,\n\nHenry charged the Templars with collecting taxes to raise funds for a new crusade. His son, Richard the Lionheart, favored the knights as well. He exempted them from a host of taxes and had every sheriff in England pay them an annual stipend.\n\nBanking was part of their glory, but also their downfall\n\nThe downside to lending governments loads of money is it can make leaders cranky. And so it was with King Philip of France. Philip was far from the most pleasant fellow and he set his eyes on the Templars coffers.\n\nPhilips's grandfather King Louis IX was a saint, and Philip liked to believe he was the epitome of a holy king too. Yet it’s kind of hard to believe a guy is pious when he disputes with the pope (Boniface VIII) for five years (1296–1301).\n\nThe fight, not surprisingly, was over tax revenue. It only ended because Philip took some of his thugs to the papal palace, smashed through the doors, and roughed Boniface up so badly he died a month later.\n\nA Greedy King was their biggest enemy\n\nPhilip really wanted that tax revenue because France was in dire need of money.\n\nBy 1306 the country was in dire straits. A guy can get crazy when he's desperate for money, and desperate Philip was. So in the name of his fake piety, he came up with a story. It was a horrid story, a devious story — a blasphemous story.\n\nThe Templars, he said, were “vilely insulting our religious faith” by means of sodomy, idol worship, heresy, and black magic. Basically, everything contrary to what they had been fighting for since their inception.\n\nFrom there Philip had all the Templars round-up and tortured so they would confess to the false charges he put against them. He burned a few at the stake and eventually convinced the rest of the world of the brother's evil ways.\n\nFinally, the Pope (under pressure from Philip) had the order disbanded in 1312. Assets were given to another famous group of knights, the Hospitallers. Of course, Philip confiscated a huge sum of that as payment for all the work he put into ridding the world of the evil Templars.\n\nNotes and Sources:\n\nGentle reader, please don’t tell me about my picture. I already know. Unfortunately, no Templars were available for photographs. It’s a hard thing, writing about history.\n\nThe Templars, Dan Jones\n\nhttps://www.marketwatch.com/story/how-the-knights-templar-became-the-worlds-first-financial-services-company-2017-09-26#:~:text=It's%20sometimes%20said%20the%20Templars,t%20the%20first%20world's%20bankers.\n\nhttps://erenow.net/postclassical/the-real-history-behind-the-templars/25.php\n\nhttps://www.gq-magazine.co.uk/article/ten-things-you-never-knew-about-the-knights-templar\n\nhttps://www.warhistoryonline.com/medieval/nine-rules-knights-templar.html\n\nhttps://www.history.co.uk/shows/knightfall/articles/holy-money-how-the-knights-templars-got-so-rich\n\nhttps://www.bbc.com/news/business-38499883\n\nhttps://www.history.co.uk/shows/lost-relics-of-the-knights-templar/articles/13-things-you-didn%25E2%2580%2599t-know-about-the-knights\n\nhttps://thetemplarknight.com/2011/01/27/king-philip-crush-templars/",
    "keywords": [
      "dont",
      "templars",
      "philip",
      "king",
      "fact",
      "brothers",
      "knights",
      "famous",
      "rule",
      "know",
      "money",
      "wasnt",
      "templar"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------7-73--------------------b86f1ba1_cdfb_4a08_b5ac_d6f9fb53a736-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------8-73--------------------b86f1ba1_cdfb_4a08_b5ac_d6f9fb53a736-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/swlh/working-with-a-really-terrible-developer-e942299ee1b4?source=extreme_main_feed---------9-73--------------------b86f1ba1_cdfb_4a08_b5ac_d6f9fb53a736-------",
    "title": "Working With a Really Terrible Developer",
    "publish_date": "2020-10-13 08:52:08",
    "authors": [
      "Chris Fox"
    ],
    "summary": "Working With a Really Terrible DeveloperWe recognize them.\nExternalitiesI was working until a few weeks ago on a distributed team for a company in England.\nThanks, L, I didn’t know how to spell “foreign key.”I came to dread the call because his abrasive and loud voice gave me a headache.\nI am usually a back-end developer; in this project L did all the back-end work.\nI didn’t know Django well enough to do it perfectly, not knowing where Python ends and Django begins (I really dislike Django, it shows no coherence or idiom), but I wrote out all the logic and status codes.",
    "text": "Working With a Really Terrible Developer\n\nWe recognize them. Managers often don’t.\n\nIf you’ve never had this experience you have my envy. You’re on a development team and one of the developers does sloppy work and there is nothing you can do about it.\n\nTime was when everyone in software from the first-day QA trainee to the executives had some experience at coding. That is long gone and now we have layers of methodology “masters” and managers who have never written a line, and who regard any and all complaints about others’ work as insubordinate and as personal conflicts, never considering the criticisms on their technical merits.\n\nIf I say that one of the other members of the group is doing shoddy work, even if I explain politely and in technical detail, managers hear “unpleasantness” and focus all their attention on team cohesion, which means I’m the one who gets in trouble.\n\nExternalities\n\nI was working until a few weeks ago on a distributed team for a company in England. One team member, whom I will refer to as L, not only did terrible work (more on this below) but on the daily Zoom status update was three times louder than anyone else in a voice that could etch diamond, made little effort to pronounce English clearly, and insisted on hijacking others’ computers with a compulsive screen-share that illuminated nothing, just so the rest of us could watch him wiggle his mouse.\n\nHe was mechanical. His reaction to any transition was always the same. His turn to talk? “Let me share my screen.” Get an error message? Take a screen shot. Explain a keyword? Another screen shot. Thanks, L, I didn’t know how to spell “foreign key.”\n\nI came to dread the call because his abrasive and loud voice gave me a headache. While everyone else on the team had mastered English well enough to be understood, L moved the accented syllables of words in a way that reminded of why so many companies that outsourced tech support to his country are now moving it to the Philippines.\n\nHe was unresponsive to communication and made changes to interfaces and API behavior without informing anyone of them. Since we did not have code reviews, which I tried hard to spearhead, we only discovered these wanton changes when things broke.\n\nWorst of all L appeared to get cognitively rebooted every few minutes. This company had its Git branches set up all wrong, two “master” branches in the same repo, one for the front end and one for the back. My cryptography work was in a branch off the front end “master.” We had been talking about the branches by name for about ten minutes, and it was clear as could be that I was doing my work in “frontend-crypto,” which we had both mentioned many times.\n\nHe suddenly asked me, apropos of nothing, “Chris, which branch are you working in?”\n\nThis sort of thing happened many times and managers would patiently explain to him what any eight year old could have followed. They could see he wasn’t tracking but for some reason it was only a problem when I expressed my frustration at having to explain simple matters over and over.\n\nBad Code\n\nI usually work in the C family of languages and in web development I write in C#. I had to learn JavaScript, Python, and Django. I ended up working almost exclusively in JavaScript and in the front end. I am usually a back-end developer; in this project L did all the back-end work.\n\nHe did a lot of work, all of it very low quality. In addition to industry standard illegibility he did the absolute bare minimum in rigor that he could get away with.\n\nI Write an Endpoint\n\nI needed a new API, one that would return two or more rows for recipients who may or may not already be in the database. I didn’t know Django well enough to do it perfectly, not knowing where Python ends and Django begins (I really dislike Django, it shows no coherence or idiom), but I wrote out all the logic and status codes.\n\nSuppose I called this API seeking the encryption keys for ten people. Here are the number found and the HTTP status codes in my original bad Django:\n\nNumber returned HTTP code\n\n10 200 (full success)\n\n1-9 206 (partial content)\n\n0 204 (data not found)\n\nserver exception 500 (exception)\n\nIf the response had fewer rows than the number requested I returned an array of their not-found identifiers.\n\nI turned it over to L to fix up the Django syntax, not to rewrite it, but this is what he did:\n\nNumber returned HTTP code\n\n10 200 (full success)\n\n1-9 200 (wrong)\n\n0 200 (wrong)\n\nserver exception 400 (wrong)\n\nSo even if not a single row was returned, he called it a complete success, and he removed my array of the rows not found, so the client had to enumerate the returned data, compare to the request and determine which ones didn’t come back. And a server exception returned 400, Bad Request, which was completely wrong.\n\nThis guy was supposed to be their back end expert. I expected him to know these codes; I don’t know every single one of them but I know the dozen or so most common ones. And even with the logic and intended status codes right in front of him he threw it all away and did it “his way.”\n\nTo be fair there are multiple schools of thought on how to handle intermediate levels of API success. I almost never see any 2XX status code other than 200; that and 500 are the only codes most developers return.\n\nIt would be charitable to allow that L had his own approach that was different from mine; in my view we have more than four status codes for a reason, and I use them. I knew however from months of working with him that he had just copied and pasted in 200 for all of them; he left my sieving logic for the cases above (0, 1–9, 10) but pasted the same line without checking.\n\nIn any case an API is a transaction and if he changed the behavior it was incumbent on him to inform me or whoever was issuing the call, expecting these more detailed status codes. Not only did he fail to do so, he never answered me when I asked him about it. This isn’t teamwork. This was a pattern in working with him. Since this project had no QA it would likely have been customers who first saw the holes in the logic.\n\nManagement Reaction\n\nI was furious. I had done it all correctly except for the Django syntax which he could have fixed in under a minute, but instead he rewrote the whole thing with significantly altered logic. And of course his code looked like a pair of cats had fought on the keyboard.\n\nI tried asking L why he had made these changes but when he ignored me as usual I asked the managers for a conference call. I showed them what I’ve written above. They tut-tutted and said they would talk to L about it. I don’t think they did, because two weeks later it was still unchanged.\n\nAnd they paid this guy.\n\nSo if they didn’t talk to L then they probably decided I was bringing conflict to the team, though they never told me so. This was my last item in the work, all my stuff worked except this mangled API. I was done. With three new languages under my belt and experience in a really cool cryptographic implementation.\n\nI didn’t bother talking to L again. What would be the point? He had done a bare minimum lousy job and in his work ethic that was just fine. In previous debates on design he had contributed nothing. I could have mentored him but I knew from months of working with him that he would have ignored me and gone on doing things the way he was accustomed: sloppy, shoddy, and illegible.\n\nManagers Who Don’t Know Code\n\nAs with so many who say that “people skills” are more important than “coding skills,” the managers on this project were more interested in keeping things nicey-nicey in the team than in doing a solid product. Since this was a very security-centric application it was more vital than usual to do the most rigorous job possible, but they allowed L’s sloppy rewrite to remain.\n\nTheir attitude toward my report was probably that there was some “friction” between me and L; I got along fine with everyone and managed to mask my frustration with L and his mysterious context-loss episodes and godawful code, and my part was about done so not much came of this.\n\nThis is what comes of regarding software development as a social activity. It sure as hell isn’t engineering yet.\n\nBut had I been the development lead, L would have been looking for another job.\n\nThere is a continuum in the software development work ethic; the two poles are\n\nDo it as perfectly as possible and to hell with the deadlines Do as little as you can get away with and make clearing your task list your only priority. Take up the slack by writing unit tests (which we didn’t do).\n\nL and I were at opposite poles of this continuum. Stir in his disinterest in communication and we had a mess.",
    "keywords": [
      "returned",
      "django",
      "l",
      "didnt",
      "status",
      "managers",
      "developer",
      "really",
      "terrible",
      "team",
      "working",
      "know",
      "work"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------a7dd9fad_a2cf_446d_925e_11c8338d8f30-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------a7dd9fad_a2cf_446d_925e_11c8338d8f30-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------a7dd9fad_a2cf_446d_925e_11c8338d8f30-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------a7dd9fad_a2cf_446d_925e_11c8338d8f30-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------a7dd9fad_a2cf_446d_925e_11c8338d8f30-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://hjauquet.medium.com/i-am-a-pro-life-housewife-1ff2cf1b05ec?source=extreme_main_feed---------0-74--------------------3cae4c95_93aa_4379_9599_1dd42f2317fa-------",
    "title": "I am a Pro-Life Housewife",
    "publish_date": "2020-10-15 13:43:33",
    "authors": [
      "Heather Jauquet"
    ],
    "summary": "I am a Pro-Life HousewifeAnd I’m not voting for TrumpPicture by Maria Oswalt on UnsplashAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\nThey are seeing that while Trump is considered the pro-life candidate, he is not pro-life.\nBeing pro-life means having a consistent life ethic from womb to tomb.\nPro-life means honoring the sanctity of life at all stages.\nDon’t discount the vote of the pro-life housewife who is working towards change.",
    "text": "I am a Pro-Life Housewife\n\nAnd I’m not voting for Trump\n\nPicture by Maria Oswalt on Unsplash\n\nAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\n\nI acknowledge that I hate discussing politics and often hesitate to share my views. On the rare occasions I do, it’s usually about my support for the sanctity of human life. I have been admonished by friends from both political parties telling me that I am not pro-life enough, or I’m anti-woman, or I’m not Christian enough, or that I’m too naive. One person, went even so far as to tell me about her “great disappointment” in me and suggested I shouldn’t share my views or should only share them with like-minded people. But if I do as she suggested, my views go in an echo chamber and I forgo the opportunity for rich discussion and to see another perspective. While I might not change someone’s mind, I hope we walk away with a different perspective and the willingness to view every story with grace and compassion.\n\nI grew up loving Jesus and loving my country And now, as a pro-life religious conservative, I’m feeling bereft, without a political party who represents me. To be honest, I felt that way at the last election and even more so now. I disagree with the democratic platform on the issue of abortion. But I abhor the ongoing lack of respect for human life as demonstrated by the current president.\n\nAs we get closer to the U.S. Presidential election there is a contingent of pro-life Catholics and evangelicals who are making their departure from supporting Trump known. They are seeing that while Trump is considered the pro-life candidate, he is not pro-life. His actions against the marginalized show the truth.\n\nBeing pro-life means having a consistent life ethic from womb to tomb. It means valuing human life at all stages, not just when it’s convenient. Often when a new election looms on the horizon the discussion of life becomes a heated topic of debate: When should life be valued? Who is valued?\n\nI cannot in good conscience vote for a man who doesn’t value human dignity and decency. I cannot embrace the politics of a man who is willing to put children in cages and has not, as of yet, addressed the allegations of forced hysterectomies on Immigration and Custom Enforcement (ICE) detainees.\n\nI cannot support a leader who refuses to face the pandemic head on in hopes that it will disappear. The leader of our country mocked his political opponent for wearing a mask and then came down with the very plague he tried to ignore. Then he exposed his staff to the virus. That is not pro-life. It’s a flagrant display of ego and of disrespect for the people who work for him and the 209,000 dead that preceded his diagnosis.\n\nI cannot support a man who is unwilling to denounce white supremacy. It is not pro-life when President Trump refused to denounce white supremacy, but instead told the Proud Boys to “Stand back and stand by.” Pope Francis said in a message to the people of the United States after the killing of George Floyd: “We cannot tolerate or turn a blind eye to racism and exclusion in any form and yet claim to defend the sacredness of every human life.”\n\nWhen then candidate Trump mocked a disabled journalist during the 2016 campaign some people laughed, more were disgusted. His mockery is not pro-life. It points fingers and makes fun of people who are not neurotypical. I have a neurodivergent son and to know that he would be mocked or have his disability used against him is infuriating and heart wrenching. I expect more out of a leader. I expect compassion and restraint.\n\nHow can we support a pro-life candidate who is anything but? His hypocrisy is blatant.\n\nI am ardently pro-life. I hold that position because I believe in the dignity and the sanctity of human life. I believe we are made in the image of God and when we love one another we share the love of Jesus. I believe life is sacred. All life. I believe it begins in the womb and ends at natural death. At a lecture at Fordham University, Cardinal Joseph Bernardin shared this consistent life ethic: “The spectrum of life cuts across the issues of genetics, abortion, capital punishment, modern warfare and the care of the terminally ill.” In short, it’s valuing all life: the infirm, the dying, the disabled, the ones in cages whether they be prisons or at the border, the mentally ill.\n\nWe should show empathy, compassion, and grace when we talk to people about their situations. If we refuse to acknowledge the humanity, do people’s stories simply become pawns in our political stances?\n\nI believe we are called to serve one another. I believe in grace. I believe we shouldn’t be reduced to our mistakes. I believe that we are all broken, and that in our brokenness we can learn to see the whole person and embrace grace. Bryan Stevenson beautifully articulates how brokenness brings about compassion in his book Just Mercy: A story of Justice and Redemption. In his book, Stevenson describes our broken judicial system where too many are given a death sentence for crimes that they did not commit or crimes that do not warrant it.\n\nThe most politically active part of the pro-life position seeks an end to abortion. I fervently wish for an end for abortion. We also need to put in resources to empower women. This means consistent and available health care. This means jobs and housing. This means education. It means giving women the ability to support themselves and their children. It means support. We cannot demonize women for their decisions if we turn a blind eye to their needs. There are religious organizations that help women in crisis pregnancies and one of my favorites is The Gabriel Network whose slogan is “Empower Women.” They not only provide housing, but also angel friends who take women to their appointments, spend time with them getting to know them, and help by anticipating their needs whether it be friendship, baby supplies, or a hand to hold. The Gabriel Network also provides scholarships to help women further their education and careers.\n\nMany people see a pro-life position as a religious one. It is for me, but, it doesn’t have to be. Pro-life means honoring the sanctity of life at all stages. There are other organizations not affiliated with any religion that support a consistent life ethic such as New Wave Feminists and Rehumanize International. New Wave Feminists recognizes the “…full humanity of both the unborn child and the mother and looks to rebuild a culture that embodies legitimate justice for all.” Rehumanize International is a “…human rights organization dedicated to creating a culture of peace and life, and in so doing…seek to bring an end to all aggressive violence against humans through education, discourse, and action.”\n\nWhat if we set aside the presuppositions that being pro-life means that it is only a religious issue or a political stance? What if we used our time and energy to support, encourage, and embrace the sanctity of human life? When we stop pitting pro-choice and pro-life advocates against one another, we could do beautiful work together and shelter the homeless, clothe the naked, and feed the hungry. We can empower women, provide adequate healthcare, end racism, and advocate for social justice.\n\nAs I continue to read, listen, and learn, I embrace the dignity and sanctity of all human life. I acknowledge that if we want to change minds and change hearts, we have to be willing to listen to one another. Don’t discount the vote of the pro-life housewife who is working towards change.",
    "keywords": [
      "life",
      "women",
      "trump",
      "housewife",
      "human",
      "prolife",
      "believe",
      "support",
      "means",
      "sanctity",
      "political"
    ]
  },
  {
    "url": "https://level.medium.com/what-spike-lees-get-on-the-bus-got-right-and-wrong-about-the-million-man-march-2add4af00fc0?source=extreme_main_feed---------2-74--------------------3cae4c95_93aa_4379_9599_1dd42f2317fa-------",
    "title": "25 Years After the Million Man March, the Same Struggles for Black Liberation Persist",
    "publish_date": "2020-10-16 15:15:53",
    "authors": [
      "Julian Kimble"
    ],
    "summary": "And while many Black men agree that they need to do better for the sake of Black people, there’s rarely agreement about the particulars.\nThe movie follows a group of Black men who trek from South Central Los Angeles to Washington, D.C., for the events of October 16, 1995.\nWhile the Million Man March looms large in the film, it’s simply as backdrop; instead, Get on the Bus focuses on the interactions between the travelers.\nWhile the Million Man March may have been established in the spirit of progress, it wasn’t a progressive effort.\nAnd you can’t claim to want what’s best for Black people unless you want it for all Black people.",
    "text": "What Spike Lee’s ‘Get on the Bus’ Got Right — and Wrong — About the Million Man March\n\nA revisiting of the film highlights hurdles Black Americans have yet to overcome\n\nOssie Davis, Isaiah Washington, Andre Braugher, Charles S. Dutton, and a group of men standing next to a bus in a scene from the film ‘Get on the Bus,’ 1996. Photo: Universal/Getty Images\n\nBlack liberation has long been hindered by Black masculinity. Too often, ideas about how Black people can improve their circumstances don’t benefit anyone who isn’t male and heterosexual. And while many Black men agree that they need to do better for the sake of Black people, there’s rarely agreement about the particulars. This reality is one of the driving themes of Spike Lee’s 1996 film, Get on the Bus, which dropped exactly one year after its source of inspiration: the Million Man March.\n\nThe movie follows a group of Black men who trek from South Central Los Angeles to Washington, D.C., for the events of October 16, 1995. Among them are Evan (Thomas Jefferson Byrd), who as part of a court order is literally shackled to the son he neglected (De’Aundre Bonds); Xavier (Hill Harper), an idealistic film student who’s documenting the trip; Flip (Andre Braugher), an obnoxious working actor; Gary (Roger Guenveur Smith), a self-righteous LAPD officer; Kyle (Isaiah Washington) and Randall (Harry Lennix), a couple whose relationship is in dire straits; and Jeremiah (Ossie Davis), the moral center who regrets not attending the March on Washington more than 30 years prior.\n\nBy the end of the film, it’s unclear whether the dial has moved for certain characters — but 24 years later, several of the societal issues those characters represent are still stuck in place.\n\nWhile the Million Man March looms large in the film, it’s simply as backdrop; instead, Get on the Bus focuses on the interactions between the travelers. “People from all different socioeconomic, political backgrounds — which is a combustible mix,” Lee told Charlie Rose of the characters in 1996. Lee and writer Reggie Rock Bythewood depict the trip as a spiritual and emotional journey for the group based on the inevitable conflicts while they’re on the road. The characters represent a variety of issues and perspectives, some of which reveal a lingering resistance to change. By the end of the film, it’s unclear whether the dial has moved for certain characters — but 24 years later, several of the societal issues those characters represent are still stuck in place.\n\nWhile the Million Man March may have been established in the spirit of progress, it wasn’t a progressive effort. Its organizer, Nation of Islam leader Louis Farrakhan, is notorious for his sexism, homophobia, and anti-Semitism. Yet, despite the conservatism at its core, the march stands as a significant display of unity. Given the circumstances at the time — the persistent fallout from the crack epidemic, the 1994 crime bill that led to a surge in mass incarceration, and the notion that Black men were “under attack” in general — many chose to overlook Farrakhan’s radioactive history in favor of the greater good for which he fought.\n\nSome of the characters in Get on the Bus are willing to follow Farrakhan’s lead due to desperation. When Craig (Albert Hall), the original bus driver, tells trip organizer George (Charles S. Dutton) about his teenage daughter’s pregnancy, he acknowledges that he’ll be “all ears” if Farrakhan has a way to deal with the situation. It’s a shortsighted consideration, but Farrakhan and the NOI have long appealed to Black people who feel they’re out of options for whatever reason, so his outlook might catch the ear of a father who feels his daughter has strayed from the values he’d attempted to instill in her.\n\nHowever, the idea that the overarching principle of the march was bigger than Farrakhan himself is also expressed in Get on the Bus. “I guess if the brothers are gettin’ together — you know, talkin’ about some things, tryin’ to work things out — I wanna be there,” Gary tells Xavier, who’s interviewing as many people as he can about their decision to attend the march. Gary is guided by the idea that anyone interested in the march is willing to put whatever differences they have aside, but that proves extremely difficult in an atmosphere of people with different backgrounds, lifestyles, and personality types.\n\nTensions arise within the group as its members get to know one another. Gary’s father, who was also a cop, was murdered by a gang member; when Jamal (Gabriel Casseus) reveals that he’s a reformed Crip who found Islam after committing several murders, Gary vows to put Jamal behind bars once they return to L.A. It doesn’t matter that Jamal works to prevent kids from making the mistakes he made — Gary only sees a murderer akin to his dad’s killer. Meanwhile, Flip serves as a consistently volatile presence throughout Get on the Bus. He craves attention, so when Flip isn’t questioning Gary’s Blackness (his mother is White), he’s name-dropping, overcompensating for his insecurity through misogyny, and being brazenly homophobic. He attacks Randall and Kyle, neither of whom back down. And when the confrontation turns physical, he falls victim to his own hubris.\n\nYou can’t call for empowerment without understanding that capitalism isn’t the solution. You can’t vow to do better by Black women, then not only fail to do so, but fail to understand why they don’t feel safe. And you can’t claim to want what’s best for Black people unless you want it for all Black people.\n\nAs reprehensible as Flip is at times, he’s far more tolerable than Wendell (Wendell Pierce), a car dealership owner who joins the bus in Memphis and then quickly draws the ire of the group. “Every brother ain’t righteous,” a skeptical George says of Wendell, a proud Black Republican who disparages HBCUs as “nigga schools” and rants about bootstrapping his way to success in between cigar puffs. Wendell, who sees the march as a massive networking opportunity, is an example of how capitalism can be a gateway drug to Republicanism, and his diatribe leads to him being forcefully removed from the bus.\n\nThe overall message isn’t subtle: On the way to atonement, these men confront several issues inhibiting progress for Black people as a whole. They don’t make it to the march, but the ordeal still provides a sense of fellowship. Before their journey home, George gives an impassioned speech about the real work beginning once they return. Alas, camaraderie doesn’t equate to evolution or progress. While attitudes on some issues presented in Get on the Bus have shifted slightly — especially across generational lines — many of the same conversations still take place regularly because of how deeply matters like capitalism, sexism, misogyny, and homophobia are embedded in society.\n\nYou can’t call for empowerment without understanding that capitalism isn’t the solution. You can’t vow to do better by Black women, then not only fail to do so, but fail to understand why they don’t feel safe. And you can’t claim to want what’s best for Black people unless you want it for all Black people. Some of these problems are structural and thus difficult to change in 25 years’ time — but others require more personal accountability, and genuine progress is impossible if accountability is treated like a prison.\n\nGet on the Bus leaves viewers with the image of Evan Sr. and Evan Jr.’s shackles lying in front of the Lincoln Memorial. It’s a callback to the shackles, chains, and handcuffs seen at the beginning of the film, which imply that the experience has brought forth liberation, or at least the foundation for it. But with some distance from both the film and the Million Man March that inspired it, the state of the world suggests that in certain instances, the shackles remain in place — locked by the very hands they bind.",
    "keywords": [
      "persist",
      "characters",
      "liberation",
      "men",
      "black",
      "25",
      "million",
      "bus",
      "man",
      "struggles",
      "film",
      "cant",
      "issues",
      "isnt"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------3cae4c95_93aa_4379_9599_1dd42f2317fa-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/javascript-in-plain-english/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6?source=extreme_main_feed---------4-73--------------------3cae4c95_93aa_4379_9599_1dd42f2317fa-------",
    "title": "11 Frontend tricks that most Frontend Developers don’t know about",
    "publish_date": "2020-10-14 19:17:01",
    "authors": [
      "Daniel Anderson"
    ],
    "summary": "Datalist elementOne HTML element that you don’t see used much at all and for no reason!\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements.\nYou will see a drop-down list of pre-defined options as you type.\n<datalist>Example:<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\"><option value=\"Cat\"><option value=\"Dog\"><option value=\"Chicken\"><option value=\"Cow\"><option value=\"Pig\"></datalist>",
    "text": "1. Datalist element\n\nOne HTML element that you don’t see used much at all and for no reason!\n\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements. You will see a drop-down list of pre-defined options as you type.\n\n<datalist>\n\nExample:\n\n<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\">\n\n<option value=\"Cat\">\n\n<option value=\"Dog\">\n\n<option value=\"Chicken\">\n\n<option value=\"Cow\">\n\n<option value=\"Pig\">\n\n</datalist>",
    "keywords": [
      "dont",
      "tag",
      "11",
      "datalist",
      "valuecatoption",
      "valuepigdatalist",
      "reasonthe",
      "frontend",
      "know",
      "valuedogoption",
      "valuecowoption",
      "developers",
      "typedatalistexampleinput",
      "tricks",
      "valuechickenoption",
      "used"
    ]
  },
  {
    "url": "https://uxdesign.cc/the-future-of-apple-ipad-b659b7da75a7?source=extreme_main_feed---------5-73--------------------3cae4c95_93aa_4379_9599_1dd42f2317fa-------",
    "title": "The future of Apple iPad",
    "publish_date": "2020-10-09 22:27:25",
    "authors": [
      "Ali Çorak"
    ],
    "summary": "Harddisk connection, mouse, Bluetooth mouse, Bluetooth keyboard, keyboard with USB-C, etc…We were able to use the iPad as a computer with keyboards.\nAlthough the Magic Keyboard is made for iPad Pro, which is more advanced than other iPads, it now supports iPad Air 4th generation.\nWe use the iPad in a horizontal position with Magic Keyboard.\nWe don’t need a new computer, we’re just looking for a screen; iPad provides this with Sidecar support.\nWhen John Ive left Apple, he founded the design agency LoveFrom and his first customer was Apple.",
    "text": "Catalyst takes care of everything when you develop for iPadOS or iOS with recommendations from Apple. The application becomes available for macOS. As you can imagine, it looks “like a Mac” on the iPad. Also, if you have written your application with Swift, Catalyst is not needed. SwiftUI will automatically adapt to macOS. But SwiftUI supports iOS13 and above. This means that devices with the latest iOS 12 (such as iPhone 6, which are currently widely used in the market) will not be supported.\n\nIt’s a Computer. Because;\n\niPad Pro + Magic Keyboard\n\nAfter making software innovations to the old generations and hardware to the new generations, the iPad became a computer. Harddisk connection, mouse, Bluetooth mouse, Bluetooth keyboard, keyboard with USB-C, etc…\n\nWe were able to use the iPad as a computer with keyboards. But some things could affect the user experience. (Touching the screen and using the keyboard was difficult for some) But then the trackpad came on the Magic Keyboard. Although the Magic Keyboard is made for iPad Pro, which is more advanced than other iPads, it now supports iPad Air 4th generation.\n\nIf we talk about other hardware details, if you use your iPad Pro with Magic Keyboard, there are 2 USB-C ports in total; Like MacBook Air. This is an advantage because any extra accessory you buy for the MacBook can be used for the iPad. (and yes, wish we didn’t have to buy extra accessories) In the end, Magic Keyboard does not move 360 ​​degrees like the Smart Folio Keyboard. I don’t know why but I think it looks like a laptop.\n\nWe use the iPad in a horizontal position with Magic Keyboard. That’s why sidebar matters. But as a problem, some applications open vertically even in a horizontal position. (Maybe it will improve in the future because it will not give a MacBook experience like this)\n\nNote: If you are used to doing operations such as volume up/volume down increase/decrease screen light from the keyboard, unfortunately, there are no top keys in Magic Keyboard.\n\nIt’s Not a Computer. Because;\n\nApple’s Sidecar\n\nWhen using a laptop or desktop, we sometimes need a second screen. We don’t need a new computer, we’re just looking for a screen; iPad provides this with Sidecar support. iPad is not a computer here; a screen.\n\nAnother topic is games; We know that MacBook is not preferred for games. But the iPhone performs well in games. I’m not a gamer but in games, the iPad performs like an iPhone, not MacBook. Moreover, there is controller support.\n\nThe iPadOS should no longer be compared to the iPhone or the Mac. It seems to be between macOS and iOS, but it is not. Special applications should be made for the iPad. For example, the Sharpr3D app is just for the iPad.\n\nSharpr3D\n\nIn other words, you can also do professional works such as 3D modeling, video editing, photo editing on the iPad. So what’s the limit? It’s not currently at the Mac level. You can edit a very good video with an app such as Luma Fusion, iMovie, Adobe Rush on iPads. But when you want to take this to a more professional level, iPads will not be suitable for you.\n\nLuma Fusion\n\nNote: Everyone talks about Apple after John Ive. When John Ive left Apple, he founded the design agency LoveFrom and his first customer was Apple. So Apple still works with John Ive.",
    "keywords": [
      "future",
      "iphone",
      "ipad",
      "computer",
      "magic",
      "screen",
      "macbook",
      "games",
      "used",
      "apple",
      "keyboard"
    ]
  },
  {
    "url": "https://towardsdatascience.com/fastapi-has-ruined-flask-forever-for-me-73916127da?source=extreme_main_feed---------6-73--------------------3cae4c95_93aa_4379_9599_1dd42f2317fa-------",
    "title": "FastAPI has Ruined Flask Forever for Me",
    "publish_date": "2020-10-11 09:01:22",
    "authors": [
      "Fahmi Nurfikri"
    ],
    "summary": "FastAPI has Ruined Flask Forever for MeWhy I prefer using FastAPI instead of FlaskFastAPI Logo — https://fastapi.tiangolo.comWhat do you like best about being a data scientist?\nIf you need to look for something about FastAPI, you usually don’t need to look anywhere else.\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running.\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords.\nFastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.",
    "text": "FastAPI has Ruined Flask Forever for Me\n\nWhy I prefer using FastAPI instead of Flask\n\nFastAPI Logo — https://fastapi.tiangolo.com\n\nWhat do you like best about being a data scientist? It’s definitely modeling and fine-tuning for optimal results. But what does it mean to be a good model if it’s never used or never deployed?\n\nTo produce a machine learning model, the typical approach is to wrap it in a REST API and use it as a microservice. One of the most widely used frameworks for creating APIs is Flask.\n\nThe main reason Flask is widely used is its simplicity. In general, we only use the API to model predictions, so we don’t need a complex architecture (example: Django). Another reason is that Flask is written in Python, which is the language used to do machine learning modeling in general, so we are familiar with it.\n\nHowever, if you want to create a REST API with clear, static, inputs that are validated, you must include several different packages from several third parties that do not cooperate with each other. And you have to create custom code to get everything running.\n\nThis is what caused me to look for alternatives for my needs, where finally I found a framework called FastAPI and it became my new favorite framework. Here are the reasons why I like to use FastAPI.\n\nDocumentation\n\nThe first thing I notice from FastAPI is the documentation. FastAPI has very extensive documentation and rich examples, which makes things easier. If you need to look for something about FastAPI, you usually don’t need to look anywhere else.\n\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running. So that we don’t need to write the API documentation that we created ourselves. As we all know, writing API documentation is annoying, not only because there is a lot of detail to go into, but also nothing more frustrating when the end-users are implementing but not match up the documentation. So that with the automatic generation of API documentation it will be very helpful\n\nBelow is a display example of the API documentation (provided by Swagger UI)\n\nAlternative automatic documentation is also provided (provided by ReDoc)\n\nTo define the created schema, it uses Pydantic, which is another awesome Python library, used for data validation. Its purpose is to validate the input that goes to FastAPI. If the input/request is incorrect then the appropriate error code will be returned.\n\nPerformance\n\nAs the name implies, this is indeed FastAPI. Based on data from techempower benchmarks, FastAPI beats every framework when it comes to performance. Where the most commonly used frameworks like Flask and Django lag behind.\n\nFramework performance — techempower\n\nYeah, it blazingly fast.\n\nAsynchronous\n\nOne of the drawbacks of Flask is the lack of asynchronous I/O support. Asynchronous is pretty important for HTTP endpoints, which tend to do a lot of waiting for I/O and network chat, making it a good one candidate for concurrency using async.\n\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords. FastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.\n\nAll you have to do is declare the endpoints with the async keyword like this:",
    "keywords": [
      "api",
      "dont",
      "using",
      "forever",
      "framework",
      "documentation",
      "flask",
      "need",
      "used",
      "ruined",
      "asynchronous",
      "fastapi"
    ]
  },
  {
    "url": "https://medium.com/personal-growth/6-psychological-reasons-why-you-take-things-too-personally-6c46c21402a1?source=extreme_main_feed---------9-73--------------------3cae4c95_93aa_4379_9599_1dd42f2317fa-------",
    "title": "6 Psychological Reasons Why You Take Things Too Personally",
    "publish_date": "2020-09-15 01:31:24",
    "authors": [
      "Nick Wignall"
    ],
    "summary": "If you want to stop taking things personally don’t generalize a mistake in behavior to a flaw in character.\nTaking things personally often means you value other people’s opinions too much and your own not enough.\nAnd it doesn’t take a psychologist to see how this is going to lead you to take things personally.\nAnd when you do that, you’ll find it far easier to resist taking things personally.\nOne of the best (but sometimes hardest) things you can do to stop taking things personally is to make a big change in the type of people you regularly spend time with.",
    "text": "1. You’re a social perfectionist\n\nSocial perfectionism is when you can’t stand the thought of other people seeing your flaws or mistakes.\n\nWhen you believe you have to be perfect in other people’s eyes, it drives you to constantly worry about what other people think of you. And when you’re in the habit of always worrying about what others think about you, taking things personally is almost inevitable.\n\nBut here’s the deal:\n\nIt’s okay to make mistakes. And more importantly, it’s okay to worry about what other people think of you.\n\nWe’re social creatures, after all. Our biggest advantage as a species is the fact that we can coordinate and work together with each other. And that ability depends on our capacity to imagine what other people are thinking and feeling, including about us. So it’s not surprising that we tend to care a lot about what others think of us!\n\nThe self-help industry has convinced us that we shouldn’t care at all what other people think… This is nonsense!\n\nWe’re fundamentally social creatures. Caring about what others think is part of the package.\n\nThe real problem social perfectionists get into is that they are too hard on themselves for worrying about what other people think.\n\nIf you want to care a little less about what others think and stop taking things so personally the trick is to be validating of your worries instead of judgmental.\n\nWhen you find yourself wondering what other people think of you, simply remind yourself that it’s normal and okay to worry about this a little.\n\n2. You use negative self-talk as motivation\n\nMost of us grow up learning that the only way to be successful in life is to be tough on ourselves. And inevitably, this leads to a subtle but powerful habit of negative self-talk.\n\nLike the drill sergeant hurling insults at his new recruits in order to “make men out of them,” many of us adopt a similar attitude toward ourselves…\n\nWe think that if we’re tough enough on ourselves it will motivate us to succeed. But there’s a slight problem with this reasoning…\n\nBeing harsh and judgmental with yourself actually decreases performance.\n\nBut worse than that, it can lead to a life-long habit of negative self-talk and all the side-effects that go with it — from anxiety and low self-esteem to… yup, you guessed it: taking things too personally.\n\nWhen someone criticizes you or gives you difficult feedback, a strong habit of negative self-talk can easily hijack your thinking. Instead of considering the mistake as an isolated incident, you end up making very extreme or black and white interpretations to yourself:\n\nInstead of I need to work harder at this aspect of my work we tell ourselves I’m a loser.\n\nInstead of He’s disappointed in my work we slip into He’s disappointed in me.\n\nIf you want to stop taking things personally don’t generalize a mistake in behavior to a flaw in character.\n\nTrue freedom from taking things personally comes from removing the habit of negative self-talk altogether — from learning that you don’t actually need to be hard on yourself in order to stay motivated and succeed.\n\nTechniques like cognitive restructuring and self-compassion can help you end the habit of negative self-talk, and as a result, stop taking things personally.\n\n3. You’re afraid to be proud of yourself\n\nAh, pride… Everyone’s favorite sin!\n\nIn part, because of Western culture’s Christian heritage, many people grow up believing that pride is bad, or sinful even. After all, that’s why Lucifer got thrown out of heaven and why Adam and Eve got expelled from Paradise, right? Thinking too much of themselves?\n\nActually I’m not so sure… Now, I’m no theologian (just a humble psychologist) but I think technically the sin of pride comes when you put yourself above other people — thinking that you’re better than someone else.\n\nBut simply acknowledging your own strengths, goodness, and virtues… I’m not sure that’s such a bad thing!\n\nAnd while I can’t speak to the spiritual side of things, psychologically it’s actually very beneficial to have a healthy sense of pride in yourself.\n\nSo how does this relate to taking things personally?\n\nTaking things personally often means you value other people’s opinions too much and your own not enough.\n\nFor example:\n\nSuppose your spouse makes a sarcastic or rude comment about you. If you’re in the habit of always telling yourself that other people are smart and capable but you’re dumb and weak, your chances of believing your spouse’s comment and internalizing it go way up.\n\nOn the other hand, if you have a healthy sense of pride — if you regularly remind yourself of your strengths and positive qualities — it’s going to be much easier to say to yourself Wait a second, that’s not true at all. I’m actually very conscientious and hard-working and almost never lazy. And as a result, not take what your spouse said too seriously or personally.\n\nA healthy sense of pride is a powerful defense against unjust criticism and taking things personally.\n\nMake a little time to remind yourself of your positive and admirable qualities and you’ll find it a lot easier to confidently resist unfair criticism and critiques.\n\n4. You don’t know how to be assertive\n\nMost of us are taught from a young age that it’s important to be nice, kind, and agreeable and to put other people’s wants and needs before our own.\n\nAnd then we get so reinforced for this that we end up taking it to an extreme where we’re chronically taking care of other people but never addressing our own wants and needs.\n\nThis is not sustainable long-term. And one of the many symptoms of constantly denying your own wants and needs by being overly-accommodating of others is that you end up taking things personally more often than you should.\n\nThink about it:\n\nIf you are constantly setting aside your own wants and needs and taking care of others, what are you teaching your own brain about the relative importance of yourself vs other people?\n\nIn short: that you don’t matter.\n\nAnd so, it really shouldn’t be a surprise that when you get criticized for something, your automatic assumption is that they’re probably right and what you think/feel isn’t really very important. And it doesn’t take a psychologist to see how this is going to lead you to take things personally.\n\nThe solution is to learn to be assertive.\n\nAssertiveness is the ability to ask for what you want and say no to what you don’t want in a way that’s honest to your own wants and needs and also respectful of other people.\n\nOnce you start learning to be more assertive, you will begin to value yourself more highly. And when you do that, you’ll find it far easier to resist taking things personally.\n\n5. You get lost in your own stories\n\nTaking things personally usually happens after we’ve been criticized. And while it’s tempting to see the other person’s words as the thing that hurt us, that’s not technically true…\n\nAbout 50 years ago, cognitive scientists finally validated a theory of emotion that philosophers had been trying to convince us of for more than 2,000 years. It’s called cognitive mediation.\n\nCognitive mediation is the idea that things in the world don’t cause emotions. Instead, it’s our thoughts about things that affect how we feel.\n\nHere’s a concrete example:\n\nYou’re driving down the road and some guy in a red sports car zooms past you and cuts you off, forcing you to slam on your breaks and almost causing an accident. Understandably, you’re mad as hell. But the question is, did the guy cutting you off cause your anger?\n\nTechnically no. What caused your anger was your story about what being cut off meant. Here’s what I mean:\n\nIf the first thought that crossed your mind after being cut off was What a jerk! I hope he gets pulled over anger will likely be your emotional response.\n\nBut if the first thought to cross your mind was Oh my God, I could have been killed! fear might be the dominant emotion.\n\nTaking things personally is about the stories you tell yourself, not the stories other people tell you.\n\nA great way to stop taking things so personally is to pay attention to the stories you tell yourself when you’re criticized. And if possible, change those stories to be more realistic — or even better, refrain from telling stories at all.\n\nEasier said than done, of course, but fundamentally our tendency to tell stories to ourselves is a habit. And habits can always be modified with practice and patience.\n\n6. You spend too much time with the wrong people\n\nAs babies and small children, we learn about ourselves through the people around us:\n\nWhen a baby smiles and her mother smiles back at her, she learns that someone is there to be responsive to her.\n\nWhen a kid hears a parent tell them that they’re lazy and “no good” that kid starts to think of themselves as lazy and no good.\n\nWe are social beings to our core. But this isn’t just true for kids…\n\nAs adults, the people we spent the most time around influence us more than we’d like to admit:\n\nThat talk show host you’ve listened to every morning for 8 years… You’re in denial if you think they haven’t influenced you.\n\nThat overly-critical boyfriend you’ve been living with for the past two years… Do you really think your self-esteem hasn’t taken a hit as a result of being around him for so long?\n\nAs human beings we are incredibly sensitive to the influence of other people in our lives, especially the ones we spend the most time around.\n\nSpend all your time around people who disrespect you and you’re going to end up treating yourself the same way.\n\nOne of the best (but sometimes hardest) things you can do to stop taking things personally is to make a big change in the type of people you regularly spend time with.\n\nMaking new friends, ending an unhealthy relationship, or putting boundaries on toxic family members is never going to be easy. But that doesn’t mean it isn’t important .",
    "keywords": [
      "dont",
      "psychological",
      "tell",
      "negative",
      "taking",
      "reasons",
      "habit",
      "think",
      "personally",
      "pride",
      "things",
      "youre"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------b0d02cb7_a169_4a96_9a21_d12360ff0284-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------b0d02cb7_a169_4a96_9a21_d12360ff0284-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------b0d02cb7_a169_4a96_9a21_d12360ff0284-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------b0d02cb7_a169_4a96_9a21_d12360ff0284-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------b0d02cb7_a169_4a96_9a21_d12360ff0284-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------0-74--------------------df3253fa_37f1_4edd_a9e9_7d9517b2ec86-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://humanparts.medium.com/how-well-get-over-going-to-the-upper-room-with-donald-j-trump-4d63f2e9741a?source=extreme_main_feed---------1-74--------------------df3253fa_37f1_4edd_a9e9_7d9517b2ec86-------",
    "title": "How We’ll Get Over: Going to the Upper Room With Donald J. Trump",
    "publish_date": "2020-10-15 21:12:55",
    "authors": [
      "Max S. Gordon"
    ],
    "summary": "What we are facing is bigger than Donald Trump.\nOr maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose.\nPolitically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved.\nIf, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.",
    "text": "We’ve been here before. Our ancestors knew, when you can’t control the evil of the world, you must become the weather. A howling wind through the trees, a blistering sun, an irresistible force. Our democracy is on a respirator now, and we must defend it.\n\nJustice and nonviolent resistance became an electrifying force in 1955 when working-class Blacks who relied on the buses in Montgomery, Alabama, shut down the discriminatory system for an entire year, permanently changing the laws in that city. We need the spirit of transcendence that led these heroic women and men, many of them maids and laborers, to walk to work each day and say, “I can’t feel the hurt in my feet when there is a balm for my soul. And I will walk five more miles to work if it means a better life for my children.”\n\nWe need the Holy Ghost power that stopped Eugene “Bull” O’Connor, the commissioner of public safety in Birmingham, Alabama, when he ordered a battalion of firefighters to turn hoses on a crowd of protesters, including children, on May 5, 1963, often called “Miracle Sunday.” The firefighters not only resisted the order—it was reported that some of them cried.\n\nThe power of the crowd, who had walked from a local church, was both vulnerable and authoritative — a compelling, mystical combination. Whatever racist trance had possessed those firefighters when they’d hosed the same crowds only days before, it was broken, perhaps when they looked at the children and thought, “The little girl I am aiming this hose at could be mine.” Rev. Martin Luther King, Jr. later wrote, “I felt there, for the first time, the pride and the power of nonviolence.”\n\nThe alchemy of grace and conviction works. It has worked. I know because I am alive. I write these words with the knowledge that once upon a time someone who belonged to my family would have been whipped or worse for even trying to learn the alphabet. Yet I read, I write. Something they did to survive must have worked — because I’m here.\n\nNo matter how much they try to distort the truth on Fox News or make us feel like fools for believing, the sacrifices of earlier generations matter. How many women had to die on kitchen floors and back alleys for just one woman to walk into a care facility, protected by Roe v. Wade, and make an appointment for her health — legally and safely? We will not go back. Their sacrifices matter. And we owe them our determination to see that Roe v. Wade is not overturned. A persuasive river of courage flows through history, from Harriet Tubman to the suffragettes to the rioters at Stonewall. We’ll never know all the names, but we know that river exists — because we’re here.\n\nHistory has always had rogues, scoundrels, reprobates, damn fools, men who have acted as children. Bullies. Dictators. As a human family, we’ve seen astounding acts of evil. But the thing about evil is not to make it personal or to take it personally. We have to look beyond the actors. The only way to combat evil is not to respond with evil, but to invest in a more compelling vision. Because of someone’s vision, I am married to the man I love.\n\n7\n\nWelcome to Niggerland. A place on the outskirts of town where there has been crime and poverty and drugs and lack of health care and denied educational opportunities. My white friends, you were once untouched by the pain of the people who live there. But please know, those divisions no longer exist the way they once did. Perhaps Donald Trump’s greatest achievement is that he’s turned every American into a nigger, black or white (including a few people who are convinced they hate niggers). One way or another, we’re all in the soup now.\n\nNigger. It’s an unpleasant word, and forgive me for using it, but it’s the right word. It’s not a Black person’s shame, but a white society’s shame for its ugliness. It’s a word meant to terrorize a group of people within a system of oppression and make them feel powerless so they won’t act and try to change it. In other words, in Donald Trump’s eyes, we’re all niggers now. There isn’t a single person or institution he doesn’t have contempt for.\n\nWhat we are facing is bigger than Donald Trump. Perhaps he is the fulfillment of America’s karma in the world, our political shadow finally come to life. Or maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose. He is the personification of the Ugly American trope, vulgarity incarnate, an ambling Frankenstein monster ripping the village apart with his bare hands. Politically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\n\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved. His message isn’t really new—it’s his malevolence that’s profound. Maybe one day we will perceive his legacy as an opportunity that afforded fundamental change. If, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.\n\nWe may not change his heart, but we need to alter ourselves so we are different when and if the next monster arrives. In the aftermath of what happens, assessments will be made, and we will have to acknowledge that while solidarity eventually came from unexpected sources — Republicans willing to abandon their tribe — this went on for far too long, and too many lives were lost.\n\n8\n\nThere is a Black teenage girl who studies her lipstick one more time in the mirror before cutting off the bathroom light. She is going to a demonstration. There may be violence. But she believes in that preacher, Dr. King, and the sermon he preached on racial equality last Sunday. She knows it is dangerous; they’ve unleashed dogs on protestors; they turned hoses on families, pinning them against buildings and cars. People have been jailed, students have been clubbed, just for having the audacity to want to go to school with whites, to vote without retaliation.\n\nIt is 1957, and only a girl herself, she has no way of knowing that one day her daughter will look back at her through history. Her daughter will move into her dorm at a public university, buy her books, and although every battle won’t have been won, she will walk into the classroom her mother envisioned for her, without having to be escorted by the National Guard. She will claim the seat her mother earned.\n\nWe have a legacy to uphold; we have ancestors to honor. We’ve been here before. The names are always different. But whenever justice is threatened anywhere, there are always brave ones.\n\n9\n\nRevolution begins with a flower. Hold it your hand. And know that the man who owns real estate and golf courses all over world, in all his presumed omnipotence, doesn’t have the power to make a single flower.\n\nAnd if he chooses to destroy that flower, there’s another flower next to it in the field. There will always be flowers. Legions of them, as there are legions of us.\n\nAnd when your hope is restored and you remember who you are and what is possible to achieve with fortitude and grace, step out the door with that flower in your hair.\n\nAnd act.",
    "keywords": [
      "trump",
      "world",
      "way",
      "weve",
      "upper",
      "evil",
      "j",
      "going",
      "know",
      "power",
      "walk",
      "white",
      "room",
      "donald"
    ]
  },
  {
    "url": "https://coronavirus.medium.com/the-company-set-to-roll-out-americas-future-vaccine-cb56ea9691fa?source=extreme_main_feed---------2-74--------------------df3253fa_37f1_4edd_a9e9_7d9517b2ec86-------",
    "title": "The Company Set to Roll Out America’s Future Vaccine",
    "publish_date": "2020-10-15 20:44:45",
    "authors": [
      "Yasmin Tayag"
    ],
    "summary": "The Company Set to Roll Out America’s Future VaccineThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccinesMario Tama / Getty ImagesWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages.\nIt’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history.\nIn August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\nAt the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention.\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made.",
    "text": "The Company Set to Roll Out America’s Future Vaccine\n\nThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccines\n\nMario Tama / Getty Images\n\nWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages. It’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history. To do the job, the White House has contracted a company called McKesson Corporation. In August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\n\nThis isn’t McKesson Corporation’s first vaccine-distribution rodeo. The company, founded 187 years ago and the seventh-largest U.S. company in terms of revenue in 2019, was also responsible for managing the distribution of the H1N1 vaccine to as many as 90,000 sites across the U.S. during the 2009 swine flu outbreak. At the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention. The company has also had an existing contract with the CDC to distribute childrens’ vaccines since 2016, and its role in distributing vaccines during the pandemic is based on that contract. Its success during the H1N1 epidemic bodes well for Covid-19 rollout, but U.S. public health infrastructure may continue to pose problems.\n\nAs I wrote previously, the specifics of how a vaccine will be distributed by McKesson — and who will get it first — are not yet clear. In an email to the Medium Coronavirus Blog, Robert Redfield, PhD, director of the CDC, said: “Through the Advisory Committee on Immunization Practices, CDC will play a vital role in deciding, based on input from experts and stakeholders, how initial, limited vaccine doses will be allocated and distributed while reliably producing more than 100 million doses by January 2021.” McKesson shared its public statement about its CDC partnership with the Blog but did not answer questions.\n\nThere does seem to be a plan to determine where exactly McKesson will distribute vaccines, according to the HHS. A spokesperson for the agency tells the Blog that ensuring easy access for all Americans, notably minority communities and medically underserved populations, is a top priority. “Whether it’s at a doctor’s office, retail pharmacy, federally qualified health center, or hospital,” they said, “thousands of outlets will be available so no American must travel far to be vaccinated.”\n\nThe plan is that McKesson will deliver a specific amount of vaccine to a designated location once it’s allocated to a given jurisdiction or authorized partner. In many instances, says the spokesperson, these will be sites where the vaccine will actually be administered; in others, McKesson will deliver vaccines to sites where health departments will pick up the vaccine and further distribute it within their networks. National retail pharmacies will also use a similar system. “This system,” says the spokesperson, “will be scalable to meet demand.”\n\nUntil more is known about the vaccine to be distributed, it’s not clear how it will be transported. Some vaccines are more delicate than others, and sometimes they require refrigeration. According to HHS, if the vaccine has ultra-cold storage requirements, it may be shipped directly from the manufacturer to administration sites, but this too will be managed within McKesson’s centralized system. The contract the company has with the CDC covers the transportation of both refrigerated (2–8º Celsius) and frozen (-20ºC) vaccines.\n\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made. The HHS spokesperson says the U.S. government is “committed to working with other countries friendly to our national security to ensure safe and effective Covid-19 vaccines are developed as fast as possible, however, the vaccine and therapeutic candidates [Operation Warp Speed] has invested in are the candidates OWS believes to be the most promising, and all of those candidates are being manufactured in the U.S.”\n\nMcKesson’s performance during the H1N1 epidemic in 2009 bodes well for the Covid-19 pandemic: During that time, it distributed almost 81 million H1N1 vaccine doses to 90,000 sites. However, notes journalist Michele Cohen Marill in the medical publication Medscape this week, distribution ran into obstacles at the public health level: “Public health officials struggled with the mechanics of designating priority groups and reaching out to them for vaccination while asking others to wait.”\n\n“I’m not sure there’s much difference between 1976, 2009, and 2020–2021,” Rebecca Wurtz, MD, MPH, of the University of Minnesota School of Public Health in Minneapolis, told Medscape. “The issues around organizing a massive distribution of a new vaccine are pretty similar.”\n\nThe U.S. can’t afford to make administrative errors during the Covid-19 pandemic, especially as the fall surge continues and the death toll mounts. States ultimately shape the actual vaccination programs, notes Marill in Medscape, and it’s up to them to decide who can administer the vaccine, and where. The hope is that state governments authorize as many people as possible to safely administer the vaccine and make access to it widespread and equitable. Neighborhood pharmacies will likely play a key role, as the HHS spokesperson suggests: “For example, during H1N1, once vaccines became widely available pharmacies played an important role in the vaccine distribution,” they said, adding that pharmacies’ role “is even more critical to vaccinations today and will be fully integrated into the distribution plan.”",
    "keywords": [
      "role",
      "future",
      "company",
      "mckesson",
      "public",
      "set",
      "roll",
      "distribution",
      "vaccines",
      "vaccine",
      "health",
      "spokesperson",
      "americas",
      "covid19"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------df3253fa_37f1_4edd_a9e9_7d9517b2ec86-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------4-73--------------------df3253fa_37f1_4edd_a9e9_7d9517b2ec86-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------5-73--------------------df3253fa_37f1_4edd_a9e9_7d9517b2ec86-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://towardsdatascience.com/25-lesser-known-java-libraries-you-should-try-ff8abd354a94?source=extreme_main_feed---------6-73--------------------df3253fa_37f1_4edd_a9e9_7d9517b2ec86-------",
    "title": "25 lesser-known Java libraries you should try in 2020",
    "publish_date": "2020-10-07 22:09:24",
    "authors": [
      "Md Kamaruzzaman"
    ],
    "summary": "JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape.\nIn enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform.\nWiremockHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development.\nLink:ConclusionIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries.\nThere are many excellent Java libraries that I have not listed here but worth a try.",
    "text": "1. RxJava\n\nReactive Extensions (ReactiveX) is a popular software development paradigm to deal with asynchronous and event-driven programming. RxJava is the Java VM implementations of the Reactive Extensions by using Observables. It extends the Observer Pattern to support event-driven programming by adding composable operators on a sequence of events/data in a declarative way. It also hides the low-level complexities like threading, thread-safety, synchronization, and concurrent data structure.\n\nIf you want to do reactive programming in Java, it is a must-have library.\n\nLink:\n\n2. OkHttp\n\nHTTP is by far the most used Application layer protocol. There are many excellent Java-based HTTP client libraries out there. But OkHttp is the simplest yet powerful HTTP client library in the JVM. It offers fluent and clean API to develop HTTP client in Java.\n\nIt also supports some advanced features: Connection pooling, GZIP shrink, response caching, modern TLS features, and many more.\n\nLink:\n\n3. MyBatis\n\nIn most Software development projects, we need to store data. Although there are many types of data storage, SQL is still the most used data storage type. As a Java developer, we need to match our Java object to the SQL table. One way to achieve the mapping is to use ORM (e.g., Hibernate). But there are many use cases when you want to have full control over the Object-Table mapping (e.g., Performance). In those cases, you can directly use JDBC and write the SQL query. The other way is to use MyBatis to map Java Object to Stored Procedure or SQL statements. It offers both annotation-based or XML descriptor based mapping.\n\nI prefer MyBatis over plain JDBC, especially in larger projects, as it improves the separation of concerns.\n\nLink:\n\n4. HikariCP\n\nHikariCP is the second library in this list related to Database. Establishing a JDBC connection is resource expensive. If you create a new connection every time you access the Database and close it once you are done, it can severely impact your application performance. Not to mention that failure to close the connection properly or allowing limitless database connection can crash your application.\n\nUsing Connection Pooling means connections are reused rather than created each time a connection is requested. HikariCP is a very fast yet lightweight Database connection pooling in JVM. It is also very reliable and a “zero-overhead” JDBC connection pool.\n\nLink:\n\n5. Lombok\n\nIn modern days, Java is often criticized as a verbose and bloated programming language. Compared to other popular languages (JavaScript, Python, Scala, Kotlin), a developer needs to write lots of boilerplate code in Java. Although Java has introduced Records in JDK 15 to reduce boilerplate code in Java, it is not an LTS release. Fortunately, a library can already reduce your boilerplate code in Java significantly: Project Lombok. You can generate getters, setters, hashcode, equals, toString, Builder classes by adding a few annotations. Additionally, it offers null pointer check, logger, and many more.\n\nLink:\n\n6. VAVR\n\nJava finally released the much-awaited functional programming via Lambda and Streaming in version 8. If you are used to functional programming or want to dive deep into functional programming, you may find Java’s functional programming wanting. Compared to many other functional programming languages (Haskell, Scala), Java is pale. VAVR is a library that can fill the gap of the functional programming features in Java. It provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nLink:\n\n7. Gson\n\nOver the years, JSON has become the de-facto data exchange format. In Java, there also exist several excellent libraries to deal with JSON. One of them is Jackson, which I have covered in my previous article. The other excellent library is Google’s Gson. Unlike Jackson, it is a minimalistic library and only supports JSON. It offers Data Binding, extensive Generic support, flexible customization. One of the major advantage (or disadvantage depending on your liking) of Gson is that it does not need annotation.\n\nLink:\n\n8. jsoup\n\nIf you are developing your application in Java and need to deal with HTML, you should use jsoup. It is a Java library to work with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data. It implements the WHATWG HTML5 specification and parses HTML using the best of HTML5 DOM methods. It supports parsing HTML from URL/string, find and extract data, manipulate the HTML elements, clean HTML, output HTML.\n\nLink:\n\n9. JIB\n\nIf you are working on an enterprise-grade application, it should be at least Cloud-ready. The first step to make your application cloud-ready is to containerize your application, i.e., put your artifactory binary into Docker image. Dockerizing a Java application is a bit tedious work: you need to have deep knowledge of Docker, you need to create a Dockerfile, and you will need Docker Daemon. Fortunately for the Java developers, Google has created an Open-source Java containerizer using already existing tools. You can use JIB as a Java library to build an optimized Docker and OCI image.\n\nLink\n\n10. Tink\n\nTink is yet another handy Java library in this list from Google. Cryptography and security are becoming increasingly more important in Software Development. Cryptographic techniques are used to secure user data. Implementing cryptography correctly requires a lot of expertise and effort. A group of Cryptographers and security engineers in Google has written the multi-language cryptographic library Tink. It offers easy-to-use but hard to misuse security API. Tink offers cryptographic functionalities via different primitives. It provides symmetric key encryption, streaming symmetric key encryption, deterministic symmetric key encryption, digital signature, hybrid encryption, and many other encryption functionalities.\n\nLink:\n\n11. Webmagic\n\nIf you work on Web crawling, you can write your own crawler, which is time-consuming and tedious. In Java, Webmagic is an excellent Web crawler library that covers the complete life-cycle of crawler: downloading, URL management, content extraction, persistence. It offers a simple yet flexible core, Annotation support, multi-threaded, and easy-to-use API.\n\nLink:\n\n12. ANTLR 4\n\nIf you work on parsing and processing data, then the ANTLR library could be handy. It is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It does this by giving us access to language processing primitives like lexers, grammars, parsers, and the runtime to process text against them.\n\nIt’s often used to build tools and frameworks.\n\nLink:\n\n13. Caffeine\n\nIf your application is read-heavy, then caching can dramatically improve your application’s data access performance. Java has many great caching libraries. Caffeine is the best among the lot. It is a high-performance, near-optimal caching library based on Java. It offers a fluent caching API and some advanced features like asynchronous loading of entries, asynchronous refresh, weak referenced keys, etc.\n\nLink:\n\n14. Metrics\n\nOnce your Java application runs into production, you will want to have insight into your application's critical components. Metrics from the Dropwizard framework is a simple yet compelling Java library that provides insight into your application and JVMs KPI, e.g., rate of events, pending jobs, service health check, and more. It is modular and offers modules for other libraries/frameworks.\n\nLink:\n\n15. gRPC-Java\n\nGoogle has created gRPC as a modern Remote Procedure Call system in 2015. Since then, gRPC became extremely popular and one of the most used RPC system in modern software development. The library gRPC-Java is the Java implementation of the gRPC client. If you want to use gRPC in Java, then this library can be handy for you.\n\nLink:\n\n16. Java WebSocket\n\nTraditional Client-Server communications unidirectional. WebSocket is a bi-directional communication protocol over a single TCP connection. Java WebSocket is a barebone WebSocket server and client implementation in Java. If you are a Java developer and want to work with WebSocket, this library is highly recommended.\n\nLink:\n\n17. JJWT\n\nJSON Web Token (JWT) is the de-facto Authorization and secure Information exchange format in modern software development. Whether you are using a simple session-based Authorization or highly advanced OAuth2 based Authorization, you will probably use JWT. JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape. It is fully RFC specification compliant on all implemented functionality. It supports readable and convenient fluent API.\n\nLink:\n\n18. Swagger-Core\n\nOpenAPI is the specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. Swagger-Core is the Java implementation of the OpenAPI specification. If you are exposing REST API in your Java/JavaEE application, you can automatically provide and expose your API definitions using Swagger-Core.\n\nLink:\n\n19. Async Http Client\n\nAsynchronous programming is becoming increasingly popular of late because of its non-blocking nature. Most of the popular Java HTTP client libraries offer limited to no asynchronous HTTP response processing. Async Http Client is a popular Java library that offers asynchronous HTTP response processing. As a bonus feature, this library also supports the WebSocket protocol.\n\nLink:\n\n20. Liquibase\n\nAs a software developer, we all know the importance of version control, DevOps, and CI/CD of our code. In a blog post: Evolutionary Database Design, the great Martin Fowler argued that we also need version control and CI/CD of our code. Liquibase is a tool that supports tracking, version controlling, and deployment of SQL database changes in Java Applications. If you are working with an SQL database where the database is evolving, this tool can greatly simplify your database migration.\n\nLink:\n\n21. Springfox\n\nI have already listed Swagger-Core in this list, which can automatically generate REST API documentation for vanilla Java or Java EE application. In enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform. In Spring-based Java applications, the Springfox library can automatically generate REST API documentation from the source code.\n\nLink:\n\n22. JavaCV\n\nOpenCV is a computer vision and machine learning software library. It is open-source and was built to provide a common infrastructure for computer vision applications. JavaCV is a wrapper on OpenCV and many other popular libraries (FFmpeg, libdc 1394, PGR FlyCapture) in the field of computer vision. JavaCV also comes with hardware accelerated full-screen image display, easy-to-use methods to execute code in parallel on multiple cores, user-friendly geometric and the color calibration of cameras and projectors, detection and matching of feature points, and many other features.\n\nLink:\n\n23. Joda Time\n\nJava had a poor date and time functionalities in the pre-Java8 core library. Java8 released much needed advanced date and time functionalities in its java.time package. If you are working with an older version of Java (pre Java8), Joda time can provide you the advanced date and time functionalities. However, if you are working in a newer version of Java, you may not need this library.\n\nLink:\n\n24. Wiremock\n\nHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development. During the writing Unit test, it is best to focus on SUT (System Under Test) and mock the services used in the SUT. Wiremock is a simulator for REST API and enables developers to write code against an API that does not exist or incomplete. In microservice-based software development, Wiremock can significantly boost development velocity.\n\nLink:\n\n25. MapStruct\n\nIn Java application development, you often need to convert one type of POJO to another type of POJO. One way to achieve this POJO or Bean conversion is to explicitly code the transformation, which is tedious. The smart way is to use a library that is specifically developed to transform POJO/Bean. MapStruct is a code generator that implements mapping between POJO/Bean on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe, and easy to understand.\n\nLink:\n\nConclusion\n\nIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries. These libraries are not domain-specific and can help you whether you are developing Software for Business applications, Robotics, Android Apps or Personal projects. Please note that for a large and wide eco-system like Java, this list is not conclusive. There are many excellent Java libraries that I have not listed here but worth a try. But this list of libraries can provide a quick peek into the world of the Java eco-system.",
    "keywords": [
      "2020",
      "development",
      "lesserknown",
      "libraries",
      "try",
      "library",
      "25",
      "application",
      "java",
      "need",
      "offers",
      "programming",
      "software",
      "data"
    ]
  },
  {
    "url": "https://towardsdatascience.com/fastapi-has-ruined-flask-forever-for-me-73916127da?source=extreme_main_feed---------7-73--------------------df3253fa_37f1_4edd_a9e9_7d9517b2ec86-------",
    "title": "FastAPI has Ruined Flask Forever for Me",
    "publish_date": "2020-10-11 09:01:22",
    "authors": [
      "Fahmi Nurfikri"
    ],
    "summary": "FastAPI has Ruined Flask Forever for MeWhy I prefer using FastAPI instead of FlaskFastAPI Logo — https://fastapi.tiangolo.comWhat do you like best about being a data scientist?\nIf you need to look for something about FastAPI, you usually don’t need to look anywhere else.\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running.\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords.\nFastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.",
    "text": "FastAPI has Ruined Flask Forever for Me\n\nWhy I prefer using FastAPI instead of Flask\n\nFastAPI Logo — https://fastapi.tiangolo.com\n\nWhat do you like best about being a data scientist? It’s definitely modeling and fine-tuning for optimal results. But what does it mean to be a good model if it’s never used or never deployed?\n\nTo produce a machine learning model, the typical approach is to wrap it in a REST API and use it as a microservice. One of the most widely used frameworks for creating APIs is Flask.\n\nThe main reason Flask is widely used is its simplicity. In general, we only use the API to model predictions, so we don’t need a complex architecture (example: Django). Another reason is that Flask is written in Python, which is the language used to do machine learning modeling in general, so we are familiar with it.\n\nHowever, if you want to create a REST API with clear, static, inputs that are validated, you must include several different packages from several third parties that do not cooperate with each other. And you have to create custom code to get everything running.\n\nThis is what caused me to look for alternatives for my needs, where finally I found a framework called FastAPI and it became my new favorite framework. Here are the reasons why I like to use FastAPI.\n\nDocumentation\n\nThe first thing I notice from FastAPI is the documentation. FastAPI has very extensive documentation and rich examples, which makes things easier. If you need to look for something about FastAPI, you usually don’t need to look anywhere else.\n\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running. So that we don’t need to write the API documentation that we created ourselves. As we all know, writing API documentation is annoying, not only because there is a lot of detail to go into, but also nothing more frustrating when the end-users are implementing but not match up the documentation. So that with the automatic generation of API documentation it will be very helpful\n\nBelow is a display example of the API documentation (provided by Swagger UI)\n\nAlternative automatic documentation is also provided (provided by ReDoc)\n\nTo define the created schema, it uses Pydantic, which is another awesome Python library, used for data validation. Its purpose is to validate the input that goes to FastAPI. If the input/request is incorrect then the appropriate error code will be returned.\n\nPerformance\n\nAs the name implies, this is indeed FastAPI. Based on data from techempower benchmarks, FastAPI beats every framework when it comes to performance. Where the most commonly used frameworks like Flask and Django lag behind.\n\nFramework performance — techempower\n\nYeah, it blazingly fast.\n\nAsynchronous\n\nOne of the drawbacks of Flask is the lack of asynchronous I/O support. Asynchronous is pretty important for HTTP endpoints, which tend to do a lot of waiting for I/O and network chat, making it a good one candidate for concurrency using async.\n\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords. FastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.\n\nAll you have to do is declare the endpoints with the async keyword like this:",
    "keywords": [
      "api",
      "dont",
      "using",
      "forever",
      "framework",
      "documentation",
      "flask",
      "need",
      "used",
      "ruined",
      "asynchronous",
      "fastapi"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------8-73--------------------df3253fa_37f1_4edd_a9e9_7d9517b2ec86-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://medium.com/@largemovement/theres-not-going-to-be-a-second-american-civil-war-here-s-why-93453c88c19a?source=extreme_main_feed---------9-73--------------------df3253fa_37f1_4edd_a9e9_7d9517b2ec86-------",
    "title": "There’s Not Going to Be a Second American Civil War. Here’s Why.",
    "publish_date": "2020-09-28 16:09:03",
    "authors": [
      "Paul Alexander"
    ],
    "summary": "There certainly does seem to be a whiff of Second Civil War in the air, on both sides of the liberal-conservative political divide.\nBut the Second Civil War prediction has a been a go-to for pundits, Gremlins 2 directors, and war game designers for decades.\nBut in an unprecedented display of bipartisanship, both the liberal and conservative cases for Civil War Part II rest on the same false assumption: that the Civil War was caused by the same type of polarization in America today.\nBut when the Civil War began, most crops grown for American consumption came from the North.\nBut it won’t bring us any closer to the brink of civil war than the removal of Bless This Mess from ABC’s Tuesday night lineup.",
    "text": "On September 24, NYT opinion columnist and notorious flat earther Thomas Friedman appeared on Anderson Cooper 360, in a segment about Donald Trump’s refusal to commit to a peaceful transfer of presidential power if he loses the election:\n\n“You know, I began my career as a journalist covering Lebanon’s second civil war in its history, and I’m terrified to find myself ending my career as a journalist covering America’s potential second civil war in its history,” Friedman told Anderson Cooper in an appearance on CNN.\n\nThere certainly does seem to be a whiff of Second Civil War in the air, on both sides of the liberal-conservative political divide. This latest iteration was kicked off by Ruth Bader Ginsburg’s death, the shroud of uncertainty surrounding our election, and the social unrest over the police murders of George Floyd and others. But the Second Civil War prediction has a been a go-to for pundits, Gremlins 2 directors, and war game designers for decades.\n\nThis recent case for a second Civil War hinges on a familiar premise: our nation’s increased political polarization, the resulting hatred and vitriol, and alarming incidents of either racially motivated violence (if you’re a liberal) or anarchistic looting and property destruction (if you’re a conservative) constitute a sort of modern day “Bleeding Kansas,” hurtling our nation ever closer to all-out war.\n\nBut in an unprecedented display of bipartisanship, both the liberal and conservative cases for Civil War Part II rest on the same false assumption: that the Civil War was caused by the same type of polarization in America today.\n\nThat begs the question: what was the Civil War fought over? Slavery, of course. But it was not the moral depravity of slavery alone that transformed the nation’s divide from political debate into violent national conflict. A more accurate assessment would be that such deep division arose out of more mundane concerns of political economy.\n\nLet’s sketch out the belligerents. Broadly speaking (this will not be an exhaustive history of the lead-up to the Civil War), you had Republicans/Northerners on one side, and Democrats/Southerners on the other.\n\nThe divide is often misconstrued as being one of an urban, industrialized North versus a rural, agrarian South. But when the Civil War began, most crops grown for American consumption came from the North. The region’s economic character could only really be said to be “industrial” in contrast to the South. In reality, America was at this point still a largely agrarian nation — though this was changing rapidly. (I mention this bit of agricultural trivia only because it is this misconception that feeds the narrative being grafted onto the present — that of “Two Americas.”)\n\nMore importantly, a burgeoning Free Soil movement catalyzed Radical Republicans and their yeoman farmer constituents around the vision of America as a vast frontier, wherein free men could escape the clutches of a rapidly developing wage labor system they resented. These men and their families, many of them recent European immigrants, would return to the “free labor” system to which they were accustomed, thereby able to make their own fortune. This vision for America’s economic character went back to the Founding Fathers, and held powerful political and economic appeal.\n\nSouthern Democrats, representing the interests of slaveholders, wanted to expand slavery into the same territories as the Free Soilers — and, one could argue, needed to in light of lowering crop yields and overworked land. The planter class was no more content to remain “half slave and half free” than Republicans: expanding slavery meant buying more slaves and putting them to work, and there’s only so many slaves that can work a single plot of land without literally tripping over each other. So they needed that land badly, too.\n\nDozens of divides arose or were inflamed by this flashpoint — important questions of national and regional character, federal and state power, jurisprudence, foreign relations, religion, culture, and custom, to say nothing of the nationwide reckoning over the morality of slavery itself. But they were all grafted onto this key question of whether to expand or eliminate slavery. The answer to this question would not only determine the future of slavery, but of American economic development in general. This forced elites and politicians to choose sides with tangible stakes, and with each new territory added to the Union, the question was called, the battle lines were drawn, and the conflict over America’s future was further inflamed. By the time Lincoln was elected president in 1860, Southern planters and Democrats had convinced themselves that secession was the key to securing their economic interests.\n\nThere is no parallel divide to be found in the political disputes of the present. None. Whatever deep differences Americans may have over whether black lives matter, or immigrants are human beings, there is no comparable cleavage in the interests of America’s ruling class today than the one that existed between Republicans/Northerners and Democrats/Southerners 160 years ago.\n\nThe differences between the two parties — and the “Two Americas” Barack Obama spoke of in 2004— feel like deep, existential divides to us. There’s no question they’ve touched our lives. We’ve all lost a libertarian college roommate or racist aunt to the Facebook posting wars. And if you’re a an undocumented immigrant, a person living on food stamps, or the CEO of a fracking company, these contrasts take on a more concrete significance.\n\nBut both parties have, for some 30-40 years, been in broad agreement on Civil War-sized questions of political economy: the role and scale of our military (it should be big and it should be everywhere), our social welfare programs (let’s either privatize them immediately or do it so slowly that no one will notice), our economy (the stock market must go brrr, and when it doesn’t, we should give the rich as much free money as they want), our climate crisis (“it’s not real” or “it’s real but we’re not going to do shit about it, sorry”) and our healthcare system (it shall always and forever remain a privately-run racket.) As far as America’s capitalist class is concerned, these are settled questions. To the extent that the two camps disagree, it’s over how much foreplay the American worker is entitled to before they get fucked.\n\nThe other important thing to keep in mind is that the modern characterization of America as deeply divided hinges on an audit of the nation’s voting record. But fewer Americans who are eligible to vote do so now more than ever. By contrast, in the 1860 election, more than eighty percent of eligible voters participated.\n\nVoter turnout has increased dramatically during the 2020 primaries — mostly among affluent suburbanites who are disgusted by Trump. But this obscures the fact that a plurality of Americans have, not unreasonably, decided that their participation in politics has as much of an effect on Civil War-sized questions as plugging in a Dyson Airblade and pointing it at the ocean affects the tides.\n\nWhat pundits on both sides have chalked up to the makings of a Second Civil War is, in fact, a result of the immiseration and alienation that Americans have increasingly come to feel in the decades since those Civil War-sized questions were settled. (Not coincidentally, this was the same period during which wealth inequality in America increased to levels not seen since the Gilded Age.) It is this immiseration and alienation that compels conservatives — the richest of whom recently received the largest transfer of wealth to their coffers since the Reagan Administration — to believe their way of life is under attack by Communist Antifa BLMS13s. It also imbues downwardly mobile liberals with the notion that Trump is a fascist, neo-Soviet Nazi puppet who is gearing up to put us all in concentration camps: a sinister and far-reaching project that, thankfully, can be thwarted by making sure you get your ballot in on time.\n\nWhy has this immiseration manifested itself in the form of fairy tales, proffered by pundits of all stripes, about a violent intra-national conflict? I think Matt Christman has it right when he points to Americans’ libidinal desire, absent positive material change of any kind, for decisive confrontation and resolution.\n\nRegardless of the outcome of the election — Biden win, Trump win, or The Global Nuclear Coup from Hell — make no mistake about it: there will be spontaneous acts of violence, most likely perpetrated by conservative vigilantes and their uniformed counterparts. It will be miserable and tragic. But it won’t bring us any closer to the brink of civil war than the removal of Bless This Mess from ABC’s Tuesday night lineup. Even the idea of a “Troubles” — like guerilla conflict, where thousands of Americans are organizing rival militias and reliving the tracking shot scene from True Detective, seems a tad far-fetched in an era where most of us don’t give enough of a shit to visit a voting booth.\n\nThere’s a lot of lessons to be found about why America is the way it is in the history and aftermath of the Civil War. This starts with recognizing the conditions that made it possible.",
    "keywords": [
      "american",
      "america",
      "theres",
      "second",
      "going",
      "americans",
      "heres",
      "slavery",
      "political",
      "civil",
      "free",
      "war",
      "questions",
      "americas"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------7a416e2c_8606_4280_916a_40f4843362c8-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------7a416e2c_8606_4280_916a_40f4843362c8-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------7a416e2c_8606_4280_916a_40f4843362c8-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------7a416e2c_8606_4280_916a_40f4843362c8-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------7a416e2c_8606_4280_916a_40f4843362c8-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://williamfleitch.medium.com/there-will-be-no-laughing-on-election-night-3d1d498afc38?source=extreme_main_feed---------1-74--------------------2e80691d_b415_4ced_b544_a042cf44a5d8-------",
    "title": "There Will Be No Laughing on Election Night",
    "publish_date": "2020-10-13 20:34:19",
    "authors": [
      "Will Leitch"
    ],
    "summary": "But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off.\nBut one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000.\nAlready cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious.\nThere is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified.\nBut I damn sure know it won’t be funny.",
    "text": "NBC\n\nIn November 2000, I fell asleep to Al Gore being declared the next president, woke up to George W. Bush having won, and by lunchtime no one had any idea who had won or what was going on. What I remember the most is finding the whole thing very funny. And it was funny.\n\nI know now that being able to find such chaos amusing was a privilege, and an ugly one, of being an aimless but mostly comfortable white kid in his early 20s. One can argue about the specific differences of how the world would have turned out had Al Gore become president instead of George W. Bush, but there’s no question there were definite differences. But if you followed the race in 2000, this was not what everybody thought. I covered protests at the Democratic National Convention in Los Angeles that year — the same one Barack Obama couldn’t even get into — and the one thing every protestor believed, along with most young Gen Xers like myself, was that it didn’t matter whether the next president was Bush or Gore: They were two variations of the same flavor. That the race ended up so close sure didn’t feel like an accident. If you ask 300 million people whether they’d prefer two nickels or a dime, you shouldn’t be surprised when the results are 50–50. The madness that followed the close vote felt not like a moment of democratic peril. It felt like the logical conclusion to an incredibly stupid process. You just had to laugh.\n\nWhile watching 537 Votes, a new documentary about the 2000 Florida recount (and specifically the Miami-Dade county non-recount) that airs on HBO on October 21, I was reminded that it wasn’t just snarky former grunge kids who thought all this was ridiculous. The documentary itself is mediocre, more interested in cheap nostalgia and sight gags than the psychology of the era (director Billy Corben of Cocaine Cowboys has a persistent habit of dressing up his films with gimmicks rather than trusting his story to tell itself), but its ability to mine cultural artifacts of that time is remarkable. There’s a ton of clips from The Daily Show, and they each make a strong argument that the smugness that ultimately drove us all away from Jon Stewart was there from the get-go. There’s a reminder that Craig Kilborn used to host a late-night talk show. And there is a Wanda Sykes riff on Florida that is even rawer and more cutting 20 years later. But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off. Seriously, they found all of this hilarious. The most famous voice that night was Dan Rather and all his goofy homespun sayings—“If a frog had side pockets, he’d carry a hand gun”—but everyone was yucking it up. Second place was Tim Russert, the evening’s breakout star, with his whiteboards and his red states and blue states, with a big giddy grin on his face throughout, even at 3:17 a.m., like this was the most fun he’s ever had in his life. Isn’t this a blast? You hear the crew cackling off stage. What a night!\n\nIt sure seems less funny now.\n\nThere are many, many ways that 2020 is worse than 2000. (Sheesh, in 2000, Joe Rogan was just that guy from “NewsRadio.”) As Clare Malone pointed out in a fantastic piece for FiveThirtyEight, we’re a lot more polarized and a lot less likely to just give up and accept it if our preferred candidate loses in a tightly contested election. But one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000. Already cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious. There is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified. There is an awareness that if we are not careful about this democratic process, the whole thing could collapse.\n\nThere was none of that in 2000. It was all just a wacky story—this election is crazy close!—that was covered as if the stakes were a lot lower than they were. (Within three years, the NASDAQ collapsed, 9/11 happened and we were in multiple wars. The stakes turned out to be pretty freaking high.) What has changed, of course, is that we now know what a difference it can make when one candidate wins and one loses, that the entire nation is a fire just waiting for kindling, and that there are bad actors eager to pounce at the first sign of uncertainty. History will be made, and our anchors and analysts, by all accounts, understand how precise and meticulous they will need to be. And they understand, mostly, just how ungodly serious this is. And that’s where we’ve changed the most. In 2000, it felt like America would be around, and strong, forever, no matter who won, that the democratic process would do its job and we’d all be fine. Twenty years later, we’ve had 9/11 and endless wars and economic collapses and pandemics and Donald Trump. There are no illusions that America will just automatically land on its feet anymore. I don’t know how the networks, or the public, will react to what happens on November 3. But I damn sure know it won’t be funny.\n\nWill Leitch will be writing multiple pieces a week for Medium. He lives in Athens, Georgia, with his family, and is the author of five books, including the upcoming novel “How Lucky,” released by Harper next May. He also writes a free weekly newsletter that you might enjoy.",
    "keywords": [
      "sure",
      "2000",
      "lot",
      "night",
      "laughing",
      "democratic",
      "know",
      "thing",
      "election",
      "watching",
      "won"
    ]
  },
  {
    "url": "https://marquisele.medium.com/we-do-not-deserve-hospitals-abd8756d7bbf?source=extreme_main_feed---------2-74--------------------2e80691d_b415_4ced_b544_a042cf44a5d8-------",
    "title": "We Do Not Deserve Hospitals",
    "publish_date": "2020-10-15 03:05:18",
    "authors": [
      "Marquisele Mercedes"
    ],
    "summary": "We Do Not Deserve HospitalsMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\nAt one point, I was sent to another room nearby that was a little larger and had no extra chairs.\nMy mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy.\nHave you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum?\nHas a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?",
    "text": "We Do Not Deserve Hospitals\n\nMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\n\nSource: Unsplash\n\nOn a night in my early teens, I went to the Pediatric Emergency Department at Montefiore’s Children’s Hospital for intense cramps. I was expecting my period in a few days, but had never felt that way before — like a heat lamp was burning into the meat of my pelvis.\n\nMy mother and I spent the better part of 9 hours in a tiny room with speckled vinyl floors and too-bright fluorescents. At one point, I was sent to another room nearby that was a little larger and had no extra chairs. My mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy. A nurse told me to undress from the waist down and wait for the doctor.\n\nMy doctor came in and asked me — in a few different ways — if I’d ever been “penetrated”. I had not and said so — repeatedly. She referenced the development of my body, implied the crudeness of the boys around me. It was an unsaid question, but one that still required an answer. “No,” I said, “I’ve never put anything in there.” She said “if you say so”, before telling me to lay down, scoot my butt towards the end of the examination table, and spread my legs so she could “take a look.”\n\nI didn’t know what that meant, but she was the doctor, so I did what she told me to do.\n\nHave you ever screamed “no!” and “stop!” at the top of your lungs while being penetrated by an unidentified object that scraped at your most intimate insides? Have you ever been told to “be still” and “hold on” like your pain was the most mundane thing that had ever happened? Have you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum? Have you ever redressed yourself afterwards with shaky hands and legs and raucously laughed about it to your mom who was just a few feet away getting a cup of water when she heard the tail-end of your screams? Has a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?\n\nI was sent home with instructions to take Motrin and “stay out of trouble”. My mother and I rode the bus while she angrily pondered on whether I was still a virgin. I wrapped my arms around my middle and tried to protect something that felt like pierced cellophane. The tests for STIs came back clean.",
    "keywords": [
      "sent",
      "doctor",
      "mother",
      "required",
      "penetrated",
      "hospitals",
      "stop",
      "wait",
      "told",
      "deserve",
      "room",
      "say"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------2e80691d_b415_4ced_b544_a042cf44a5d8-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/javascript-in-plain-english/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6?source=extreme_main_feed---------4-73--------------------2e80691d_b415_4ced_b544_a042cf44a5d8-------",
    "title": "11 Frontend tricks that most Frontend Developers don’t know about",
    "publish_date": "2020-10-14 19:17:01",
    "authors": [
      "Daniel Anderson"
    ],
    "summary": "Datalist elementOne HTML element that you don’t see used much at all and for no reason!\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements.\nYou will see a drop-down list of pre-defined options as you type.\n<datalist>Example:<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\"><option value=\"Cat\"><option value=\"Dog\"><option value=\"Chicken\"><option value=\"Cow\"><option value=\"Pig\"></datalist>",
    "text": "1. Datalist element\n\nOne HTML element that you don’t see used much at all and for no reason!\n\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements. You will see a drop-down list of pre-defined options as you type.\n\n<datalist>\n\nExample:\n\n<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\">\n\n<option value=\"Cat\">\n\n<option value=\"Dog\">\n\n<option value=\"Chicken\">\n\n<option value=\"Cow\">\n\n<option value=\"Pig\">\n\n</datalist>",
    "keywords": [
      "dont",
      "tag",
      "11",
      "datalist",
      "valuecatoption",
      "valuepigdatalist",
      "reasonthe",
      "frontend",
      "know",
      "valuedogoption",
      "valuecowoption",
      "developers",
      "typedatalistexampleinput",
      "tricks",
      "valuechickenoption",
      "used"
    ]
  },
  {
    "url": "https://medium.com/better-marketing/10-websites-that-pay-you-for-your-writing-241e455ac262?source=extreme_main_feed---------6-73--------------------2e80691d_b415_4ced_b544_a042cf44a5d8-------",
    "title": "10 Websites That Pay You for Your Writing",
    "publish_date": "2020-10-13 20:26:49",
    "authors": [
      "Maryam Merchant"
    ],
    "summary": "10 Websites That Pay You for Your WritingWrite articles and get paid for your writingPhoto by Daria Shevtsova from PexelsAs a writer, we can’t always rely on one platform.\nAs every article I read about writing from top writers of Medium says, don’t put all eggs in one basket.\nIt means we need to look for other freelance writing platforms as well.\nSo if you want writing as a career or as a side hustle, then you need to mold yourself and, side by side, start looking at other freelance writing gigs that pay you.\nBut I still want to try something outside of this platform, so I found these ten websites that pay a writer for writing articles.",
    "text": "10 Websites That Pay You for Your Writing\n\nWrite articles and get paid for your writing\n\nPhoto by Daria Shevtsova from Pexels\n\nAs a writer, we can’t always rely on one platform. We all want to surf and get used to the competitive world. As every article I read about writing from top writers of Medium says, don’t put all eggs in one basket.\n\nIt means we need to look for other freelance writing platforms as well. So if you want writing as a career or as a side hustle, then you need to mold yourself and, side by side, start looking at other freelance writing gigs that pay you.\n\nAs a newbie, I found Medium two months back, and it’s one of the best platforms, which I am in love with. But I still want to try something outside of this platform, so I found these ten websites that pay a writer for writing articles. I just want to help you with that.",
    "keywords": [
      "articles",
      "platforms",
      "medium",
      "platform",
      "writing",
      "need",
      "freelance",
      "pay",
      "writer",
      "websites"
    ]
  },
  {
    "url": "https://medium.com/in-fitness-and-in-health/why-you-should-eat-oatmeal-at-least-once-a-week-9e6c1feadad9?source=extreme_main_feed---------9-73--------------------2e80691d_b415_4ced_b544_a042cf44a5d8-------",
    "title": "Why You Should Eat Oatmeal at Least Once a Week",
    "publish_date": "2020-10-12 14:55:31",
    "authors": [
      "Alyssa Atkinson"
    ],
    "summary": "Why You Should Eat Oatmeal at Least Once a WeekAnd how to make it taste incrediblePhoto by Ellieelien on UnsplashIf there’s one controversial statement about food, it’s this: breakfast is superior to all other meals.\nAfter all, the options are endless — pancakes, waffles, cereal, peanut butter toast, bagels, cinnamon rolls, and of course, oatmeal.\nIn fact, when I was in college, one of my campus dining halls served breakfast all day every single day.\nYet, I felt it was worth it to make the trek so I could eat my favorite breakfast foods whenever I wanted.\nAnd despite the wide variety of breakfast foods I consume every single week, there is one that I consume almost every morning, and it’s a staple that you should be eating as well.",
    "text": "Why You Should Eat Oatmeal at Least Once a Week\n\nAnd how to make it taste incredible\n\nPhoto by Ellieelien on Unsplash\n\nIf there’s one controversial statement about food, it’s this: breakfast is superior to all other meals.\n\nWe’ve heard time and time again that breakfast is the most important meal of the day, and that it’s absolutely crucial if you want to maintain a healthy weight. However, evidence such as the following cited in Time Magazine:\n\n“has found no strong connection between breakfast and weight loss.”\n\nEven so, I can confidently say that breakfast is indeed my favorite meal, and I’m not one to skip it. After all, the options are endless — pancakes, waffles, cereal, peanut butter toast, bagels, cinnamon rolls, and of course, oatmeal.\n\nIn fact, when I was in college, one of my campus dining halls served breakfast all day every single day. The walk to that building from my dorm room was 15 minutes further than the other dining hall which was practically right outside my door. Yet, I felt it was worth it to make the trek so I could eat my favorite breakfast foods whenever I wanted.\n\nAnd despite the wide variety of breakfast foods I consume every single week, there is one that I consume almost every morning, and it’s a staple that you should be eating as well.\n\nThe powerhouse I’m referring to is oatmeal. It’s the meal I’ve been eating for years that’s inexpensive, offers a number of mindblowing health benefits, and is incredibly delicious if you know how to make it right.\n\nHere’s why you should add it to your meal plan, and how to dress it up for optimal flavor.",
    "keywords": [
      "week",
      "day",
      "eating",
      "im",
      "meal",
      "favorite",
      "single",
      "foods",
      "oatmeal",
      "breakfast",
      "weight",
      "eat"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------576a8c48_dbee_4f65_9379_913a4384ae7d-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------576a8c48_dbee_4f65_9379_913a4384ae7d-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------576a8c48_dbee_4f65_9379_913a4384ae7d-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------576a8c48_dbee_4f65_9379_913a4384ae7d-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------576a8c48_dbee_4f65_9379_913a4384ae7d-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------0-74--------------------7f75cca2_39db_4bf8_84dd_a325b294a276-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://humanparts.medium.com/how-well-get-over-going-to-the-upper-room-with-donald-j-trump-4d63f2e9741a?source=extreme_main_feed---------1-74--------------------7f75cca2_39db_4bf8_84dd_a325b294a276-------",
    "title": "How We’ll Get Over: Going to the Upper Room With Donald J. Trump",
    "publish_date": "2020-10-15 21:12:55",
    "authors": [
      "Max S. Gordon"
    ],
    "summary": "What we are facing is bigger than Donald Trump.\nOr maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose.\nPolitically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved.\nIf, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.",
    "text": "We’ve been here before. Our ancestors knew, when you can’t control the evil of the world, you must become the weather. A howling wind through the trees, a blistering sun, an irresistible force. Our democracy is on a respirator now, and we must defend it.\n\nJustice and nonviolent resistance became an electrifying force in 1955 when working-class Blacks who relied on the buses in Montgomery, Alabama, shut down the discriminatory system for an entire year, permanently changing the laws in that city. We need the spirit of transcendence that led these heroic women and men, many of them maids and laborers, to walk to work each day and say, “I can’t feel the hurt in my feet when there is a balm for my soul. And I will walk five more miles to work if it means a better life for my children.”\n\nWe need the Holy Ghost power that stopped Eugene “Bull” O’Connor, the commissioner of public safety in Birmingham, Alabama, when he ordered a battalion of firefighters to turn hoses on a crowd of protesters, including children, on May 5, 1963, often called “Miracle Sunday.” The firefighters not only resisted the order—it was reported that some of them cried.\n\nThe power of the crowd, who had walked from a local church, was both vulnerable and authoritative — a compelling, mystical combination. Whatever racist trance had possessed those firefighters when they’d hosed the same crowds only days before, it was broken, perhaps when they looked at the children and thought, “The little girl I am aiming this hose at could be mine.” Rev. Martin Luther King, Jr. later wrote, “I felt there, for the first time, the pride and the power of nonviolence.”\n\nThe alchemy of grace and conviction works. It has worked. I know because I am alive. I write these words with the knowledge that once upon a time someone who belonged to my family would have been whipped or worse for even trying to learn the alphabet. Yet I read, I write. Something they did to survive must have worked — because I’m here.\n\nNo matter how much they try to distort the truth on Fox News or make us feel like fools for believing, the sacrifices of earlier generations matter. How many women had to die on kitchen floors and back alleys for just one woman to walk into a care facility, protected by Roe v. Wade, and make an appointment for her health — legally and safely? We will not go back. Their sacrifices matter. And we owe them our determination to see that Roe v. Wade is not overturned. A persuasive river of courage flows through history, from Harriet Tubman to the suffragettes to the rioters at Stonewall. We’ll never know all the names, but we know that river exists — because we’re here.\n\nHistory has always had rogues, scoundrels, reprobates, damn fools, men who have acted as children. Bullies. Dictators. As a human family, we’ve seen astounding acts of evil. But the thing about evil is not to make it personal or to take it personally. We have to look beyond the actors. The only way to combat evil is not to respond with evil, but to invest in a more compelling vision. Because of someone’s vision, I am married to the man I love.\n\n7\n\nWelcome to Niggerland. A place on the outskirts of town where there has been crime and poverty and drugs and lack of health care and denied educational opportunities. My white friends, you were once untouched by the pain of the people who live there. But please know, those divisions no longer exist the way they once did. Perhaps Donald Trump’s greatest achievement is that he’s turned every American into a nigger, black or white (including a few people who are convinced they hate niggers). One way or another, we’re all in the soup now.\n\nNigger. It’s an unpleasant word, and forgive me for using it, but it’s the right word. It’s not a Black person’s shame, but a white society’s shame for its ugliness. It’s a word meant to terrorize a group of people within a system of oppression and make them feel powerless so they won’t act and try to change it. In other words, in Donald Trump’s eyes, we’re all niggers now. There isn’t a single person or institution he doesn’t have contempt for.\n\nWhat we are facing is bigger than Donald Trump. Perhaps he is the fulfillment of America’s karma in the world, our political shadow finally come to life. Or maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose. He is the personification of the Ugly American trope, vulgarity incarnate, an ambling Frankenstein monster ripping the village apart with his bare hands. Politically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\n\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved. His message isn’t really new—it’s his malevolence that’s profound. Maybe one day we will perceive his legacy as an opportunity that afforded fundamental change. If, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.\n\nWe may not change his heart, but we need to alter ourselves so we are different when and if the next monster arrives. In the aftermath of what happens, assessments will be made, and we will have to acknowledge that while solidarity eventually came from unexpected sources — Republicans willing to abandon their tribe — this went on for far too long, and too many lives were lost.\n\n8\n\nThere is a Black teenage girl who studies her lipstick one more time in the mirror before cutting off the bathroom light. She is going to a demonstration. There may be violence. But she believes in that preacher, Dr. King, and the sermon he preached on racial equality last Sunday. She knows it is dangerous; they’ve unleashed dogs on protestors; they turned hoses on families, pinning them against buildings and cars. People have been jailed, students have been clubbed, just for having the audacity to want to go to school with whites, to vote without retaliation.\n\nIt is 1957, and only a girl herself, she has no way of knowing that one day her daughter will look back at her through history. Her daughter will move into her dorm at a public university, buy her books, and although every battle won’t have been won, she will walk into the classroom her mother envisioned for her, without having to be escorted by the National Guard. She will claim the seat her mother earned.\n\nWe have a legacy to uphold; we have ancestors to honor. We’ve been here before. The names are always different. But whenever justice is threatened anywhere, there are always brave ones.\n\n9\n\nRevolution begins with a flower. Hold it your hand. And know that the man who owns real estate and golf courses all over world, in all his presumed omnipotence, doesn’t have the power to make a single flower.\n\nAnd if he chooses to destroy that flower, there’s another flower next to it in the field. There will always be flowers. Legions of them, as there are legions of us.\n\nAnd when your hope is restored and you remember who you are and what is possible to achieve with fortitude and grace, step out the door with that flower in your hair.\n\nAnd act.",
    "keywords": [
      "trump",
      "world",
      "way",
      "weve",
      "upper",
      "evil",
      "j",
      "going",
      "know",
      "power",
      "walk",
      "white",
      "room",
      "donald"
    ]
  },
  {
    "url": "https://coronavirus.medium.com/the-company-set-to-roll-out-americas-future-vaccine-cb56ea9691fa?source=extreme_main_feed---------2-74--------------------7f75cca2_39db_4bf8_84dd_a325b294a276-------",
    "title": "The Company Set to Roll Out America’s Future Vaccine",
    "publish_date": "2020-10-15 20:44:45",
    "authors": [
      "Yasmin Tayag"
    ],
    "summary": "The Company Set to Roll Out America’s Future VaccineThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccinesMario Tama / Getty ImagesWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages.\nIt’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history.\nIn August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\nAt the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention.\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made.",
    "text": "The Company Set to Roll Out America’s Future Vaccine\n\nThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccines\n\nMario Tama / Getty Images\n\nWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages. It’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history. To do the job, the White House has contracted a company called McKesson Corporation. In August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\n\nThis isn’t McKesson Corporation’s first vaccine-distribution rodeo. The company, founded 187 years ago and the seventh-largest U.S. company in terms of revenue in 2019, was also responsible for managing the distribution of the H1N1 vaccine to as many as 90,000 sites across the U.S. during the 2009 swine flu outbreak. At the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention. The company has also had an existing contract with the CDC to distribute childrens’ vaccines since 2016, and its role in distributing vaccines during the pandemic is based on that contract. Its success during the H1N1 epidemic bodes well for Covid-19 rollout, but U.S. public health infrastructure may continue to pose problems.\n\nAs I wrote previously, the specifics of how a vaccine will be distributed by McKesson — and who will get it first — are not yet clear. In an email to the Medium Coronavirus Blog, Robert Redfield, PhD, director of the CDC, said: “Through the Advisory Committee on Immunization Practices, CDC will play a vital role in deciding, based on input from experts and stakeholders, how initial, limited vaccine doses will be allocated and distributed while reliably producing more than 100 million doses by January 2021.” McKesson shared its public statement about its CDC partnership with the Blog but did not answer questions.\n\nThere does seem to be a plan to determine where exactly McKesson will distribute vaccines, according to the HHS. A spokesperson for the agency tells the Blog that ensuring easy access for all Americans, notably minority communities and medically underserved populations, is a top priority. “Whether it’s at a doctor’s office, retail pharmacy, federally qualified health center, or hospital,” they said, “thousands of outlets will be available so no American must travel far to be vaccinated.”\n\nThe plan is that McKesson will deliver a specific amount of vaccine to a designated location once it’s allocated to a given jurisdiction or authorized partner. In many instances, says the spokesperson, these will be sites where the vaccine will actually be administered; in others, McKesson will deliver vaccines to sites where health departments will pick up the vaccine and further distribute it within their networks. National retail pharmacies will also use a similar system. “This system,” says the spokesperson, “will be scalable to meet demand.”\n\nUntil more is known about the vaccine to be distributed, it’s not clear how it will be transported. Some vaccines are more delicate than others, and sometimes they require refrigeration. According to HHS, if the vaccine has ultra-cold storage requirements, it may be shipped directly from the manufacturer to administration sites, but this too will be managed within McKesson’s centralized system. The contract the company has with the CDC covers the transportation of both refrigerated (2–8º Celsius) and frozen (-20ºC) vaccines.\n\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made. The HHS spokesperson says the U.S. government is “committed to working with other countries friendly to our national security to ensure safe and effective Covid-19 vaccines are developed as fast as possible, however, the vaccine and therapeutic candidates [Operation Warp Speed] has invested in are the candidates OWS believes to be the most promising, and all of those candidates are being manufactured in the U.S.”\n\nMcKesson’s performance during the H1N1 epidemic in 2009 bodes well for the Covid-19 pandemic: During that time, it distributed almost 81 million H1N1 vaccine doses to 90,000 sites. However, notes journalist Michele Cohen Marill in the medical publication Medscape this week, distribution ran into obstacles at the public health level: “Public health officials struggled with the mechanics of designating priority groups and reaching out to them for vaccination while asking others to wait.”\n\n“I’m not sure there’s much difference between 1976, 2009, and 2020–2021,” Rebecca Wurtz, MD, MPH, of the University of Minnesota School of Public Health in Minneapolis, told Medscape. “The issues around organizing a massive distribution of a new vaccine are pretty similar.”\n\nThe U.S. can’t afford to make administrative errors during the Covid-19 pandemic, especially as the fall surge continues and the death toll mounts. States ultimately shape the actual vaccination programs, notes Marill in Medscape, and it’s up to them to decide who can administer the vaccine, and where. The hope is that state governments authorize as many people as possible to safely administer the vaccine and make access to it widespread and equitable. Neighborhood pharmacies will likely play a key role, as the HHS spokesperson suggests: “For example, during H1N1, once vaccines became widely available pharmacies played an important role in the vaccine distribution,” they said, adding that pharmacies’ role “is even more critical to vaccinations today and will be fully integrated into the distribution plan.”",
    "keywords": [
      "role",
      "future",
      "company",
      "mckesson",
      "public",
      "set",
      "roll",
      "distribution",
      "vaccines",
      "vaccine",
      "health",
      "spokesperson",
      "americas",
      "covid19"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------7f75cca2_39db_4bf8_84dd_a325b294a276-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://towardsdatascience.com/25-lesser-known-java-libraries-you-should-try-ff8abd354a94?source=extreme_main_feed---------4-73--------------------7f75cca2_39db_4bf8_84dd_a325b294a276-------",
    "title": "25 lesser-known Java libraries you should try in 2020",
    "publish_date": "2020-10-07 22:09:24",
    "authors": [
      "Md Kamaruzzaman"
    ],
    "summary": "JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape.\nIn enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform.\nWiremockHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development.\nLink:ConclusionIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries.\nThere are many excellent Java libraries that I have not listed here but worth a try.",
    "text": "1. RxJava\n\nReactive Extensions (ReactiveX) is a popular software development paradigm to deal with asynchronous and event-driven programming. RxJava is the Java VM implementations of the Reactive Extensions by using Observables. It extends the Observer Pattern to support event-driven programming by adding composable operators on a sequence of events/data in a declarative way. It also hides the low-level complexities like threading, thread-safety, synchronization, and concurrent data structure.\n\nIf you want to do reactive programming in Java, it is a must-have library.\n\nLink:\n\n2. OkHttp\n\nHTTP is by far the most used Application layer protocol. There are many excellent Java-based HTTP client libraries out there. But OkHttp is the simplest yet powerful HTTP client library in the JVM. It offers fluent and clean API to develop HTTP client in Java.\n\nIt also supports some advanced features: Connection pooling, GZIP shrink, response caching, modern TLS features, and many more.\n\nLink:\n\n3. MyBatis\n\nIn most Software development projects, we need to store data. Although there are many types of data storage, SQL is still the most used data storage type. As a Java developer, we need to match our Java object to the SQL table. One way to achieve the mapping is to use ORM (e.g., Hibernate). But there are many use cases when you want to have full control over the Object-Table mapping (e.g., Performance). In those cases, you can directly use JDBC and write the SQL query. The other way is to use MyBatis to map Java Object to Stored Procedure or SQL statements. It offers both annotation-based or XML descriptor based mapping.\n\nI prefer MyBatis over plain JDBC, especially in larger projects, as it improves the separation of concerns.\n\nLink:\n\n4. HikariCP\n\nHikariCP is the second library in this list related to Database. Establishing a JDBC connection is resource expensive. If you create a new connection every time you access the Database and close it once you are done, it can severely impact your application performance. Not to mention that failure to close the connection properly or allowing limitless database connection can crash your application.\n\nUsing Connection Pooling means connections are reused rather than created each time a connection is requested. HikariCP is a very fast yet lightweight Database connection pooling in JVM. It is also very reliable and a “zero-overhead” JDBC connection pool.\n\nLink:\n\n5. Lombok\n\nIn modern days, Java is often criticized as a verbose and bloated programming language. Compared to other popular languages (JavaScript, Python, Scala, Kotlin), a developer needs to write lots of boilerplate code in Java. Although Java has introduced Records in JDK 15 to reduce boilerplate code in Java, it is not an LTS release. Fortunately, a library can already reduce your boilerplate code in Java significantly: Project Lombok. You can generate getters, setters, hashcode, equals, toString, Builder classes by adding a few annotations. Additionally, it offers null pointer check, logger, and many more.\n\nLink:\n\n6. VAVR\n\nJava finally released the much-awaited functional programming via Lambda and Streaming in version 8. If you are used to functional programming or want to dive deep into functional programming, you may find Java’s functional programming wanting. Compared to many other functional programming languages (Haskell, Scala), Java is pale. VAVR is a library that can fill the gap of the functional programming features in Java. It provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nLink:\n\n7. Gson\n\nOver the years, JSON has become the de-facto data exchange format. In Java, there also exist several excellent libraries to deal with JSON. One of them is Jackson, which I have covered in my previous article. The other excellent library is Google’s Gson. Unlike Jackson, it is a minimalistic library and only supports JSON. It offers Data Binding, extensive Generic support, flexible customization. One of the major advantage (or disadvantage depending on your liking) of Gson is that it does not need annotation.\n\nLink:\n\n8. jsoup\n\nIf you are developing your application in Java and need to deal with HTML, you should use jsoup. It is a Java library to work with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data. It implements the WHATWG HTML5 specification and parses HTML using the best of HTML5 DOM methods. It supports parsing HTML from URL/string, find and extract data, manipulate the HTML elements, clean HTML, output HTML.\n\nLink:\n\n9. JIB\n\nIf you are working on an enterprise-grade application, it should be at least Cloud-ready. The first step to make your application cloud-ready is to containerize your application, i.e., put your artifactory binary into Docker image. Dockerizing a Java application is a bit tedious work: you need to have deep knowledge of Docker, you need to create a Dockerfile, and you will need Docker Daemon. Fortunately for the Java developers, Google has created an Open-source Java containerizer using already existing tools. You can use JIB as a Java library to build an optimized Docker and OCI image.\n\nLink\n\n10. Tink\n\nTink is yet another handy Java library in this list from Google. Cryptography and security are becoming increasingly more important in Software Development. Cryptographic techniques are used to secure user data. Implementing cryptography correctly requires a lot of expertise and effort. A group of Cryptographers and security engineers in Google has written the multi-language cryptographic library Tink. It offers easy-to-use but hard to misuse security API. Tink offers cryptographic functionalities via different primitives. It provides symmetric key encryption, streaming symmetric key encryption, deterministic symmetric key encryption, digital signature, hybrid encryption, and many other encryption functionalities.\n\nLink:\n\n11. Webmagic\n\nIf you work on Web crawling, you can write your own crawler, which is time-consuming and tedious. In Java, Webmagic is an excellent Web crawler library that covers the complete life-cycle of crawler: downloading, URL management, content extraction, persistence. It offers a simple yet flexible core, Annotation support, multi-threaded, and easy-to-use API.\n\nLink:\n\n12. ANTLR 4\n\nIf you work on parsing and processing data, then the ANTLR library could be handy. It is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It does this by giving us access to language processing primitives like lexers, grammars, parsers, and the runtime to process text against them.\n\nIt’s often used to build tools and frameworks.\n\nLink:\n\n13. Caffeine\n\nIf your application is read-heavy, then caching can dramatically improve your application’s data access performance. Java has many great caching libraries. Caffeine is the best among the lot. It is a high-performance, near-optimal caching library based on Java. It offers a fluent caching API and some advanced features like asynchronous loading of entries, asynchronous refresh, weak referenced keys, etc.\n\nLink:\n\n14. Metrics\n\nOnce your Java application runs into production, you will want to have insight into your application's critical components. Metrics from the Dropwizard framework is a simple yet compelling Java library that provides insight into your application and JVMs KPI, e.g., rate of events, pending jobs, service health check, and more. It is modular and offers modules for other libraries/frameworks.\n\nLink:\n\n15. gRPC-Java\n\nGoogle has created gRPC as a modern Remote Procedure Call system in 2015. Since then, gRPC became extremely popular and one of the most used RPC system in modern software development. The library gRPC-Java is the Java implementation of the gRPC client. If you want to use gRPC in Java, then this library can be handy for you.\n\nLink:\n\n16. Java WebSocket\n\nTraditional Client-Server communications unidirectional. WebSocket is a bi-directional communication protocol over a single TCP connection. Java WebSocket is a barebone WebSocket server and client implementation in Java. If you are a Java developer and want to work with WebSocket, this library is highly recommended.\n\nLink:\n\n17. JJWT\n\nJSON Web Token (JWT) is the de-facto Authorization and secure Information exchange format in modern software development. Whether you are using a simple session-based Authorization or highly advanced OAuth2 based Authorization, you will probably use JWT. JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape. It is fully RFC specification compliant on all implemented functionality. It supports readable and convenient fluent API.\n\nLink:\n\n18. Swagger-Core\n\nOpenAPI is the specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. Swagger-Core is the Java implementation of the OpenAPI specification. If you are exposing REST API in your Java/JavaEE application, you can automatically provide and expose your API definitions using Swagger-Core.\n\nLink:\n\n19. Async Http Client\n\nAsynchronous programming is becoming increasingly popular of late because of its non-blocking nature. Most of the popular Java HTTP client libraries offer limited to no asynchronous HTTP response processing. Async Http Client is a popular Java library that offers asynchronous HTTP response processing. As a bonus feature, this library also supports the WebSocket protocol.\n\nLink:\n\n20. Liquibase\n\nAs a software developer, we all know the importance of version control, DevOps, and CI/CD of our code. In a blog post: Evolutionary Database Design, the great Martin Fowler argued that we also need version control and CI/CD of our code. Liquibase is a tool that supports tracking, version controlling, and deployment of SQL database changes in Java Applications. If you are working with an SQL database where the database is evolving, this tool can greatly simplify your database migration.\n\nLink:\n\n21. Springfox\n\nI have already listed Swagger-Core in this list, which can automatically generate REST API documentation for vanilla Java or Java EE application. In enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform. In Spring-based Java applications, the Springfox library can automatically generate REST API documentation from the source code.\n\nLink:\n\n22. JavaCV\n\nOpenCV is a computer vision and machine learning software library. It is open-source and was built to provide a common infrastructure for computer vision applications. JavaCV is a wrapper on OpenCV and many other popular libraries (FFmpeg, libdc 1394, PGR FlyCapture) in the field of computer vision. JavaCV also comes with hardware accelerated full-screen image display, easy-to-use methods to execute code in parallel on multiple cores, user-friendly geometric and the color calibration of cameras and projectors, detection and matching of feature points, and many other features.\n\nLink:\n\n23. Joda Time\n\nJava had a poor date and time functionalities in the pre-Java8 core library. Java8 released much needed advanced date and time functionalities in its java.time package. If you are working with an older version of Java (pre Java8), Joda time can provide you the advanced date and time functionalities. However, if you are working in a newer version of Java, you may not need this library.\n\nLink:\n\n24. Wiremock\n\nHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development. During the writing Unit test, it is best to focus on SUT (System Under Test) and mock the services used in the SUT. Wiremock is a simulator for REST API and enables developers to write code against an API that does not exist or incomplete. In microservice-based software development, Wiremock can significantly boost development velocity.\n\nLink:\n\n25. MapStruct\n\nIn Java application development, you often need to convert one type of POJO to another type of POJO. One way to achieve this POJO or Bean conversion is to explicitly code the transformation, which is tedious. The smart way is to use a library that is specifically developed to transform POJO/Bean. MapStruct is a code generator that implements mapping between POJO/Bean on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe, and easy to understand.\n\nLink:\n\nConclusion\n\nIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries. These libraries are not domain-specific and can help you whether you are developing Software for Business applications, Robotics, Android Apps or Personal projects. Please note that for a large and wide eco-system like Java, this list is not conclusive. There are many excellent Java libraries that I have not listed here but worth a try. But this list of libraries can provide a quick peek into the world of the Java eco-system.",
    "keywords": [
      "2020",
      "development",
      "lesserknown",
      "libraries",
      "try",
      "library",
      "25",
      "application",
      "java",
      "need",
      "offers",
      "programming",
      "software",
      "data"
    ]
  },
  {
    "url": "https://towardsdatascience.com/fastapi-has-ruined-flask-forever-for-me-73916127da?source=extreme_main_feed---------5-73--------------------7f75cca2_39db_4bf8_84dd_a325b294a276-------",
    "title": "FastAPI has Ruined Flask Forever for Me",
    "publish_date": "2020-10-11 09:01:22",
    "authors": [
      "Fahmi Nurfikri"
    ],
    "summary": "FastAPI has Ruined Flask Forever for MeWhy I prefer using FastAPI instead of FlaskFastAPI Logo — https://fastapi.tiangolo.comWhat do you like best about being a data scientist?\nIf you need to look for something about FastAPI, you usually don’t need to look anywhere else.\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running.\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords.\nFastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.",
    "text": "FastAPI has Ruined Flask Forever for Me\n\nWhy I prefer using FastAPI instead of Flask\n\nFastAPI Logo — https://fastapi.tiangolo.com\n\nWhat do you like best about being a data scientist? It’s definitely modeling and fine-tuning for optimal results. But what does it mean to be a good model if it’s never used or never deployed?\n\nTo produce a machine learning model, the typical approach is to wrap it in a REST API and use it as a microservice. One of the most widely used frameworks for creating APIs is Flask.\n\nThe main reason Flask is widely used is its simplicity. In general, we only use the API to model predictions, so we don’t need a complex architecture (example: Django). Another reason is that Flask is written in Python, which is the language used to do machine learning modeling in general, so we are familiar with it.\n\nHowever, if you want to create a REST API with clear, static, inputs that are validated, you must include several different packages from several third parties that do not cooperate with each other. And you have to create custom code to get everything running.\n\nThis is what caused me to look for alternatives for my needs, where finally I found a framework called FastAPI and it became my new favorite framework. Here are the reasons why I like to use FastAPI.\n\nDocumentation\n\nThe first thing I notice from FastAPI is the documentation. FastAPI has very extensive documentation and rich examples, which makes things easier. If you need to look for something about FastAPI, you usually don’t need to look anywhere else.\n\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running. So that we don’t need to write the API documentation that we created ourselves. As we all know, writing API documentation is annoying, not only because there is a lot of detail to go into, but also nothing more frustrating when the end-users are implementing but not match up the documentation. So that with the automatic generation of API documentation it will be very helpful\n\nBelow is a display example of the API documentation (provided by Swagger UI)\n\nAlternative automatic documentation is also provided (provided by ReDoc)\n\nTo define the created schema, it uses Pydantic, which is another awesome Python library, used for data validation. Its purpose is to validate the input that goes to FastAPI. If the input/request is incorrect then the appropriate error code will be returned.\n\nPerformance\n\nAs the name implies, this is indeed FastAPI. Based on data from techempower benchmarks, FastAPI beats every framework when it comes to performance. Where the most commonly used frameworks like Flask and Django lag behind.\n\nFramework performance — techempower\n\nYeah, it blazingly fast.\n\nAsynchronous\n\nOne of the drawbacks of Flask is the lack of asynchronous I/O support. Asynchronous is pretty important for HTTP endpoints, which tend to do a lot of waiting for I/O and network chat, making it a good one candidate for concurrency using async.\n\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords. FastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.\n\nAll you have to do is declare the endpoints with the async keyword like this:",
    "keywords": [
      "api",
      "dont",
      "using",
      "forever",
      "framework",
      "documentation",
      "flask",
      "need",
      "used",
      "ruined",
      "asynchronous",
      "fastapi"
    ]
  },
  {
    "url": "https://medium.com/lessons-from-history/what-you-dont-know-about-the-famous-templar-knights-e225932969a3?source=extreme_main_feed---------6-73--------------------7f75cca2_39db_4bf8_84dd_a325b294a276-------",
    "title": "What You Don’t Know About the Famous Knights Templar",
    "publish_date": "2020-10-03 21:34:41",
    "authors": [
      "Nicol Valentin"
    ],
    "summary": "They wrote their rule with the help of a saintHumility, chastity, and strict obedience were major tenants of the Templar rule.\nHeck, a Templar wasn’t even allowed to kiss his own mother.\nProponents of this idea also cite the fact that Templar knights were forbidden meat on Mondays, Wednesdays, and Fridays.\nNot only did the king feel his money was physically secure in Templar banks, but the fact that almost every English county had a Templar presence helped too.\nAnd so it was with King Philip of France.",
    "text": "In 1119, dangers lurked everywhere in the Holy Land. Saracens (Moslems) butchered 300 Christians in March, and another 7000 that June.\n\nThings like this weren’t uncommon, and every pilgrim knew it. The French knight Hugh of Payns knew it. Only Hugh decided to do something about it.\n\nHe and a small band of warrior pilgrims soon joined in a brotherhood in which all agreed to take on a life of penance, poverty, and strict obedience. Unlike other knights of the time, they would defend the poor and innocent.\n\nEven to the point of sacrificing their own lives if necessary. Later, the group would gain official recognition under the name The Poor Fellow-Soldiers of Christ and the Temple of Solomon. We know them as the Templars.\n\nAlthough the early days of the Templars were uneventful, it didn’t take long for the men to make a name for themselves throughout Europe. Their role in the Holy Land began to expand, and soon they were defending the entire Levant from enemy invaders.\n\nToday, no image of the crusades is complete without a picture of a Templar knight in his white mantle emblazoned with a red cross. And yet, with all that imagery, there's more to the Templars than meets the eye. Much more.\n\nThey wrote their rule with the help of a saint\n\nHumility, chastity, and strict obedience were major tenants of the Templar rule.\n\nWhen a man joined the Templars, he had to swear off furs, fancy clothes, and those oh so stylish pointy shoes everyone was raving about. They were also pretty hardcore when it came to chastity.\n\nHeck, a Templar wasn’t even allowed to kiss his own mother. That’s a lot of energy going to moral fortitude. In the end, it helped them become the elite fighting force that they were.\n\nTemplars were also required to do the standard things like take care of orphans and widows, and defend the church. Standing in church when praying or singing was forbidden, as well as talking to the excommunicated.\n\nAll this makes sense when you consider the Templars were actually warrior monks. Their rule was partly composed by one of the most famous monks of all time, St. Bernard of Clairvaux.\n\nKnown as the Primitive Rule of the Templars, Bernard based it on the writings of St. Benedict and St. Augustine. The order had already been established several years before the rule was completed. So, in the end, it was basically everything the guys had already been doing.\n\nThey were said to have the gift of long life\n\nWhich is ironic since 90 percent of fighting knights died. However, thanks to a healthy diet and great hygiene, Templars had a good chance of living into their 60s.\n\nBarring any spears through the heart that is. That may not seem like a ripe old age to you, but in the Middle Ages, that wasn’t so bad. Some people attribute the brother's good health to something called “The Elixir of Jerusalem” which consisted of palm wine, aloe pulp, and hemp.\n\nProponents of this idea also cite the fact that Templar knights were forbidden meat on Mondays, Wednesdays, and Fridays. However, on Sundays Chaplins and clerks were allowed to eat meat at both lunch and dinner. According to the rule, “the rest of the household, that is squires and sergeants, shall be content with one meal and should be thankful to God for it.”\n\nFasting was undertaken between All Saints (Nov. 1) and Easter, with the exception of Christmas Day, the Assumption, and the Feast of the Apostles. Of course, we can’t leave out the fact that Templars were physically fit. Couch potatoes wouldn’t last long in an outfit like this after all.\n\nUp to 90 percent of members never went to combat\n\nThat's because they were busy managing the large economic infrastructure they created throughout Europe.\n\nIn fact, the Templars were arguably the first multinational cooperation, and it took a lot of guys to keep it going. Their reputation as defenders of the weak along with their pious behavior brought them to the attention of patrons of both high and low status.\n\nTemplar coffers overflowed with gifts like sheep farms, water mills, even isolated villages complete with serfs. Common workers left things in their wills to, like donkeys and small plots of land. And the templars never poo-pooed any of it.\n\nAll those small parcels were combined to form larger estates that were then leased out or farmed. Of course, the properties needed managers, and that task fell to the lay brothers. Beside gifted properties, there were the Templer houses, known as commanderies. This would be run by sergeants who were brothers from non-noble families.\n\nThey excelled in banking\n\nTheir widespread network of commanderies made it easy for Templars to set up a deposit system for traveling pilgrims.\n\nA fellow leaving from London, for example, could deposit his money in the city’s Temple church. As he embarked on the precarious journey overseas, he could concentrate on escaping the pitfalls of travel to the Lavant. The one thing he didn’t have to worry about was losing his money.\n\nOnce he arrived safely at his destination, he simply found the nearest Templar bank and presented his letter of credit. His funds were then safely returned.\n\nEven Kings trusted them with their money\n\nIt wasn’t just the little guys who benefited from the brother's banking system, though. Many kings looked to the Templars to bail them out financially.\n\nFrance in particular had a complicated financial relationship with them. Louis VII was the first king to seek a loan from the Templars at the end of the second crusade. Once he was home and his debt repaid, Louis placed what was left in his treasury under the protection of his Templar friends.\n\nFrom then on the French Treasury was run by the Templars, They took in and accounted for all payments made to the crown, as well as keeping account of the king's creditors and debtors. Money was taken in, stored, and paid out with statements going to the king three times a year.\n\nIn 1185 English King Henry II began using the Temple in London as his treasury. He trusted the Templars with coins, valuables, and even his jewels. Not only did the king feel his money was physically secure in Templar banks, but the fact that almost every English county had a Templar presence helped too. After the deadly battle of Hattin,\n\nHenry charged the Templars with collecting taxes to raise funds for a new crusade. His son, Richard the Lionheart, favored the knights as well. He exempted them from a host of taxes and had every sheriff in England pay them an annual stipend.\n\nBanking was part of their glory, but also their downfall\n\nThe downside to lending governments loads of money is it can make leaders cranky. And so it was with King Philip of France. Philip was far from the most pleasant fellow and he set his eyes on the Templars coffers.\n\nPhilips's grandfather King Louis IX was a saint, and Philip liked to believe he was the epitome of a holy king too. Yet it’s kind of hard to believe a guy is pious when he disputes with the pope (Boniface VIII) for five years (1296–1301).\n\nThe fight, not surprisingly, was over tax revenue. It only ended because Philip took some of his thugs to the papal palace, smashed through the doors, and roughed Boniface up so badly he died a month later.\n\nA Greedy King was their biggest enemy\n\nPhilip really wanted that tax revenue because France was in dire need of money.\n\nBy 1306 the country was in dire straits. A guy can get crazy when he's desperate for money, and desperate Philip was. So in the name of his fake piety, he came up with a story. It was a horrid story, a devious story — a blasphemous story.\n\nThe Templars, he said, were “vilely insulting our religious faith” by means of sodomy, idol worship, heresy, and black magic. Basically, everything contrary to what they had been fighting for since their inception.\n\nFrom there Philip had all the Templars round-up and tortured so they would confess to the false charges he put against them. He burned a few at the stake and eventually convinced the rest of the world of the brother's evil ways.\n\nFinally, the Pope (under pressure from Philip) had the order disbanded in 1312. Assets were given to another famous group of knights, the Hospitallers. Of course, Philip confiscated a huge sum of that as payment for all the work he put into ridding the world of the evil Templars.\n\nNotes and Sources:\n\nGentle reader, please don’t tell me about my picture. I already know. Unfortunately, no Templars were available for photographs. It’s a hard thing, writing about history.\n\nThe Templars, Dan Jones\n\nhttps://www.marketwatch.com/story/how-the-knights-templar-became-the-worlds-first-financial-services-company-2017-09-26#:~:text=It's%20sometimes%20said%20the%20Templars,t%20the%20first%20world's%20bankers.\n\nhttps://erenow.net/postclassical/the-real-history-behind-the-templars/25.php\n\nhttps://www.gq-magazine.co.uk/article/ten-things-you-never-knew-about-the-knights-templar\n\nhttps://www.warhistoryonline.com/medieval/nine-rules-knights-templar.html\n\nhttps://www.history.co.uk/shows/knightfall/articles/holy-money-how-the-knights-templars-got-so-rich\n\nhttps://www.bbc.com/news/business-38499883\n\nhttps://www.history.co.uk/shows/lost-relics-of-the-knights-templar/articles/13-things-you-didn%25E2%2580%2599t-know-about-the-knights\n\nhttps://thetemplarknight.com/2011/01/27/king-philip-crush-templars/",
    "keywords": [
      "dont",
      "templars",
      "philip",
      "king",
      "fact",
      "brothers",
      "knights",
      "famous",
      "rule",
      "know",
      "money",
      "wasnt",
      "templar"
    ]
  },
  {
    "url": "https://medium.com/swlh/working-with-a-really-terrible-developer-e942299ee1b4?source=extreme_main_feed---------7-73--------------------7f75cca2_39db_4bf8_84dd_a325b294a276-------",
    "title": "Working With a Really Terrible Developer",
    "publish_date": "2020-10-13 08:52:08",
    "authors": [
      "Chris Fox"
    ],
    "summary": "Working With a Really Terrible DeveloperWe recognize them.\nExternalitiesI was working until a few weeks ago on a distributed team for a company in England.\nThanks, L, I didn’t know how to spell “foreign key.”I came to dread the call because his abrasive and loud voice gave me a headache.\nI am usually a back-end developer; in this project L did all the back-end work.\nI didn’t know Django well enough to do it perfectly, not knowing where Python ends and Django begins (I really dislike Django, it shows no coherence or idiom), but I wrote out all the logic and status codes.",
    "text": "Working With a Really Terrible Developer\n\nWe recognize them. Managers often don’t.\n\nIf you’ve never had this experience you have my envy. You’re on a development team and one of the developers does sloppy work and there is nothing you can do about it.\n\nTime was when everyone in software from the first-day QA trainee to the executives had some experience at coding. That is long gone and now we have layers of methodology “masters” and managers who have never written a line, and who regard any and all complaints about others’ work as insubordinate and as personal conflicts, never considering the criticisms on their technical merits.\n\nIf I say that one of the other members of the group is doing shoddy work, even if I explain politely and in technical detail, managers hear “unpleasantness” and focus all their attention on team cohesion, which means I’m the one who gets in trouble.\n\nExternalities\n\nI was working until a few weeks ago on a distributed team for a company in England. One team member, whom I will refer to as L, not only did terrible work (more on this below) but on the daily Zoom status update was three times louder than anyone else in a voice that could etch diamond, made little effort to pronounce English clearly, and insisted on hijacking others’ computers with a compulsive screen-share that illuminated nothing, just so the rest of us could watch him wiggle his mouse.\n\nHe was mechanical. His reaction to any transition was always the same. His turn to talk? “Let me share my screen.” Get an error message? Take a screen shot. Explain a keyword? Another screen shot. Thanks, L, I didn’t know how to spell “foreign key.”\n\nI came to dread the call because his abrasive and loud voice gave me a headache. While everyone else on the team had mastered English well enough to be understood, L moved the accented syllables of words in a way that reminded of why so many companies that outsourced tech support to his country are now moving it to the Philippines.\n\nHe was unresponsive to communication and made changes to interfaces and API behavior without informing anyone of them. Since we did not have code reviews, which I tried hard to spearhead, we only discovered these wanton changes when things broke.\n\nWorst of all L appeared to get cognitively rebooted every few minutes. This company had its Git branches set up all wrong, two “master” branches in the same repo, one for the front end and one for the back. My cryptography work was in a branch off the front end “master.” We had been talking about the branches by name for about ten minutes, and it was clear as could be that I was doing my work in “frontend-crypto,” which we had both mentioned many times.\n\nHe suddenly asked me, apropos of nothing, “Chris, which branch are you working in?”\n\nThis sort of thing happened many times and managers would patiently explain to him what any eight year old could have followed. They could see he wasn’t tracking but for some reason it was only a problem when I expressed my frustration at having to explain simple matters over and over.\n\nBad Code\n\nI usually work in the C family of languages and in web development I write in C#. I had to learn JavaScript, Python, and Django. I ended up working almost exclusively in JavaScript and in the front end. I am usually a back-end developer; in this project L did all the back-end work.\n\nHe did a lot of work, all of it very low quality. In addition to industry standard illegibility he did the absolute bare minimum in rigor that he could get away with.\n\nI Write an Endpoint\n\nI needed a new API, one that would return two or more rows for recipients who may or may not already be in the database. I didn’t know Django well enough to do it perfectly, not knowing where Python ends and Django begins (I really dislike Django, it shows no coherence or idiom), but I wrote out all the logic and status codes.\n\nSuppose I called this API seeking the encryption keys for ten people. Here are the number found and the HTTP status codes in my original bad Django:\n\nNumber returned HTTP code\n\n10 200 (full success)\n\n1-9 206 (partial content)\n\n0 204 (data not found)\n\nserver exception 500 (exception)\n\nIf the response had fewer rows than the number requested I returned an array of their not-found identifiers.\n\nI turned it over to L to fix up the Django syntax, not to rewrite it, but this is what he did:\n\nNumber returned HTTP code\n\n10 200 (full success)\n\n1-9 200 (wrong)\n\n0 200 (wrong)\n\nserver exception 400 (wrong)\n\nSo even if not a single row was returned, he called it a complete success, and he removed my array of the rows not found, so the client had to enumerate the returned data, compare to the request and determine which ones didn’t come back. And a server exception returned 400, Bad Request, which was completely wrong.\n\nThis guy was supposed to be their back end expert. I expected him to know these codes; I don’t know every single one of them but I know the dozen or so most common ones. And even with the logic and intended status codes right in front of him he threw it all away and did it “his way.”\n\nTo be fair there are multiple schools of thought on how to handle intermediate levels of API success. I almost never see any 2XX status code other than 200; that and 500 are the only codes most developers return.\n\nIt would be charitable to allow that L had his own approach that was different from mine; in my view we have more than four status codes for a reason, and I use them. I knew however from months of working with him that he had just copied and pasted in 200 for all of them; he left my sieving logic for the cases above (0, 1–9, 10) but pasted the same line without checking.\n\nIn any case an API is a transaction and if he changed the behavior it was incumbent on him to inform me or whoever was issuing the call, expecting these more detailed status codes. Not only did he fail to do so, he never answered me when I asked him about it. This isn’t teamwork. This was a pattern in working with him. Since this project had no QA it would likely have been customers who first saw the holes in the logic.\n\nManagement Reaction\n\nI was furious. I had done it all correctly except for the Django syntax which he could have fixed in under a minute, but instead he rewrote the whole thing with significantly altered logic. And of course his code looked like a pair of cats had fought on the keyboard.\n\nI tried asking L why he had made these changes but when he ignored me as usual I asked the managers for a conference call. I showed them what I’ve written above. They tut-tutted and said they would talk to L about it. I don’t think they did, because two weeks later it was still unchanged.\n\nAnd they paid this guy.\n\nSo if they didn’t talk to L then they probably decided I was bringing conflict to the team, though they never told me so. This was my last item in the work, all my stuff worked except this mangled API. I was done. With three new languages under my belt and experience in a really cool cryptographic implementation.\n\nI didn’t bother talking to L again. What would be the point? He had done a bare minimum lousy job and in his work ethic that was just fine. In previous debates on design he had contributed nothing. I could have mentored him but I knew from months of working with him that he would have ignored me and gone on doing things the way he was accustomed: sloppy, shoddy, and illegible.\n\nManagers Who Don’t Know Code\n\nAs with so many who say that “people skills” are more important than “coding skills,” the managers on this project were more interested in keeping things nicey-nicey in the team than in doing a solid product. Since this was a very security-centric application it was more vital than usual to do the most rigorous job possible, but they allowed L’s sloppy rewrite to remain.\n\nTheir attitude toward my report was probably that there was some “friction” between me and L; I got along fine with everyone and managed to mask my frustration with L and his mysterious context-loss episodes and godawful code, and my part was about done so not much came of this.\n\nThis is what comes of regarding software development as a social activity. It sure as hell isn’t engineering yet.\n\nBut had I been the development lead, L would have been looking for another job.\n\nThere is a continuum in the software development work ethic; the two poles are\n\nDo it as perfectly as possible and to hell with the deadlines Do as little as you can get away with and make clearing your task list your only priority. Take up the slack by writing unit tests (which we didn’t do).\n\nL and I were at opposite poles of this continuum. Stir in his disinterest in communication and we had a mess.",
    "keywords": [
      "returned",
      "django",
      "l",
      "didnt",
      "status",
      "managers",
      "developer",
      "really",
      "terrible",
      "team",
      "working",
      "know",
      "work"
    ]
  },
  {
    "url": "https://medium.com/the-ascent/how-i-make-an-extra-1-000-per-month-without-breaking-a-sweat-79da349bee6b?source=extreme_main_feed---------8-73--------------------7f75cca2_39db_4bf8_84dd_a325b294a276-------",
    "title": "How I Make An Extra $1,000 Per Month Without Breaking A Sweat",
    "publish_date": "2020-09-21 16:32:45",
    "authors": [
      "Cheshta Mann"
    ],
    "summary": "How I Make An Extra $1,000 Per Month Without Breaking A SweatThe catch is to spend 1–2 hours daily to make this side hustle work.\nPhoto by Chronis Yan on UnsplashHave you ever thought of having at least one additional income source besides your regular 9–5 job?\nWell, having an extra source of income never hurts.\nAfter getting a full-time job in a financial organization in 2019, I thought I had achieved financial stability.\nWell, having an extra source of income never hurts.",
    "text": "How I Make An Extra $1,000 Per Month Without Breaking A Sweat\n\nThe catch is to spend 1–2 hours daily to make this side hustle work.\n\nPhoto by Chronis Yan on Unsplash\n\nHave you ever thought of having at least one additional income source besides your regular 9–5 job? While a full-time job meets your fixed and lifestyle expenses, the side hustle helps you utilize that money for future investments or savings.\n\nWell, having an extra source of income never hurts.\n\nIt helps you support yourself as well as your family’s needs better. But sometimes, we feel clueless about where to start.\n\nI was in the same boat a few years ago. I had a lot to accomplish but had no idea about getting started. I wanted to make money and land a stable job that helped me achieve my first objective, that was to make money and be financially independent. After getting a full-time job in a financial organization in 2019, I thought I had achieved financial stability.\n\nIt was true to some extent. I received decent pay-checks on a bi-weekly basis, and I was able to meet my monthly expenses, and satiate my lifestyle costs with them. Furthermore, I was able to keep some of the amounts aside for my further studies, savings, and investments.\n\n“Some people want it to happen, some people wish it would happen, others make it happen.” — Michael Jordan\n\nDespite having my savings and expenses on track, I knew that I could devote my time and energy to earning a little extra per month. Moreover, watching the idiot box and scrolling down through my IG feed was becoming toxic. So, to keep a check on my sanity and ensure that I was utilizing my time in the right manner, I decided to contribute a few hours of my day towards the side gigs that I’ll be discussing below.\n\nWell, having an extra source of income never hurts. One can use that chunk for meeting personal obligations and improving their skills.\n\nAccording to research published in Harvard Business Review, individuals who were working in a full-time profession, as well as a side hustle, exhibited more signs of empowerment followed by being in charge of their emotional and cognitive well-being. The study was based on the sample size of 1,000 individuals who spent an average of 13 hours every week on their side hustle for 4 days.",
    "keywords": [
      "1000",
      "month",
      "sweat",
      "breaking",
      "job",
      "hustle",
      "source",
      "income",
      "money",
      "having",
      "happen",
      "fulltime",
      "hours",
      "extra"
    ]
  },
  {
    "url": "https://medium.com/bigger-picture/tucker-carlson-got-it-right-7556391c827?source=extreme_main_feed---------9-73--------------------7f75cca2_39db_4bf8_84dd_a325b294a276-------",
    "title": "Tucker Carlson Got It Right",
    "publish_date": "2020-10-02 21:47:02",
    "authors": [
      "Deborah Handover"
    ],
    "summary": "Tucker Carlson Got It RightAnd it’s high time we listenedMonday night, Tucker Carlson covered the recent breaking news that President Trump paid only $750 in federal income taxes during the first two years of his presidency and no income taxes at all for 10 of the 15 years on record.\nIndeed, just as Carlson said, many Americans voted for Trump because they believed he would right the imbalance, taking power from the elites to bolster the middle class.\nBut here’s what Carlson, alongside those 2016 Trump voters, missed: Donald Trump is, and always has been, one of those elites.\nCarlson was quite right to say that billionaires should not pay lower taxes than you do, no matter who they are.\nWill four more years of this administration produce a new, truly populist Donald Trump?",
    "text": "Tucker Carlson Got It Right\n\nAnd it’s high time we listened\n\nMonday night, Tucker Carlson covered the recent breaking news that President Trump paid only $750 in federal income taxes during the first two years of his presidency and no income taxes at all for 10 of the 15 years on record.\n\n“Trump’s accountants took advantage of the many provisions in our tax code to make that possible,” Carlson said during the segment. “What the president did was legal — in fact it’s all but universal among the affluent who earn their money from investments rather than from salaries.”\n\n“Should the president have used these conventional tax loopholes to his own benefit?” Carlson asked, “We’ll leave that to the ‘professional hyperventilators’” — referring to liberal news networks — “on the other channels….But far more interesting is this question: Why does our tax code remain so obviously, so grotesquely unfair?”\n\nCarlson continued:\n\n“Billionaires should not be paying a lower rate than you are paying, no matter who they are, no matter who the president is. The main problem with America right now is that a shrinking group of people controls a growing share of our nation’s wealth and power. America is lopsided, and it’s getting more lopsided every year. That makes our country unstable. “Lopsidedness….is why young people seem so hopeless and nihilistic, why so many of them are not starting families. It’s why some of them are breaking things in the streets. It’s why your grandchildren will almost certainly earn less than you do. And by the way, it’s also why Donald Trump got elected four years ago. Americans could feel that something was profoundly wrong with the way our country was structured…. It seemed clear that the people in charge were in it for themselves.”\n\nCarlson closed his monologue by declaring that the “core drivers of the crisis that we face — a dying middle class and the growing hegemony of billionaires — remain unresolved.” He forewarned a “guaranteed disaster,” saying that if the economy is not “flattened” soon, “America is going to become a very radical place.”\n\nCarlson’s comments reflect a fairly typical conservative outlook — that the middle class is constantly forced to bear the burden of America’s economic hardship while the affluent, elite “ruling class” protects itself. Conservatives have long been proponents of flat tax rates. Indeed, just as Carlson said, many Americans voted for Trump because they believed he would right the imbalance, taking power from the elites to bolster the middle class.\n\nBut here’s what Carlson, alongside those 2016 Trump voters, missed: Donald Trump is, and always has been, one of those elites. And he has no intention of flattening a system that directly benefits him.\n\nIt’s well-known that Donald Trump was born to an affluent NYC real estate mogul, and even Trump’s version of his success story begins with a $1 million loan from his father. But a 2018 New York Times investigation found that Fred Trump frequently avoided paying federal income taxes by undervaluing his investments and funneling money to his children. According to financial statements, the president had been earning $200,000 a year by the age of three and was a millionaire by age eight.\n\nNow, the Times alleges that Trump readily uses his father’s tried-and-true tax avoidance methods, including funneling hundreds of thousands to his daughter Ivanka under the guise of “consulting fees.” In other words, Donald Trump is carrying on the time-honored tradition of American billionaires skirting their duty to contribute to their country— in this case, the country Trump himself runs.\n\nSo, why does our tax code remain so grotesquely unfair? In the nearly four years that Trump has been president, why has he not only failed to fix the imbalance that his voters elected him to fix, but allowed America to “get more lopsided every year”? Why did he cut the corporate tax rate by 14% in 2017, if big corporate moguls are the “main drivers” of the wedge between the middle and upper class? How were big corporations allowed to snap up $243 million of the $349 billion made available to small businesses that were suffering from lockdown closures? How were billionaires allowed to increase their profits by nearly $640 billion while 40 million Americans filed for unemployment?\n\nThe answer, to which many Americans are now waking up, is that Trump never planned to “flatten” the economy. He never planned to correct that imbalance, to dismantle the system that made him rich and benefit a class he was never part of. He is, just as Tucker Carlson said, only in it for himself.\n\nCarlson was quite right to say that billionaires should not pay lower taxes than you do, no matter who they are. And he was quite right to say that the American people elected Trump because they sought a leader who would level the playing field. But that’s why, in this case, who the president is matters quite a bit. This was the job America hired Donald Trump to do. Not only did he fail to do it; it turns out he is an enthusiastic participant in the very system voters elected him to dismantle.\n\nWill four more years of this administration produce a new, truly populist Donald Trump? Will it end the practice of billionaires like Trump exploiting the nation’s tax code and forcing the middle class to shoulder the economic burden? That’s for voters to decide. But, perhaps, the next time a politician says it’s time for the “rich to start paying their fair share,” think for a moment about what Tucker Carlson would say.",
    "keywords": [
      "trump",
      "tax",
      "america",
      "voters",
      "class",
      "middle",
      "carlson",
      "president",
      "billionaires",
      "tucker",
      "right",
      "donald"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------69a90f9f_c456_4871_95c4_8c8a1c0ad281-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------69a90f9f_c456_4871_95c4_8c8a1c0ad281-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------69a90f9f_c456_4871_95c4_8c8a1c0ad281-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------69a90f9f_c456_4871_95c4_8c8a1c0ad281-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------69a90f9f_c456_4871_95c4_8c8a1c0ad281-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://marker.medium.com/forget-shutdowns-its-demand-shock-that-s-killing-our-economy-3062e94c122e?source=extreme_main_feed---------0-74--------------------56328901_2690_4b4a_956f_7dcff32721e8-------",
    "title": "Forget Shutdowns. It’s ‘Demand Shock’ That’s Killing Our Economy.",
    "publish_date": "2020-10-15 12:24:29",
    "authors": [
      "James Surowiecki"
    ],
    "summary": "On July 11, the American economy hit a key milestone in its recovery from the coronavirus: the Magic Kingdom at Walt Disney World reopened.\nIn the three months that have followed, customer traffic has stayed well below where Disney hoped it would be.\nThe portion of visitors who are from out-of-state, who are the park’s most lucrative customers, has dropped below 50%.\nBut as lockdowns have been lifted in most of the country and businesses have been able to reopen, that supply shock has waned, only for a new problem to emerge: weak demand.\nIn other words, a supply shock has been replaced by a shock to demand.",
    "text": "On July 11, the American economy hit a key milestone in its recovery from the coronavirus: the Magic Kingdom at Walt Disney World reopened. The world’s most popular theme park had been shuttered since March 16, and the expectation was that Disney lovers from across the U.S., frustrated after months indoors, would flock to Orlando. And in the weeks leading up to the reopening, Disney had more than enough reservations to fill the park to its new, limited capacity. But as reopening day approached, the number of Covid-19 cases in Florida began to rise, and in response people started doing something Disney visitors almost never do: cancelling their reservations. In the three months that have followed, customer traffic has stayed well below where Disney hoped it would be. The portion of visitors who are from out-of-state, who are the park’s most lucrative customers, has dropped below 50%. In September, Disney reduced opening hours at all its parks, and in early October, it said it would be laying off 28,000 workers.\n\nDisney hasn’t been alone. Theme parks were allowed to open back up in most of this country this summer, and initially believed that pent-up demand would translate into a resurgence in traffic. Instead, attendance has been well below expectations — at Six Flags, for instance, it’s been around 25%–30% of capacity — and not by choice. Because of this, some park operators, like Hersheypark, have cut back hours, while others, like Cedar Fair, are just keeping some of their parks closed for the year. There’s no secret about why. As Six Flags CEO Michael Spanos said in a conference call with analysts: “What customers are telling us is when they see a flattening of the curve, they want to get out. We also see a chunk of guests that are saying that when they’re comfortable with the vaccine, they want to get out.”\n\nAs lockdowns have been lifted in most of the country and businesses have been able to reopen, that supply shock has waned, only for a new problem to emerge: weak demand.\n\nWhat Spanos was describing is the new reality now facing entire clusters of American businesses — restaurants, movie theaters, airlines, gyms — and the economy more generally: Consumer anxiety over the continued spread of the pandemic is holding back the recovery by making it impossible to get back to business as usual. In the spring, the economy was crushed in large part by the lockdowns and restrictions imposed by states, which created what economists call a supply shock: businesses literally could not supply goods and services, because they were shut down.\n\nBut as lockdowns have been lifted in most of the country and businesses have been able to reopen, that supply shock has waned, only for a new problem to emerge: weak demand. In other words, a supply shock has been replaced by a shock to demand.\n\nSome of the weakness in demand is because we’re on the verge of a classic recessionary cycle: Since the stimulus payments to unemployed workers ended in July, people either have less money to spend or are worried about spending it, which means businesses have less revenue, which makes them cut back on hiring and investment, which means less spending.\n\nHalf a dozen gym chains have filed for bankruptcy in recent months, including 24 Hour Fitness, the owner of New York Sports Club, and Gold’s Gym, with many of them permanently shuttering a majority of their locations.\n\nBut what makes this demand shock exceptional is that the U.S. still has 40,000 to 50,000 new Covid-19 cases and 600 to 700 deaths every day, and as a result lots of Americans are still leery of doing normal, not particularly indulgent things like eating out, going to the gym, or going to the movies. A recent survey by research firm Datassentials, for instance, found that 58% of those surveyed described themselves as “uncomfortable” with dining indoors, and 36% described themselves as “very uncomfortable.” Not surprisingly, then, no matter how creative restaurants get, traffic is still down sharply in most places, and 2.5 million restaurant workers who lost their jobs in April remain unemployed. Similarly, gyms have been open in most states for months now. But a recent survey of 5,000 gym-goers by RunRepeat found that 70% haven’t returned and 43% said they had no plans to go back. Half a dozen gym chains have filed for bankruptcy in recent months, including 24 Hour Fitness, the owner of New York Sports Club, and Gold’s Gym, with many of them permanently shuttering a majority of their locations.\n\nOr take movie theaters. By September, theaters were open in 44 of 50 states, and Warner Bros. decided to go ahead with plans to release Christopher Nolan’s Tenet, which had been one of the most highly-anticipated films of the year even before the pandemic hit. Even though theaters in New York City and Los Angeles remained closed, Tenet opened on almost 3,000 screens across the country. But even as Tenet did big box-office numbers overseas in countries where the virus has been contained, it made just $9.4 million on its opening weekend, despite facing essentially no competition. The hope had been that Tenet would prove people were ready to go back to the movies. Instead, it proved most weren’t. Hollywood studios concluded there was no point in trying to release big films for the rest of the year, and pulled their tentpole films from the fall schedule. And thanks to the combination of consumer anxiety and the lack of new content, Cineworld, owners of Regal Cinemas, shut down all 536 of its theaters in the U.S., while AMC, the largest U.S. theater chain, says it could run out of cash by the end of the year.\n\nThis shouldn’t be a revelation. In fact, myriad studies have now shown that in the early days of the pandemic, people began voluntarily socially distancing and avoiding places they perceived as risky even before lockdowns were put in place. And if you go further back in history, during the 1918 Spanish flu pandemic, businesses stayed open in most cities, yet economic activity still fell sharply, and contemporary accounts suggest that the economy only started to rebound when people became less afraid of catching the flu. The point is that lifting stay-at-home orders and opening restaurants isn’t enough: Until consumers feel safe, they’re going to stay away.\n\nIn the wake of the spring lockdowns, a popular narrative emerged that the only thing holding back the U.S. economy were busybody government officials who insisted on keeping stuff shut down. And, to be sure, government-imposed restrictions are still playing a role in holding back the economy, particularly in states like California — which has yet to allow Disneyland, or movie theaters, to open. But what the experience of restaurants and gyms and theme parks is telling us is that the problem now isn’t lockdowns. It’s something more basic: justifiable fear.",
    "keywords": [
      "disney",
      "thats",
      "killing",
      "forget",
      "lockdowns",
      "economy",
      "theaters",
      "shock",
      "businesses",
      "supply",
      "parks",
      "open",
      "shutdowns",
      "months",
      "demand"
    ]
  },
  {
    "url": "https://gen.medium.com/2020-has-been-bad-but-things-are-going-to-get-worse-2e083903b0f4?source=extreme_main_feed---------1-74--------------------56328901_2690_4b4a_956f_7dcff32721e8-------",
    "title": "2020 Has Been Bad. But Things Are Going to Get Worse.",
    "publish_date": "2020-10-15 16:16:45",
    "authors": [
      "Colin Horgan"
    ],
    "summary": "2020 Has Been Bad.\nBut Things Are Going to Get Worse.\nThe pandemic revealed our society’s failings.\nPhoto: Markus Spiske/UnsplashEarlier in 2020, as the lockdowns arrived, time started to feel warped.\nDisparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.",
    "text": "2020 Has Been Bad. But Things Are Going to Get Worse.\n\nThe pandemic revealed our society’s failings. We’re running out of time to fix them.\n\nPhoto: Markus Spiske/Unsplash\n\nEarlier in 2020, as the lockdowns arrived, time started to feel warped. We began to ask ourselves whether we were living in the past or the present or whether we were caught somewhere in between. This feeling of inertia was a function of recognizing a time lag between when the virus arrived and when we realized it was here.\n\nThe coronavirus case counts we saw updated every morning were already history — reality as it was two weeks prior. What was happening had already happened but also had not happened yet. Gradually, as the weeks and months followed, we learned more about the virus, including how long it had actually been around us — as well as how unprepared our society and our systems were for its arrival.\n\nThe pandemic has proven to be a clarifying force. While it will likely change some aspects of our society, before it does, it is first revealing what kind of a society we already had: one that is teetering on decaying foundations that have either gone unseen or have been deliberately ignored for decades.\n\nIn nearly every Western democracy it has hit, the pandemic has disproportionately affected people of color, the poor, and the elderly. Sometimes, like in the U.S., it’s hit them all. In short, the virus has shown us where our most egregious inequalities lie. Disparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.\n\nWe are living on a neglected structure, poorly constructed decades ago and then left largely unchecked. Even when we had the chance, after its near-collapse in 2008, to reassess the system, we didn’t bother and instead were steered for another decade in an ideological vacuum, maybe the last true product of late capitalist boredom. This long-standing failure to account for the obvious disparities at the heart of our society is probably why the pandemic will likely create a so-called K-shaped recession — one wherein “big companies and rich families have largely recovered, whereas mom-and-pops and the moms and pops who run them are living through a second Great Depression,” as Annie Lowrey wrote recently at The Atlantic.\n\nWe live every day under a looming sense of delayed inevitability. How long can it go on?\n\nThe mechanisms we have that ought to help us address those disparities, like politics, law, or journalism, have also been revealed to be heavily damaged. Our democracies are stressed, not from external enemies as much as from internal rot. Rebuilding them would require us to inhabit a shared reality. Thanks somewhat to our current acoustic information sphere dominated by platforms of fantasy, we don’t have one.\n\nThat lag time we noticed in the spring now feels more familiar, if not constant. We live every day under a looming sense of delayed inevitability. How long can it go on?",
    "keywords": [
      "bad",
      "2020",
      "long",
      "revealed",
      "disparities",
      "pandemic",
      "living",
      "going",
      "worse",
      "weeks",
      "virus",
      "society",
      "things",
      "sense"
    ]
  },
  {
    "url": "https://debugger.medium.com/your-entire-life-is-on-gmail-its-time-to-clean-that-up-c81106e099b4?source=extreme_main_feed---------2-74--------------------56328901_2690_4b4a_956f_7dcff32721e8-------",
    "title": "Your Entire Life Is on Gmail. It’s Time to Clean That Up.",
    "publish_date": "2020-10-16 05:32:59",
    "authors": [
      "Angela Lashbrook"
    ],
    "summary": "Your Entire Life Is on Gmail.\nDon’t suffer like I’ve sufferedPhoto: Jay Wennington/UnsplashWednesday, 2 p.m. Eastern Time: I am on hour 9,000 of deleting emails from my overloaded Gmail account.\nI did this first and then decided, whatever, I don’t need any of that junk.\nYou can find more helpful Gmail search terms here, though the above are the terms I found most effective for deleting swathes of email at once.\nOnce you’ve cleared out your Gmail, you don’t need to get complicated with folders and labels and such, which get cumbersome if you have too many.",
    "text": "Your Entire Life Is on Gmail. It’s Time to Clean That Up.\n\nDon’t suffer like I’ve suffered\n\nPhoto: Jay Wennington/Unsplash\n\nWednesday, 2 p.m. Eastern Time: I am on hour 9,000 of deleting emails from my overloaded Gmail account. My eyeballs are leaking out of my head and pooling in a sticky puddle on my laptop’s mouse pad.\n\nOr it feels like it, anyway.\n\nIn recent weeks, Google has sent me repeated warnings that I’m approaching my Google Drive storage limit. I had rarely considered that Google would limit my storage capacity; the company’s potential for data collection seems infinite, incapable of being incapacitated or overburdened. And yet my email account, which I’ve had since 2014, is finally tired of holding my endless stream of newsletters and press releases; the 15 gigabytes that Google allots free users is nearly full.\n\nI’d hoped to write this story with a title along the lines of “One Simple Trick To Clearing Out Your Google Drive Storage.” Deleting every last email in your inbox and starting fresh would be ideal, but there’s such a wild mix of correspondence stored there — chain emails from your second cousin, newsletters from companies you bought a sweater from once, love letters from the early days of a current relationship — that the nuke-and-run method isn’t recommended or possible for anyone but those who lack even a drop of sentimentality.\n\nFor everyone else, there’s no one trick to clearing out your Google Suite. There are strategies, which I will get into below, but the best thing you can do, I have unfortunately discovered, is keeping tidy as you go. And that means deleting all the emails you don’t need as you receive them so you don’t get caught up in the mess I spent the last several days cleaning up.\n\nOver the course of the past few days, I’ve been experimenting with various methods of deleting my emails and documents. It was a painful experience: Reading old emails that detailed difficult situations and brought up bitter memories was not how I would prefer to spend my workday (or my time off), and it wasn’t easy to figure out what I could justify deleting (emails with former bosses about banal topics) and what should stay (contracts, old emails from friends). My years of resistance toward deleting any of these emails — out of a sense of nostalgia or concerns that I might need them for whatever reason someday — like fall into the bucket of what researchers consider “digital hoarding.”\n\nDigital hoarding, which I’ve written about before, might sound somewhat hyperbolic — after all, it’s not like someone who compulsively splurges on Steam sales must then literally wade through piles of games on their way to the bathroom. Yet studies show digital hoarding can be stressful and even upsetting to those who experience it. In 2018, researchers interviewed 45 of these so-called digital hoarders and found that the impression that digital space is endless contributed significantly to peoples’ tendency to hoard. They were surprised at the volume of digital stuff they’d accumulated, but still struggled to come to terms with deleting much of it.\n\nMany people simply didn’t care about the pileup of documents, emails, photos, and music. “I can’t be bothered going through it all, there are too many,” said one 30-year-old participant. “I’ve left it so long now that going back and sorting through is not something I can be bothered with,” said another, age 25.\n\nFor many participants, the prospect of going through and deleting their digital crap was anxiety-inducing and stressful. This certainly aligns with my own experience: When I first faced the mess that was my Google Drive on the day I took this assignment, I felt panicked and overwhelmed by the sheer magnitude of the task in front of me.\n\nSimilar to the terror that might precede sitting down to scrub the baseboards with a stack of sponges, I was resistant and angry before I got started on my Google Suite cleaning. But once I got started, I kind of… couldn’t stop. Seeing that little percentage tick down as I went through my emails was immensely satisfying, like creating vacuum lines on a carpet. So, yes, there’s no real trick to this, and my guess is that this is intentional: If it’s a pain in the butt to organize and delete your emails and files, your only options are either to a) get a new email address (I legitimately considered this) or b) pay Google for more storage, which starts at $1.99 a month for 100 gigabytes and goes up to $10 a month for 2 terabytes. And the more emails you keep and accumulate, the more delicious, juicy data is available for Google to collect.\n\nWhat you need to do first is figure out where you’re storing most of the junk taking up the precious few 15 gigabytes Google allots you. To do this, go to One.Google.com and, on the left sidebar, click “Storage.” There, you’ll find a breakdown of how much space Google Drive, Gmail, and Google Photos are taking up, respectively.\n\nUnless you’re a photographer or a big fan of huge PDFs and weighty spreadsheets, most of the action is probably happening in your email. The best way to delete mass emails without regret — or sadness, as I found as I thumbed through those depressing messages from five years ago — is to temporarily sign up for Mailstrom.co.\n\nMailstrom analyzes your email and, theoretically, allows for quick and easy unsubscribe and delete options. (For those worried — with good reason — about their privacy, Mailstrom says it won’t share or sell your data for advertising purposes, and it deletes your data three months after you’ve canceled your account.) But after you’ve deleted 2,500 emails through Mailstrom, your free trial ends, and you need to pay between $9 and $30 a month to continue using the service. If I were going to pay, I’d probably just buy the Google storage, which is cheaper, than a streamlined method for deletion. Instead, I recommend using Mailstrom to show you which senders are pummeling you with the most garbage:\n\nI am my second-worst offender!\n\nOnce you’ve determined the worst sender offender, you can go into Gmail, search from:sciencedirect@notification.elsevier.com (or whoever is sending you tons of email), and mass delete from there. Once you’re looking at your search results, click the “Select All” box on the left side of your inbox, and then be sure to click “Select all conversations that match this search,” like so:\n\nThat way, you’ll delete all the messages sent by that particular sender, not just the most recent 50.\n\nThat should get rid of a pretty decent chunk of your email clutter in a minimal amount of time, but if you want to keep going, I’d recommend a few more courses of action:\n\nDelete everything in your Promotions and Social folders. Just go nuclear on those folders. Check the past few pages to ensure nothing important lands in there, and then select all and delete. That will likely be thousands, if not more, of the remaining marketing and newsletter stragglers you didn’t catch when you used the Mailstrom method. If you only want to delete Promotions or Social emails older than a specific date, use the following search term: category:promotions , older_than:2y. (That space between “promotions” and the comma is intentional — the search won’t work without it.) I did this first and then decided, whatever, I don’t need any of that junk. Bye! You can do the same with newsletters with category:updates , older_than:2y. Search for all your emails larger than a specified size, then go through and manually delete (or be bold and “select all” — “delete”). Enter larger:10mb for this option. This takes more time, so I only recommend this if you’ve already nuked your marketing emails and still have a good chunk of space to free up. It makes more sense to sort out and delete emails larger than a specific size than attachments larger than a specific size because plenty of emails are ginormous without the additional help of an attachment. But if you want to focus on attachments, type has:attachments larger:10MB (or however big) into the search bar and go wild.\n\nYou can find more helpful Gmail search terms here, though the above are the terms I found most effective for deleting swathes of email at once.\n\nBecause Google considers your Trash to be part of your allotted 15 gigabytes, you need to empty it before you know how much you’ve truly managed to delete. Once you empty your trash, those emails are gone forever, but I don’t really recommend clicking through and looking at what’s in there because you’ll find yourself three hours later red-eyed and extremely bored. Just hit delete — and admire your clean baseboards/organized closet/sparkling tile or whatever household cleaning analogy would give you the most satisfaction.\n\nNow, hopefully, you are down to the point where you can begin to accumulate email again without worrying about running out of space for the next couple of years. Here’s where I stand now:\n\nIt took me several days to get here, but only because I took the time to try every conceivable method in order to deliver to you, dear reader, those which I’ve found most effective. Still, you probably need to put at least an hour or two of work into this, I’m sorry to say.\n\nBut you never have to do this again if you follow two very simple rules from here on out:\n\nMark any and all press releases, marketing emails, et cetera that you don’t want to see as spam. If you want to be nice, you can email the marketing company or PR reps and respectfully ask to be removed from their mailing list, but if you’re lazy or simply receive too many of them to do this, just file them to spam. Gmail automatically clears out your spam folder after 30 days, so they’re as good as gone after a month. Do this consistently, as soon as you see them. Delete any other emails you don’t care about immediately. Don’t leave them there because maybe you’ll read them later. Don’t let them collect dust. Delete. Be ruthless, seriously. No time like the present to shed your indecisive, sentimental nature when it comes to messages from your alumni association or the rescue where you got your dog. Bye!\n\nWith this, you should stay ahead of the game, with minimal effort, for the next several years at least. Once you’ve cleared out your Gmail, you don’t need to get complicated with folders and labels and such, which get cumbersome if you have too many. (I only have two: one for random thoughts I send myself in the middle of the night about my novel, and one for press releases from book publicists since I often respond to those en masse at a later date).\n\nBy making the spam and delete buttons your best friends, you will avoid the disaster you have wrought upon yourself for a very, very long time.",
    "keywords": [
      "life",
      "dont",
      "search",
      "delete",
      "emails",
      "email",
      "entire",
      "gmail",
      "need",
      "youve",
      "google",
      "deleting",
      "clean"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------56328901_2690_4b4a_956f_7dcff32721e8-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/javascript-in-plain-english/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6?source=extreme_main_feed---------4-73--------------------56328901_2690_4b4a_956f_7dcff32721e8-------",
    "title": "11 Frontend tricks that most Frontend Developers don’t know about",
    "publish_date": "2020-10-14 19:17:01",
    "authors": [
      "Daniel Anderson"
    ],
    "summary": "Datalist elementOne HTML element that you don’t see used much at all and for no reason!\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements.\nYou will see a drop-down list of pre-defined options as you type.\n<datalist>Example:<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\"><option value=\"Cat\"><option value=\"Dog\"><option value=\"Chicken\"><option value=\"Cow\"><option value=\"Pig\"></datalist>",
    "text": "1. Datalist element\n\nOne HTML element that you don’t see used much at all and for no reason!\n\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements. You will see a drop-down list of pre-defined options as you type.\n\n<datalist>\n\nExample:\n\n<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\">\n\n<option value=\"Cat\">\n\n<option value=\"Dog\">\n\n<option value=\"Chicken\">\n\n<option value=\"Cow\">\n\n<option value=\"Pig\">\n\n</datalist>",
    "keywords": [
      "dont",
      "tag",
      "11",
      "datalist",
      "valuecatoption",
      "valuepigdatalist",
      "reasonthe",
      "frontend",
      "know",
      "valuedogoption",
      "valuecowoption",
      "developers",
      "typedatalistexampleinput",
      "tricks",
      "valuechickenoption",
      "used"
    ]
  },
  {
    "url": "https://towardsdatascience.com/fastapi-has-ruined-flask-forever-for-me-73916127da?source=extreme_main_feed---------5-73--------------------56328901_2690_4b4a_956f_7dcff32721e8-------",
    "title": "FastAPI has Ruined Flask Forever for Me",
    "publish_date": "2020-10-11 09:01:22",
    "authors": [
      "Fahmi Nurfikri"
    ],
    "summary": "FastAPI has Ruined Flask Forever for MeWhy I prefer using FastAPI instead of FlaskFastAPI Logo — https://fastapi.tiangolo.comWhat do you like best about being a data scientist?\nIf you need to look for something about FastAPI, you usually don’t need to look anywhere else.\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running.\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords.\nFastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.",
    "text": "FastAPI has Ruined Flask Forever for Me\n\nWhy I prefer using FastAPI instead of Flask\n\nFastAPI Logo — https://fastapi.tiangolo.com\n\nWhat do you like best about being a data scientist? It’s definitely modeling and fine-tuning for optimal results. But what does it mean to be a good model if it’s never used or never deployed?\n\nTo produce a machine learning model, the typical approach is to wrap it in a REST API and use it as a microservice. One of the most widely used frameworks for creating APIs is Flask.\n\nThe main reason Flask is widely used is its simplicity. In general, we only use the API to model predictions, so we don’t need a complex architecture (example: Django). Another reason is that Flask is written in Python, which is the language used to do machine learning modeling in general, so we are familiar with it.\n\nHowever, if you want to create a REST API with clear, static, inputs that are validated, you must include several different packages from several third parties that do not cooperate with each other. And you have to create custom code to get everything running.\n\nThis is what caused me to look for alternatives for my needs, where finally I found a framework called FastAPI and it became my new favorite framework. Here are the reasons why I like to use FastAPI.\n\nDocumentation\n\nThe first thing I notice from FastAPI is the documentation. FastAPI has very extensive documentation and rich examples, which makes things easier. If you need to look for something about FastAPI, you usually don’t need to look anywhere else.\n\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running. So that we don’t need to write the API documentation that we created ourselves. As we all know, writing API documentation is annoying, not only because there is a lot of detail to go into, but also nothing more frustrating when the end-users are implementing but not match up the documentation. So that with the automatic generation of API documentation it will be very helpful\n\nBelow is a display example of the API documentation (provided by Swagger UI)\n\nAlternative automatic documentation is also provided (provided by ReDoc)\n\nTo define the created schema, it uses Pydantic, which is another awesome Python library, used for data validation. Its purpose is to validate the input that goes to FastAPI. If the input/request is incorrect then the appropriate error code will be returned.\n\nPerformance\n\nAs the name implies, this is indeed FastAPI. Based on data from techempower benchmarks, FastAPI beats every framework when it comes to performance. Where the most commonly used frameworks like Flask and Django lag behind.\n\nFramework performance — techempower\n\nYeah, it blazingly fast.\n\nAsynchronous\n\nOne of the drawbacks of Flask is the lack of asynchronous I/O support. Asynchronous is pretty important for HTTP endpoints, which tend to do a lot of waiting for I/O and network chat, making it a good one candidate for concurrency using async.\n\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords. FastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.\n\nAll you have to do is declare the endpoints with the async keyword like this:",
    "keywords": [
      "api",
      "dont",
      "using",
      "forever",
      "framework",
      "documentation",
      "flask",
      "need",
      "used",
      "ruined",
      "asynchronous",
      "fastapi"
    ]
  },
  {
    "url": "https://medium.com/lessons-from-history/what-you-dont-know-about-the-famous-templar-knights-e225932969a3?source=extreme_main_feed---------6-73--------------------56328901_2690_4b4a_956f_7dcff32721e8-------",
    "title": "What You Don’t Know About the Famous Knights Templar",
    "publish_date": "2020-10-03 21:34:41",
    "authors": [
      "Nicol Valentin"
    ],
    "summary": "They wrote their rule with the help of a saintHumility, chastity, and strict obedience were major tenants of the Templar rule.\nHeck, a Templar wasn’t even allowed to kiss his own mother.\nProponents of this idea also cite the fact that Templar knights were forbidden meat on Mondays, Wednesdays, and Fridays.\nNot only did the king feel his money was physically secure in Templar banks, but the fact that almost every English county had a Templar presence helped too.\nAnd so it was with King Philip of France.",
    "text": "In 1119, dangers lurked everywhere in the Holy Land. Saracens (Moslems) butchered 300 Christians in March, and another 7000 that June.\n\nThings like this weren’t uncommon, and every pilgrim knew it. The French knight Hugh of Payns knew it. Only Hugh decided to do something about it.\n\nHe and a small band of warrior pilgrims soon joined in a brotherhood in which all agreed to take on a life of penance, poverty, and strict obedience. Unlike other knights of the time, they would defend the poor and innocent.\n\nEven to the point of sacrificing their own lives if necessary. Later, the group would gain official recognition under the name The Poor Fellow-Soldiers of Christ and the Temple of Solomon. We know them as the Templars.\n\nAlthough the early days of the Templars were uneventful, it didn’t take long for the men to make a name for themselves throughout Europe. Their role in the Holy Land began to expand, and soon they were defending the entire Levant from enemy invaders.\n\nToday, no image of the crusades is complete without a picture of a Templar knight in his white mantle emblazoned with a red cross. And yet, with all that imagery, there's more to the Templars than meets the eye. Much more.\n\nThey wrote their rule with the help of a saint\n\nHumility, chastity, and strict obedience were major tenants of the Templar rule.\n\nWhen a man joined the Templars, he had to swear off furs, fancy clothes, and those oh so stylish pointy shoes everyone was raving about. They were also pretty hardcore when it came to chastity.\n\nHeck, a Templar wasn’t even allowed to kiss his own mother. That’s a lot of energy going to moral fortitude. In the end, it helped them become the elite fighting force that they were.\n\nTemplars were also required to do the standard things like take care of orphans and widows, and defend the church. Standing in church when praying or singing was forbidden, as well as talking to the excommunicated.\n\nAll this makes sense when you consider the Templars were actually warrior monks. Their rule was partly composed by one of the most famous monks of all time, St. Bernard of Clairvaux.\n\nKnown as the Primitive Rule of the Templars, Bernard based it on the writings of St. Benedict and St. Augustine. The order had already been established several years before the rule was completed. So, in the end, it was basically everything the guys had already been doing.\n\nThey were said to have the gift of long life\n\nWhich is ironic since 90 percent of fighting knights died. However, thanks to a healthy diet and great hygiene, Templars had a good chance of living into their 60s.\n\nBarring any spears through the heart that is. That may not seem like a ripe old age to you, but in the Middle Ages, that wasn’t so bad. Some people attribute the brother's good health to something called “The Elixir of Jerusalem” which consisted of palm wine, aloe pulp, and hemp.\n\nProponents of this idea also cite the fact that Templar knights were forbidden meat on Mondays, Wednesdays, and Fridays. However, on Sundays Chaplins and clerks were allowed to eat meat at both lunch and dinner. According to the rule, “the rest of the household, that is squires and sergeants, shall be content with one meal and should be thankful to God for it.”\n\nFasting was undertaken between All Saints (Nov. 1) and Easter, with the exception of Christmas Day, the Assumption, and the Feast of the Apostles. Of course, we can’t leave out the fact that Templars were physically fit. Couch potatoes wouldn’t last long in an outfit like this after all.\n\nUp to 90 percent of members never went to combat\n\nThat's because they were busy managing the large economic infrastructure they created throughout Europe.\n\nIn fact, the Templars were arguably the first multinational cooperation, and it took a lot of guys to keep it going. Their reputation as defenders of the weak along with their pious behavior brought them to the attention of patrons of both high and low status.\n\nTemplar coffers overflowed with gifts like sheep farms, water mills, even isolated villages complete with serfs. Common workers left things in their wills to, like donkeys and small plots of land. And the templars never poo-pooed any of it.\n\nAll those small parcels were combined to form larger estates that were then leased out or farmed. Of course, the properties needed managers, and that task fell to the lay brothers. Beside gifted properties, there were the Templer houses, known as commanderies. This would be run by sergeants who were brothers from non-noble families.\n\nThey excelled in banking\n\nTheir widespread network of commanderies made it easy for Templars to set up a deposit system for traveling pilgrims.\n\nA fellow leaving from London, for example, could deposit his money in the city’s Temple church. As he embarked on the precarious journey overseas, he could concentrate on escaping the pitfalls of travel to the Lavant. The one thing he didn’t have to worry about was losing his money.\n\nOnce he arrived safely at his destination, he simply found the nearest Templar bank and presented his letter of credit. His funds were then safely returned.\n\nEven Kings trusted them with their money\n\nIt wasn’t just the little guys who benefited from the brother's banking system, though. Many kings looked to the Templars to bail them out financially.\n\nFrance in particular had a complicated financial relationship with them. Louis VII was the first king to seek a loan from the Templars at the end of the second crusade. Once he was home and his debt repaid, Louis placed what was left in his treasury under the protection of his Templar friends.\n\nFrom then on the French Treasury was run by the Templars, They took in and accounted for all payments made to the crown, as well as keeping account of the king's creditors and debtors. Money was taken in, stored, and paid out with statements going to the king three times a year.\n\nIn 1185 English King Henry II began using the Temple in London as his treasury. He trusted the Templars with coins, valuables, and even his jewels. Not only did the king feel his money was physically secure in Templar banks, but the fact that almost every English county had a Templar presence helped too. After the deadly battle of Hattin,\n\nHenry charged the Templars with collecting taxes to raise funds for a new crusade. His son, Richard the Lionheart, favored the knights as well. He exempted them from a host of taxes and had every sheriff in England pay them an annual stipend.\n\nBanking was part of their glory, but also their downfall\n\nThe downside to lending governments loads of money is it can make leaders cranky. And so it was with King Philip of France. Philip was far from the most pleasant fellow and he set his eyes on the Templars coffers.\n\nPhilips's grandfather King Louis IX was a saint, and Philip liked to believe he was the epitome of a holy king too. Yet it’s kind of hard to believe a guy is pious when he disputes with the pope (Boniface VIII) for five years (1296–1301).\n\nThe fight, not surprisingly, was over tax revenue. It only ended because Philip took some of his thugs to the papal palace, smashed through the doors, and roughed Boniface up so badly he died a month later.\n\nA Greedy King was their biggest enemy\n\nPhilip really wanted that tax revenue because France was in dire need of money.\n\nBy 1306 the country was in dire straits. A guy can get crazy when he's desperate for money, and desperate Philip was. So in the name of his fake piety, he came up with a story. It was a horrid story, a devious story — a blasphemous story.\n\nThe Templars, he said, were “vilely insulting our religious faith” by means of sodomy, idol worship, heresy, and black magic. Basically, everything contrary to what they had been fighting for since their inception.\n\nFrom there Philip had all the Templars round-up and tortured so they would confess to the false charges he put against them. He burned a few at the stake and eventually convinced the rest of the world of the brother's evil ways.\n\nFinally, the Pope (under pressure from Philip) had the order disbanded in 1312. Assets were given to another famous group of knights, the Hospitallers. Of course, Philip confiscated a huge sum of that as payment for all the work he put into ridding the world of the evil Templars.\n\nNotes and Sources:\n\nGentle reader, please don’t tell me about my picture. I already know. Unfortunately, no Templars were available for photographs. It’s a hard thing, writing about history.\n\nThe Templars, Dan Jones\n\nhttps://www.marketwatch.com/story/how-the-knights-templar-became-the-worlds-first-financial-services-company-2017-09-26#:~:text=It's%20sometimes%20said%20the%20Templars,t%20the%20first%20world's%20bankers.\n\nhttps://erenow.net/postclassical/the-real-history-behind-the-templars/25.php\n\nhttps://www.gq-magazine.co.uk/article/ten-things-you-never-knew-about-the-knights-templar\n\nhttps://www.warhistoryonline.com/medieval/nine-rules-knights-templar.html\n\nhttps://www.history.co.uk/shows/knightfall/articles/holy-money-how-the-knights-templars-got-so-rich\n\nhttps://www.bbc.com/news/business-38499883\n\nhttps://www.history.co.uk/shows/lost-relics-of-the-knights-templar/articles/13-things-you-didn%25E2%2580%2599t-know-about-the-knights\n\nhttps://thetemplarknight.com/2011/01/27/king-philip-crush-templars/",
    "keywords": [
      "dont",
      "templars",
      "philip",
      "king",
      "fact",
      "brothers",
      "knights",
      "famous",
      "rule",
      "know",
      "money",
      "wasnt",
      "templar"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/6-programming-jokes-that-will-make-you-lol-131b8cae4dc5?source=extreme_main_feed---------7-73--------------------56328901_2690_4b4a_956f_7dcff32721e8-------",
    "title": "6 Programming Jokes That Will Make You LOL",
    "publish_date": "2020-08-27 12:06:24",
    "authors": [
      "Varun Joshi"
    ],
    "summary": "Photo by Max Duzij on UnsplashIf you’re not a developer and here to check what developers find funny, you’re going to be disappointed.\nIt’s not that we don’t like jokes, we just like a certain level of nerdiness in our jokes.\n), you’re going to love this collection of programming jokes below.\nNote: A lot of the best programming jokes on the Internet come from xkcd.\nTech SupportThe worst nightmare for any developer is to contact customer support for an internet problem.",
    "text": "We all like jokes that are cracked at the expense of someone else’s code.\n\nDevelopers are usually very quiet and introverted. We take a bunch of ‘tickets’ and convert them into code while being seated at our desk all day. Strange, innit?\n\nPhoto by Max Duzij on Unsplash\n\nIf you’re not a developer and here to check what developers find funny, you’re going to be disappointed. It’s not that we don’t like jokes, we just like a certain level of nerdiness in our jokes.\n\nIf you’re a programmer worth your salt (heh!), you’re going to love this collection of programming jokes below. These are sourced from around the internet & intended to make your week a little bearable.\n\nNote: A lot of the best programming jokes on the Internet come from xkcd. This webcomic was created by Randall Munroe in 2005. The comic’s tagline describes it as “A webcomic of romance, sarcasm, math, and language”. Munroe states on the comic’s website that the name of the comic is not an initialism, but “just a word with no phonetic pronunciation”.\n\nLet’s start:\n\n1. Tech Support\n\nThe worst nightmare for any developer is to contact customer support for an internet problem. The customer service agents sometimes (I’m being polite, read ALWAYS) fail to understand that restarting computers does not always work. Well, we’re developers and understand how these things work, so a lot of the time we know how to fix the problem, provided you connect us to a fellow developer.\n\nSHIBBOLEET: I’m going to try it the next time I call any customer support service. I wish, someday, it comes true.\n\n2. MVP\n\nMaking an MVP is all about trying to create a list of features (when actually all you do is create a list of bugs) while heading towards the launch date. Solve a couple of king-sized bugs and forget about the rest (if only it were that simple).\n\n3. Wisdom of the Ancients\n\nOne of the only things I hate about StackOverflow is questions that have been unanswered or with answers that bash the person with the question about how stupid the question is! Just answer it, Genius!\n\nI once was in this situation where I came across a problem and found absolutely nothing on the web. Even StackOverflow had a question with no upvotes or answers but with 6.7k views.\n\nWhat did I do? I’ll admit I tried for exactly 32 hours and rewrote my code.\n\n4. Still Worthy\n\nThe feeling you get when you spend all-day fixing bugs and get to compile your code successfully at the end. The satisfaction is unparalleled.\n\nGoogle\n\n5. Turtles\n\nLife is simple. The turtle lives on thinking & believing in only one true fact, the fact that it is a turtle. Humans tend to overthink and complicate things which is why we probably don't live as long as turtles do.\n\n6. Slacking Off\n\nCode takes time to compile & deploy. Programmers can do nothing productive while a build is in progress. But I wish I could have sword fights like this at work. Presenting the best & most honest xkcd comic of all time!\n\nTo be honest, I am writing this as my code compiles and deploys.\n\nI now realise that 4 of the 6 hilarious jokes are xkcd. Randall Munroe is a genius!\n\nBonus\n\nIt's not a bug, its a feature :)",
    "keywords": [
      "jokes",
      "lol",
      "problem",
      "going",
      "internet",
      "programming",
      "munroe",
      "xkcd",
      "things",
      "work",
      "question",
      "youre"
    ]
  },
  {
    "url": "https://psiloveyou.xyz/5-ways-to-give-a-woman-an-unforgettable-compliment-461de40ed5a?source=extreme_main_feed---------8-73--------------------56328901_2690_4b4a_956f_7dcff32721e8-------",
    "title": "5 Ways to Give a Woman an Unforgettable Compliment",
    "publish_date": "2020-09-02 18:09:09",
    "authors": [
      "Carlyn Beccia"
    ],
    "summary": "5 Ways to Give a Woman an Unforgettable ComplimentHint: “Hi Sexy” doesn’t cut itPhoto by Anna Shvets from PexelsAny woman on a dating app has grown accustomed to a barrage of empty compliments.\nAnd just using the right words begins that dance.\nWhat makes a woman feel special is when she sees her infinite possibilities reflected in her lover’s eye.\nWhat makes a woman feel special is when she sees her infinite possibilities reflected in her lover’s eye.\nWe all know those people who pay you a compliment right before they ask for something.",
    "text": "5 Ways to Give a Woman an Unforgettable Compliment\n\nHint: “Hi Sexy” doesn’t cut it\n\nPhoto by Anna Shvets from Pexels\n\nAny woman on a dating app has grown accustomed to a barrage of empty compliments. There’s the spammer guy who sends the “Hi Beautiful” to every woman within a 50 miles radius. Or the guy that within 3 minutes of witty text exchanges peppers in a “Your hot.” (Bad grammar intended…and even more egregious if you are flirting with a writer.)\n\nBut then there is the man whose compliment makes you feel like a Stradivarius violin begging to be played.\n\nAll flirtation begins with flattery. A good compliment smashes fears and tears down walls. It clears the cobwebs from our ancient hearts and seduces us into the quiet recesses of unbound love. And just using the right words begins that dance.\n\nBut in our fast-paced world, many have forgotten how to slow down and give a great compliment. Here are some tips on how to be the guy who seduces with a memorable compliment.\n\nYou turn a flaw into an asset.\n\nIn the eighteenth century, Giacomo Casanova fell in love with a beautiful actress and was determined to have her. Unfortunately, she had one not-so-sexy peccadillo — a speech impediment that prevented her from saying “r” words. Undeterred, Casanova set out to charm her.\n\nSo he wrote her a play without a single “r” word that she could perform for her fans.\n\nNow, Casanova could have given his lady love money for a speech coach or handed her a few eighteenth-century self-help books on elocution. But he did not. Casanova didn’t try to fix her flaw. Because he did not hear her ineloquent “r” words. He only heard all the letters of the alphabet she could pronounce.\n\nPeople who give great compliments are like master diamond cutters. They cut the right angles to make even the lowest grade diamond shine. They may see minor blemishes and weaknesses, but they highlight only strengths.\n\nWe grow attached to people who allow us to be vulnerable. A good compliment tells the other person — it’s ok to be perfectly imperfect.\n\nPeople who give great compliments are like master diamond cutters. They cut the right angles to make even the lowest grade diamond shine.\n\nYou notice something unusual.\n\nInstead of offering generic praise, most women want to hear that you adore her uniqueness.\n\nMaybe you notice the delightful way her nose crinkles when she laughs. Or perhaps you are captivated by her penchant for climbing tall structures in heels. (Don’t knock it until you try it.) Women don’t want to hear that she has a sexy butt. She wants to hear that you noticed the freckle on her butt.\n\nBe the guy who takes the time to notice something special about her instead of something generic. Women adore that guy.\n\nYou see her possibilities more than her accomplishments.\n\nWomen don’t want to be admired for the awards they have already won. Polishing someone’s medals does not make them feel special. What makes a woman feel special is when she sees her infinite possibilities reflected in her lover’s eye. He sees the person she has yet to become.\n\nFor example, instead of complimenting someone on a recent work promotion, tell them how you know they will go far in life because of a specific skill. Maybe it’s how she juggles multiple projects, her creative problem-solving skills, or her calm, analytical approach to any crisis. Compliment your lover’s untapped potential and future accomplishments instead of the accomplishments she has already achieved.\n\nWhat makes a woman feel special is when she sees her infinite possibilities reflected in her lover’s eye.\n\nDon’t make your compliment a transaction.\n\nWe all know those people who pay you a compliment right before they ask for something. Nothing makes someone feel like they have swallowed dirty pool water than a compliment that foreshadows a request.\n\nGreat compliments are like a well-timed orchestra. They reach their crescendo at the right moments. This especially holds true for that romantic milestone of saying, “I love you.”\n\nNever say it for the first time during sex. That is guaranteed to not go over well. “I love you’s” during sex are like throwing pennies into a wishing well. They are cheap and never make the words come true.\n\nIn a study from the Journal of Personality and Social Psychology, psychologist Josh Ackerman found women were happier to hear first-time declarations of love after sex, not before or during. The reason is simple. A woman knows that a host of hormones and neurotransmitters mess with your thoughts during that mid-coitus flood of emotion. And let’s face it. An “I love you” during or before sex is you thinking with your little head and not your big head.\n\nIf you genuinely feel it…you will still feel it when the waves of pleasure pass. So wait for a quiet moment free of lust, and it will feel less transactional.\n\n“I love you’s” during sex are like throwing pennies into a wishing well. They are cheap and never make the words come true.\n\nPractice Sprezzatura\n\nSprezzatura is an Italian word coined by master seducer Baldassare Castiglione in his 1528 The Book of the Courtier. He defined it as “art which does not seem to be an art.” In modern parlance, this is acting naturally and unaffected. A great compliment appears effortless like you are merely stating the obvious.\n\nMy ten-year-old son is a consummate flatterer. I recently had a birthday, and he bounded into my room with a “Happy 35th birthday!”\n\nI laughed, “You know I am not 35.”\n\nHe responded, “Nooooo. It can’t be so. You don’t look a day over 20.”\n\nYes, I am giving you love advice from a ten-year-old, but stay with me… Children have a spontaneous and sometimes brazen way of speaking. So when they give a compliment, there’s less chance of duplicity. A natural, guileless, Sprezzatura compliment springs out of this childlike purity.",
    "keywords": [
      "women",
      "compliment",
      "sex",
      "ways",
      "unforgettable",
      "hear",
      "words",
      "feel",
      "woman",
      "right",
      "special",
      "love"
    ]
  },
  {
    "url": "https://medium.com/the-post-grad-survival-guide/how-i-grew-0-to-1-050-e1a83ad849eb?source=extreme_main_feed---------9-73--------------------56328901_2690_4b4a_956f_7dcff32721e8-------",
    "title": "How I Am Growing $0 to $80,000 and How You Can Too",
    "publish_date": "2020-09-30 04:34:25",
    "authors": [
      "The Retired Millennial"
    ],
    "summary": "I continued this pattern, where I would buy inventory with the profit I made, sold the inventory, bought more inventory, sold the inventory until I reached $1,000 in profit.\nOne bucket was eBay the other was local marketplace apps (like Facebook Marketplace, OfferUp, and the like).\nfor $5-$20, they would go fast on local selling apps like Facebook Marketplace and OfferUp.\nFor Facebook Marketplace and similar local selling apps, I focused on low-cost everyday items.\nMake an educated guess on what the demographic in your town would buy, buy it, list it, and see how it performs on various platforms.",
    "text": "I continued this pattern, where I would buy inventory with the profit I made, sold the inventory, bought more inventory, sold the inventory until I reached $1,000 in profit.\n\nI bought/acquired items from a few sources, where my primary location was the Goodwill Outlet. Other places I did not expect to pick up items were from the curb. You know when you see something on the side of the road that says “free.” That is a pretty normal thing for my neighborhood to do, and to my surprise, I found a few high-quality items by chance. Here is a breakdown of all the places that I sourced from.\n\nWhen I made inventory purchases, I kept in mind what platform I wanted to sell it on, because I generally had two buckets of items I would source for. One bucket was eBay the other was local marketplace apps (like Facebook Marketplace, OfferUp, and the like).\n\nSourcing Items\n\nBefore the 0–1k was a thing, I already was flipping, but only on eBay. I had a hypothesis, which was that if I could price everyday items like kitchen appliances, pet items, children's items, etc. for $5-$20, they would go fast on local selling apps like Facebook Marketplace and OfferUp.\n\nI had this hypothesis and tested it for a few days a had made quick sales, so I decided to track my progress. My boyfriend then suggested that he and I race to 1k. He has purchased an item for less than a $1.00 and sold it for $90 on eBay, so he did a 1–1k challenge. So back to the items I chose.\n\nFor Facebook Marketplace and similar local selling apps, I focused on low-cost everyday items. Something you can do if you decide to sell on Facebook Marketplace is researching popular categories in your town (or the towns you plan on selling in). Don’t get analysis paralysis at this stage. Make an educated guess on what the demographic in your town would buy, buy it, list it, and see how it performs on various platforms. If the item is low cost or free, you really have nothing to lose. Below are the stats. for the categories that I sold.",
    "keywords": [
      "marketplace",
      "items",
      "sold",
      "growing",
      "ebay",
      "inventory",
      "facebook",
      "local",
      "buy",
      "selling",
      "apps",
      "80000"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------a8740501_55ee_4bff_8953_1ee939f17ef4-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------a8740501_55ee_4bff_8953_1ee939f17ef4-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------a8740501_55ee_4bff_8953_1ee939f17ef4-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------a8740501_55ee_4bff_8953_1ee939f17ef4-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------a8740501_55ee_4bff_8953_1ee939f17ef4-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/swlh/how-stealing-your-childrens-crayons-can-solve-your-ios-stackview-problems-c2aa5b707b02?source=extreme_main_feed---------0-74--------------------307c5c34_1a81_4031_a2a6_9aaa2c5c0579-------",
    "title": "How Stealing Your Children’s Crayons Can Solve Your iOS StackView Problems",
    "publish_date": "2020-10-16 02:34:06",
    "authors": [
      "Austin Ramsdale"
    ],
    "summary": "Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other.\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here.\nLuckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\nWe can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view.\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons.",
    "text": "Designing responsive and performant iOS apps can be a frustrating chore for new developers. Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other. Alternatively, designing user interfaces programmatically may be preferred, but can take years of mastery and an in-depth understanding of the underlying display engine; and we haven’t even considered the varying sizes and layouts!\n\nIf you’re having issues laying out your interface and getting it to play nicely with the various sizes and orientations, here are some quick tips using nested StackViews that may be able to help you organize and speed up your development process!\n\nFor this article, I am using a Swift recreation of the simple calculator, but you’ll notice that there are two key buttons that differ in size and orientation from the others — creating a complication with traditional stack views, and can be really problematic when using conventional constraints and expecting them to orient properly.\n\nSo how did I tackle this quickly and easily? As the title might suggest, grab any markers, pens, or crayons you may have at your disposal, and start by printing out a copy of the Storyboard. You can also design it on-screen, but for many (myself included), putting pen-to-paper helps to unlock that creative critical thinking that is sometimes needed to crack the visual code.\n\nTo start, I need to outline the largest “block” of interactive elements that I want to organize and manipulate. I’ve marked the corners in red, but instead of working from the outside in, I’m now going to look for the elements that need specific handling, focusing on fitting them into a balanced container, called a Stack View, and then working outwards.\n\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here. Additional information can be found in Apple’s “App Development with Swift” in section 2.1.\n\nAs you can see, the two elements we need to work with are the “0” button, which spans 2x the conventional button width (below button “1” and “2”), and the “=“ button, which inconveniently spans 2x the conventional button height. Luckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\n\nNow that I’ve identified the unique elements, we can see that the buttons fit into a larger chunk of blocks, outlined in green below. We can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view. Lastly, we need to distribute the “1” and “2” buttons evenly, so they share the space inside of the block.\n\nSimilarly, the “=“ , “3”, and “.” button share the lower right block. We create a vertical stack view and put the “=“ button on the right side, and we’ll nest an additional horizontal stack view on the left, putting the “3” in the top, and “.” In the bottom, with “Fill equally” as the distribution method here as well.\n\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons. This makes it a little easier, but it helps to create “balanced” or even blocks where possible.\n\nConveniently, the buttons fit in a 3x4 grid for both top and bottom, so I drew two larger encompassing blocks in blue around those segments, and labeled them “Upper Stackview” and “Lower Stackview”, respectively. You’ll notice that I’ve also started to fill-in other attributes in the margins, marking both the top and bottom blocks as “Fill equally” also (however, the bottom is wrong — it’s actually Fill proportionally, but more on that in a bit).\n\nNow, I simply need to group and space the remaining buttons, starting with drawing a box around the “4”, “5”, “6”, and “-“ buttons, placing them in a vertical stack view, and doing the same with the “Upper Stackview” (highlighted in orange).",
    "keywords": [
      "blocks",
      "stealing",
      "buttons",
      "view",
      "problems",
      "childrens",
      "crayons",
      "button",
      "elements",
      "views",
      "stackview",
      "need",
      "vertical",
      "solve",
      "ios",
      "conventional",
      "stack"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------2-74--------------------307c5c34_1a81_4031_a2a6_9aaa2c5c0579-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------307c5c34_1a81_4031_a2a6_9aaa2c5c0579-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/javascript-in-plain-english/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6?source=extreme_main_feed---------4-73--------------------307c5c34_1a81_4031_a2a6_9aaa2c5c0579-------",
    "title": "11 Frontend tricks that most Frontend Developers don’t know about",
    "publish_date": "2020-10-14 19:17:01",
    "authors": [
      "Daniel Anderson"
    ],
    "summary": "Datalist elementOne HTML element that you don’t see used much at all and for no reason!\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements.\nYou will see a drop-down list of pre-defined options as you type.\n<datalist>Example:<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\"><option value=\"Cat\"><option value=\"Dog\"><option value=\"Chicken\"><option value=\"Cow\"><option value=\"Pig\"></datalist>",
    "text": "1. Datalist element\n\nOne HTML element that you don’t see used much at all and for no reason!\n\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements. You will see a drop-down list of pre-defined options as you type.\n\n<datalist>\n\nExample:\n\n<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\">\n\n<option value=\"Cat\">\n\n<option value=\"Dog\">\n\n<option value=\"Chicken\">\n\n<option value=\"Cow\">\n\n<option value=\"Pig\">\n\n</datalist>",
    "keywords": [
      "dont",
      "tag",
      "11",
      "datalist",
      "valuecatoption",
      "valuepigdatalist",
      "reasonthe",
      "frontend",
      "know",
      "valuedogoption",
      "valuecowoption",
      "developers",
      "typedatalistexampleinput",
      "tricks",
      "valuechickenoption",
      "used"
    ]
  },
  {
    "url": "https://medium.com/@OfcrACab/confessions-of-a-former-bastard-cop-bb14d17bc759?source=extreme_main_feed---------6-73--------------------307c5c34_1a81_4031_a2a6_9aaa2c5c0579-------",
    "title": "Confessions of a Former Bastard Cop",
    "publish_date": "2020-06-11 00:21:39",
    "authors": [
      "Officer A. Cab"
    ],
    "summary": "So, before I give some suggestions, let me tell you what probably won’t solve the problem of bastard cops:Increased “bias” training.\nPolice officers do not protect and serve people, they protect and serve the status quo, “polite society”, and private property.\nVery frequently, the officers sent to “protect the community” escalate this crisis and ultimately wound or kill the person.\nInstead of letting Fox News fill your head with nightmares about Hispanic gangs, ask the Hispanic community what they need to thrive.\nIf you truly desire safety, ask not what your most vulnerable can do for the community, ask what the community can do for the most vulnerable.",
    "text": "HOW DO YOU SOLVE A PROBLEM LIKE A BASTARD?\n\nSo what do we do about it? Even though I’m an expert on bastardism, I am not a public policy expert nor an expert in organizing a post-police society. So, before I give some suggestions, let me tell you what probably won’t solve the problem of bastard cops:\n\nIncreased “bias” training. A quarterly or even monthly training session is not capable of covering over years of trauma-based camaraderie in police forces. I can tell you from experience, we don’t take it seriously, the proctors let us cheat on whatever “tests” there are, and we all made fun of it later over coffee.\n\nTougher laws. I hope you understand by now, cops do not follow the law and will not hold each other accountable to the law. Tougher laws are all the more reason to circle the wagons and protect your brothers and sisters.\n\nTougher laws are all the more reason to circle the wagons and protect your brothers and sisters. More community policing programs. Yes, there is a marginal effect when a few cops get to know members of the community, but look at the protests of 2020: many of the cops pepper-spraying journalists were probably the nice school cop a month ago.\n\nPolice officers do not protect and serve people, they protect and serve the status quo, “polite society”, and private property. Using the incremental mechanisms of the status quo will never reform the police because the status quo relies on police violence to exist. Capitalism requires a permanent underclass to exploit for cheap labor and it requires the cops to bring that underclass to heel.\n\nInstead of wasting time with minor tweaks, I recommend exploring the following ideas:\n\nNo more qualified immunity. Police officers should be personally liable for all decisions they make in the line of duty.\n\nNo more civil asset forfeiture. Did you know that every year, citizens like you lose more cash and property to unaccountable civil asset forfeiture than to all burglaries combined? The police can steal your stuff without charging you with a crime and it makes some police departments very rich.\n\nBreak the power of police unions. Police unions make it nearly impossible to fire bad cops and incentivize protecting them to protect the power of the union. A police union is not a labor union; police officers are powerful state agents, not exploited workers.\n\nRequire malpractice insurance. Doctors must pay for insurance in case they botch a surgery, police officers should do the same for botching a police raid or other use of force. If human decency won’t motivate police to respect human life, perhaps hitting their wallet might.\n\nDefund, demilitarize, and disarm cops. Thousands of police departments own assault rifles, armored personnel carriers, and stuff you’d see in a warzone. Police officers have grants and huge budgets to spend on guns, ammo, body armor, and combat training. 99% of calls for service require no armed response, yet when all you have is a gun, every problem feels like target practice. Cities are not safer when unaccountable bullies have a monopoly on state violence and the equipment to execute that monopoly.\n\nOne final idea: consider abolishing the police.\n\nI know what you’re thinking, “What? We need the police! They protect us!” As someone who did it for nearly a decade, I need you to understand that by and large, police protection is marginal, incidental. It’s an illusion created by decades of copaganda designed to fool you into thinking these brave men and women are holding back the barbarians at the gates.\n\nI alluded to this above: the vast majority of calls for service I handled were theft reports, burglary reports, domestic arguments that hadn’t escalated into violence, loud parties, (houseless) people loitering, traffic collisions, very minor drug possession, and arguments between neighbors. Mostly the mundane ups and downs of life in the community, with little inherent danger. And, like I mentioned, the vast majority of crimes I responded to (even violent ones) had already happened; my unaccountable license to kill was irrelevant.\n\nWhat I mainly provided was an “objective” third party with the authority to document property damage, ask people to chill out or disperse, or counsel people not to beat each other up. A trained counselor or conflict resolution specialist would be ten times more effective than someone with a gun strapped to his hip wondering if anyone would try to kill him when he showed up. There are many models for community safety that can be explored if we get away from the idea that the only way to be safe is to have a man with a M4 rifle prowling your neighborhood ready at a moment’s notice to write down your name and birthday after you’ve been robbed and beaten.\n\nYou might be asking, “What about the armed robbers, the gangsters, the drug dealers, the serial killers?” And yes, in the city I worked, I regularly broke up gang parties, found gang members carrying guns, and handled homicides. I’ve seen some tragic things, from a reformed gangster shot in the head with his brains oozing out to a fifteen year old boy taking his last breath in his screaming mother’s arms thanks to a gang member’s bullet. I know the wages of violence.\n\nThis is where we have to have the courage to ask: why do people rob? Why do they join gangs? Why do they get addicted to drugs or sell them? It’s not because they are inherently evil. I submit to you that these are the results of living in a capitalist system that grinds people down and denies them housing, medical care, human dignity, and a say in their government. These are the results of white supremacy pushing people to the margins, excluding them, disrespecting them, and treating their bodies as disposable.\n\nEqually important to remember: disabled and mentally ill people are frequently killed by police officers not trained to recognize and react to disabilities or mental health crises. Some of the people we picture as “violent offenders” are often people struggling with untreated mental illness, often due to economic hardships. Very frequently, the officers sent to “protect the community” escalate this crisis and ultimately wound or kill the person. Your community was not made safer by police violence; a sick member of your community was killed because it was cheaper than treating them. Are you extremely confident you’ll never get sick one day too?\n\nWrestle with this for a minute: if all of someone’s material needs were met and all the members of their community were fed, clothed, housed, and dignified, why would they need to join a gang? Why would they need to risk their lives selling drugs or breaking into buildings? If mental healthcare was free and was not stigmatized, how many lives would that save?\n\nWould there still be a few bad actors in the world? Sure, probably. What’s my solution for them, you’re no doubt asking. I’ll tell you what: generational poverty, food insecurity, houselessness, and for-profit medical care are all problems that can be solved in our lifetimes by rejecting the dehumanizing meat grinder of capitalism and white supremacy. Once that’s done, we can work on the edge cases together, with clearer hearts not clouded by a corrupt system.\n\nPolice abolition is closely related to the idea of prison abolition and the entire concept of banishing the carceral state, meaning, creating a society focused on reconciliation and restorative justice instead of punishment, pain, and suffering — a system that sees people in crisis as humans, not monsters. People who want to abolish the police typically also want to abolish prisons, and the same questions get asked: “What about the bad guys? Where do we put them?” I bring this up because abolitionists don’t want to simply replace cops with armed social workers or prisons with casual detention centers full of puffy leather couches and Playstations. We imagine a world not divided into good guys and bad guys, but rather a world where people’s needs are met and those in crisis receive care, not dehumanization.\n\nHere’s legendary activist and thinker Angela Y. Davis putting it better than I ever could:\n\n“An abolitionist approach that seeks to answer questions such as these would require us to imagine a constellation of alternative strategies and institutions, with the ultimate aim of removing the prison from the social and ideological landscapes of our society. In other words, we would not be looking for prisonlike substitutes for the prison, such as house arrest safeguarded by electronic surveillance bracelets. Rather, positing decarceration as our overarching strategy, we would try to envision a continuum of alternatives to imprisonment-demilitarization of schools, revitalization of education at all levels, a health system that provides free physical and mental care to all, and a justice system based on reparation and reconciliation rather than retribution and vengeance.” (Are Prisons Obsolete, pg. 107)\n\nI’m not telling you I have the blueprint for a beautiful new world. What I’m telling you is that the system we have right now is broken beyond repair and that it’s time to consider new ways of doing community together. Those new ways need to be negotiated by members of those communities, particularly Black, indigenous, disabled, houseless, and citizens of color historically shoved into the margins of society. Instead of letting Fox News fill your head with nightmares about Hispanic gangs, ask the Hispanic community what they need to thrive. Instead of letting racist politicians scaremonger about pro-Black demonstrators, ask the Black community what they need to meet the needs of the most vulnerable. If you truly desire safety, ask not what your most vulnerable can do for the community, ask what the community can do for the most vulnerable.",
    "keywords": [
      "world",
      "officers",
      "members",
      "community",
      "protect",
      "confessions",
      "need",
      "cops",
      "society",
      "bastard",
      "system",
      "cop",
      "ask"
    ]
  },
  {
    "url": "https://psiloveyou.xyz/8-borderline-magical-things-that-happen-when-youre-in-the-right-relationship-7b741ecd8c4?source=extreme_main_feed---------7-73--------------------307c5c34_1a81_4031_a2a6_9aaa2c5c0579-------",
    "title": "8 Borderline Magical Things That Happen When You’re In The Right Relationship",
    "publish_date": "2020-10-01 12:12:21",
    "authors": [
      "Thought Catalog"
    ],
    "summary": "When you’re in the right relationship, being together feels like a natural thing.\nIn the right relationship, one of the predominant things you’re going to experience is the feeling of being genuinely safe.\nWhen you find the right relationship, it often serves as an important reminder that you were on the right path all along.\nHowever, the right relationship will also do something even more profound than that, which is finding your inner joy.\nThat in itself is one of the most astounding differences between the right relationship and the wrong one.",
    "text": "You often don’t know you’re in the wrong relationship… until you’re in the right one.\n\nThat’s the wild thing about love: you think you know what it is until you meet someone who redefines it for you entirely. You learn that it does change you, it does make everything better, and it was worth waiting for.\n\nAnd you learn a lot of other important things along the way, too. Here, a few that you only experience when you’re with the person you want and need to be with:\n\n1. It feels effortless.\n\nYes, commitment requires effort. Love is a verb after all. But what most people don’t tell you is that in the right relationship, all that doing of love feels more effortless than not.\n\nWhen you’re in the right relationship, being together feels like a natural thing. Choosing each other seems inevitable, as though there’s nothing else you could imagine doing. Yes, it’s a lot to keep up with, but there’s an element of flow that sets this relationship apart from the rest.\n\n2. You feel closer after you argue, surer that you want to try to make it work.\n\nIn Tiny Beautiful Things, Cheryl Strayed describes the differences between her two husbands as being slim, telling readers that they were both similar people whom she’s sure would get along “swimmingly” were they to meet.\n\nThe difference between the relationship that ended, and the one that lasted? When she and her current husband had a big fight, they came out on the other end wanting to change, wanting to be closer, wanting to make it work even more than before.\n\nThe question is not whether or not you will fight. Every couple fights, and probably more often than you assume. The question is whether you’ll end it and pulling away from each other, or trying to be better for each other.\n\n3. You regain confidence in every area of your life.\n\nIf there’s any such thing as a happily ever after, it most likely just refers to the seismic shift that happens when you meet someone with whom you genuinely, completely feel loved.\n\nYou don’t just retreat into your own enclave of passion and mutual obsession, neglecting every other part of your life. In the right relationship, every part of your life improves. In every way, you are thriving more than you were before.\n\n4. Comfort becomes even more appealing than passion.\n\nOf course, in the right relationship you need both of those things, but what you learn with the right person is that passion is cheap, and you can have it with a lot of people in your life.\n\nComfort, or the feeling as though you could spend every day alongside each other happily, friendship, compatibility… that’s what’s rare. And that’s what’s invaluable. And in the end, that’s what makes for a truly happy coexistence.\n\n5. You heal childhood wounds.\n\nIn the right relationship, one of the predominant things you’re going to experience is the feeling of being genuinely safe. Often, this leads to one’s “inner child” coming back out. Sometimes, this plays out as a couple seeming giddy, almost kid-like in their affections for one another. Other times, this plays out as people projecting their deepest traumas onto their partner.\n\nRegardless, what happens when you feel genuinely safe and loved is that you start working through your deepest seated issues. You mend and shift relationships with your parents. You feel less scared, or anxious about the unknown. Being with this person makes you feel free enough to explore that which you’ve suppressed for so long, and the effect is transformative.\n\n6. You begin to trust the timing of your life.\n\nWhen you’re young before you can really see how or when or even if things are going to work out for you, it’s easy to wind yourself into a ball of anxiety worrying about the what ifs and what nows.\n\nWhen you find the right relationship, it often serves as an important reminder that you were on the right path all along. That the love that didn’t work out before didn’t need to work out. That everything would be okay if you could only relax into life a little more, and let it happen.\n\n7. You find your joy again.\n\nMany people think that finding love will make them rediscover their romantic selves, and it does… for a time. However, the right relationship will also do something even more profound than that, which is finding your inner joy.\n\nThe right relationship will make you feel the way you did when you were young and openhearted. But more importantly, it will make you feel this way even when you are not physically with that person.\n\nThat in itself is one of the most astounding differences between the right relationship and the wrong one. The right one makes you happy all the time. The wrong one only makes you happy when you’re with that person.\n\n8. You feel completely different, and yet more yourself than ever before.\n\nYou shouldn’t have to change for love, but love should change you naturally. That’s part of its magic.\n\nIn the right relationship, you will feel as though you are somehow totally different than you were before, and yet more like yourself than ever. You will feel like so much has changed, and the things that have remained show you what’s really important.\n\nThe love of your life is not just someone with whom you can make gooey eyes at for the rest of eternity. That person becomes your closest, most driving and influential force. The right person’s influence makes your life all that you ever wanted it to be… even outside of romance.",
    "keywords": [
      "life",
      "way",
      "borderline",
      "makes",
      "relationship",
      "happen",
      "feel",
      "things",
      "work",
      "right",
      "youre",
      "love",
      "magical"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/the-growth-hack-that-took-us-from-0-to-11m-in-3-years-b51a109db487?source=extreme_main_feed---------8-73--------------------307c5c34_1a81_4031_a2a6_9aaa2c5c0579-------",
    "title": "The Growth Hack That Took Us From $0 to $11M in 3 Years",
    "publish_date": "2020-10-13 07:22:07",
    "authors": [
      "Simon P"
    ],
    "summary": "The Growth Hack That Took Us From $0 to $11M in 3 YearsHere’s how we did itPhoto by Jakob Owens on UnsplashI started at the fintech company I’m currently working at about 2 and a half years ago.\nIt’s just a journal I take every single day that will be mostly illegible to anyone else who reads it.\nEvery single day at 4pm I go into my diary and mark off tasks completed.\nI make it a mission to mark off at least one task every single day for projects that are currently on the go.\nFind out where the gold lies, and commit to striking your spade into the ground every single day until you get there.",
    "text": "The Growth Hack That Took Us From $0 to $11M in 3 Years\n\nHere’s how we did it\n\nPhoto by Jakob Owens on Unsplash\n\nI started at the fintech company I’m currently working at about 2 and a half years ago. The company is just over 3 years old, and was founded by two guys who had very little experience in the industry.\n\nThe one thing they did have, which has propelled the business forward year on year, is a bias for action.\n\nI was employee number 3, meaning I’ve been there for almost the entire ‘useful’ life of the business. My first month was the first month the business generated any revenue.\n\nAs a digital marketplace, our company now sits in a very healthy position. We have extremely strong and wide-ranging distribution on one side (demand) and a diverse supply side which covers the demand of almost the entire customer base.\n\nThere is also a valuable moat surrounding the business. Because we have agreements with almost all financial services providers in our country, as well as a powerful distribution model to make those relationships successful, it is very difficult for an incumbent to take us on. And if they do, we have got an almost insurmountable head start.\n\nThis is a story of how the company started, and got to where it is today, with one tool at it’s core: Action.\n\nDeveloping a Bias for Action\n\nI’ll never forget my first day.\n\nI joined after about a 2-month back-and-forth where the co-founders and I tried to work out a good fit. I was working for myself at the time, in my own business, and making my own hours. I was living the entrepreneurial dream!\n\nEventually convinced of the company’s trajectory, and the opportunity for personal growth, I joined the team. I arrived on my first day (of my first formal job) and sat at my desk, opened up (my own — no company-issued laptops back then!) my laptop.\n\nI looked across my desk and asked “Where do I start?”\n\n“We need 5000 applications a month to make this work, can you start with that please.”\n\n“How many do we currently have?”\n\n“None.”\n\n“Cool.”\n\nI started the only way I knew how, I attacked the problem head on, and went and stood on a busy street corner outside a university in the area (our target market) and gave away free stuff (students love free stuff). I asked them to sign up, and refer friends for a reward (airtime and data). When there were people who I sensed I could engage with further, I asked them about our product and how it resonated with them.\n\nWhat features did they like and not like? What would make them more likely to refer a friend; A genuinely useful product, or some sort of reward?\n\nThis process worked. I used it to remotely hire students from other universities to do the same thing on campuses around the country. In my first month, we grew to just over 4000 users.\n\nI missed my goal.\n\nI went back to the office on the next Monday dejected. The two other’s looked at me and laughed; “We didn’t expect you to even get 500 — it’s your first month of work.”\n\nMy probation period was ended there, and they offered me a contract. Employee number 3(officially!).\n\nWe’ve used those very same principles in our every day operations and new employee onboarding process: Always maintain a bias for action.\n\nJump out the aeroplane first, and find out how the parachute works on the way down. Whatever you do, make sure you jump!\n\nTaking on Daunting Tasks\n\nOne of the biggest hinderances to action is facing a big, hairy, daunting task that seems almost insurmountable. How can I ever get that done?\n\nThe best weapon in my arsenal for this is “Divide and Conquer”. Let’s use the example from above: 5000 users a month.\n\n20 working days a month. That’s roughly 250 users per working day. Estimating a sign-up conversion rate of 30 percent, I need to be reaching around 850 people a day. Or about 100 an hour. Clearly, I can’t do that on my own. But the effort required to setup a network of people to do it is substantial. And we don’t know what works yet.\n\nSo I just started. I knew any progress I made was not progress wasted, and I would learn invaluable lessons about what would help me scale my methodology. And it did. In the first two weeks, I only reached about 420 sign-ups. Not good in the face of my 5000-user goal.\n\nBut after two weeks, I knew what worked, and I was able to pass those lessons onto other people who could scale the process.\n\nThe best way to make your way through daunting tasks is to take the absolute smallest step possible. You’ll find that just making a small amount of progress starts the momentum snowball that will set you on your way. Improving a reading habit? Commit to reading just one word every single night. Want to get out an exercise more? Commit to putting just one upbeat song on your speaker, before deciding whether to lace up those trainers or not.\n\nIt sounds trivial, but making the barrier to starting as low as possible is the key.\n\nTracking Progress\n\nPart of becoming — and staying — action orientated is being aware of two things:\n\nHow your progress is tracking, and Whether your progress is making a difference in terms of your long term strategy.\n\nUsing the simple analogy of mining for gold, point 1 is how deep your hole is. How close are you to the gold?\n\nPoint 2 is, are you digging in the right area? Is your hole headed for a place where the gold is buried? Are you digging multiple shallow holes, or one deep hole?\n\nTracking your progress keeps you accountable, and on track.\n\nI keep track of my progress in a daily diary. It’s just a journal I take every single day that will be mostly illegible to anyone else who reads it. In my diary, I have two sections:\n\nBig projects/goals Daily dump\n\nThe big projects and goals section lists everything on my plate at the moment, siloed by what project/goal they are a part of. In those projects and goals, I have a list of all the items that I have already completed, as well as what my next steps are, and where I am in the next steps.\n\nEvery single day at 4pm I go into my diary and mark off tasks completed. I make it a mission to mark off at least one task every single day for projects that are currently on the go. So when I’m planning next steps, I make sure that the tasks are something I can complete in one day (low barrier to start!).\n\nThe Daily Dump is just a place where I spill my mind. It helps me to clear bandwidth for the tasks that matter. It’s normally one or two lines, but sometimes I write for half an hour.\n\nGrowth Hacking through Action\n\nThe number one thing that will set your business apart from everyone else, is action.\n\nThere are few things I am unwavering on. This is one of them. If you want to have a successful business in the long term, you need to be willing to take action every single day that is going to move that business forward.\n\nHere’s how we do it.\n\nWe have a long term strategy in place. It answers this question: What does this business look like in 20 years? It’s not a “How much are we worth” type question, it’s a “Where are we in our industry, and what problem do we solve”. That gets broken down into the next 5 years ahead of us. To meet that goal, what does the next five years look like? That gets further broken down into one-year time-frames. Specifically, the year ahead of us. What goals do we need to meet in the next 12 months to set us on that path. Every year we review. How did we track this year, and how does that change our five-year trajectory? Then the next year’s goals are set. Those goals are outlined as outcomes. We need to achieve x, y and z in order to meet the targets which will lead to those outcomes. The outcomes then have key achievable’s assigned to them. What needs to be ticked off for these to be a reality. Those are assigned to leaders in the team, and it is their responsibility to make them a reality. Each leader then aligns resources, and sets out a plan for achieving their squad’s outcomes. It gets down to a granular level where each individual in the organization knows what their plan is for the next two weeks.\n\nThink of it as a waterfall of actionable steps.\n\nAlong the way, everyone is aware of the big vision. That’s important. Everyone knows the reason they’re completing this medial task on a Monday morning is because our company is headed up that mountain, and it’s a necessary rock that we have to jump today.\n\nDeveloping a bias for action is one of the most important things I’ve learnt in the last 5 years. It’s an invaluable tool for any entrepreneur to have in their arsenal. Find out where the gold lies, and commit to striking your spade into the ground every single day until you get there. Chances are, when you arrive, no one else would have had the persistence to get there, and the bounty will be yours.",
    "keywords": [
      "11m",
      "day",
      "way",
      "company",
      "month",
      "hack",
      "took",
      "progress",
      "goals",
      "single",
      "need",
      "working",
      "business",
      "growth"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------e17246f1_4706_4d59_97b7_1b17fbd6e0cf-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------e17246f1_4706_4d59_97b7_1b17fbd6e0cf-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------e17246f1_4706_4d59_97b7_1b17fbd6e0cf-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------e17246f1_4706_4d59_97b7_1b17fbd6e0cf-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------e17246f1_4706_4d59_97b7_1b17fbd6e0cf-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://williamfleitch.medium.com/there-will-be-no-laughing-on-election-night-3d1d498afc38?source=extreme_main_feed---------1-74--------------------9fbf468f_a794_41bf_b498_14afc0edded9-------",
    "title": "There Will Be No Laughing on Election Night",
    "publish_date": "2020-10-13 20:34:19",
    "authors": [
      "Will Leitch"
    ],
    "summary": "But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off.\nBut one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000.\nAlready cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious.\nThere is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified.\nBut I damn sure know it won’t be funny.",
    "text": "NBC\n\nIn November 2000, I fell asleep to Al Gore being declared the next president, woke up to George W. Bush having won, and by lunchtime no one had any idea who had won or what was going on. What I remember the most is finding the whole thing very funny. And it was funny.\n\nI know now that being able to find such chaos amusing was a privilege, and an ugly one, of being an aimless but mostly comfortable white kid in his early 20s. One can argue about the specific differences of how the world would have turned out had Al Gore become president instead of George W. Bush, but there’s no question there were definite differences. But if you followed the race in 2000, this was not what everybody thought. I covered protests at the Democratic National Convention in Los Angeles that year — the same one Barack Obama couldn’t even get into — and the one thing every protestor believed, along with most young Gen Xers like myself, was that it didn’t matter whether the next president was Bush or Gore: They were two variations of the same flavor. That the race ended up so close sure didn’t feel like an accident. If you ask 300 million people whether they’d prefer two nickels or a dime, you shouldn’t be surprised when the results are 50–50. The madness that followed the close vote felt not like a moment of democratic peril. It felt like the logical conclusion to an incredibly stupid process. You just had to laugh.\n\nWhile watching 537 Votes, a new documentary about the 2000 Florida recount (and specifically the Miami-Dade county non-recount) that airs on HBO on October 21, I was reminded that it wasn’t just snarky former grunge kids who thought all this was ridiculous. The documentary itself is mediocre, more interested in cheap nostalgia and sight gags than the psychology of the era (director Billy Corben of Cocaine Cowboys has a persistent habit of dressing up his films with gimmicks rather than trusting his story to tell itself), but its ability to mine cultural artifacts of that time is remarkable. There’s a ton of clips from The Daily Show, and they each make a strong argument that the smugness that ultimately drove us all away from Jon Stewart was there from the get-go. There’s a reminder that Craig Kilborn used to host a late-night talk show. And there is a Wanda Sykes riff on Florida that is even rawer and more cutting 20 years later. But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off. Seriously, they found all of this hilarious. The most famous voice that night was Dan Rather and all his goofy homespun sayings—“If a frog had side pockets, he’d carry a hand gun”—but everyone was yucking it up. Second place was Tim Russert, the evening’s breakout star, with his whiteboards and his red states and blue states, with a big giddy grin on his face throughout, even at 3:17 a.m., like this was the most fun he’s ever had in his life. Isn’t this a blast? You hear the crew cackling off stage. What a night!\n\nIt sure seems less funny now.\n\nThere are many, many ways that 2020 is worse than 2000. (Sheesh, in 2000, Joe Rogan was just that guy from “NewsRadio.”) As Clare Malone pointed out in a fantastic piece for FiveThirtyEight, we’re a lot more polarized and a lot less likely to just give up and accept it if our preferred candidate loses in a tightly contested election. But one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000. Already cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious. There is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified. There is an awareness that if we are not careful about this democratic process, the whole thing could collapse.\n\nThere was none of that in 2000. It was all just a wacky story—this election is crazy close!—that was covered as if the stakes were a lot lower than they were. (Within three years, the NASDAQ collapsed, 9/11 happened and we were in multiple wars. The stakes turned out to be pretty freaking high.) What has changed, of course, is that we now know what a difference it can make when one candidate wins and one loses, that the entire nation is a fire just waiting for kindling, and that there are bad actors eager to pounce at the first sign of uncertainty. History will be made, and our anchors and analysts, by all accounts, understand how precise and meticulous they will need to be. And they understand, mostly, just how ungodly serious this is. And that’s where we’ve changed the most. In 2000, it felt like America would be around, and strong, forever, no matter who won, that the democratic process would do its job and we’d all be fine. Twenty years later, we’ve had 9/11 and endless wars and economic collapses and pandemics and Donald Trump. There are no illusions that America will just automatically land on its feet anymore. I don’t know how the networks, or the public, will react to what happens on November 3. But I damn sure know it won’t be funny.\n\nWill Leitch will be writing multiple pieces a week for Medium. He lives in Athens, Georgia, with his family, and is the author of five books, including the upcoming novel “How Lucky,” released by Harper next May. He also writes a free weekly newsletter that you might enjoy.",
    "keywords": [
      "sure",
      "2000",
      "lot",
      "night",
      "laughing",
      "democratic",
      "know",
      "thing",
      "election",
      "watching",
      "won"
    ]
  },
  {
    "url": "https://marquisele.medium.com/we-do-not-deserve-hospitals-abd8756d7bbf?source=extreme_main_feed---------2-74--------------------9fbf468f_a794_41bf_b498_14afc0edded9-------",
    "title": "We Do Not Deserve Hospitals",
    "publish_date": "2020-10-15 03:05:18",
    "authors": [
      "Marquisele Mercedes"
    ],
    "summary": "We Do Not Deserve HospitalsMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\nAt one point, I was sent to another room nearby that was a little larger and had no extra chairs.\nMy mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy.\nHave you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum?\nHas a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?",
    "text": "We Do Not Deserve Hospitals\n\nMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\n\nSource: Unsplash\n\nOn a night in my early teens, I went to the Pediatric Emergency Department at Montefiore’s Children’s Hospital for intense cramps. I was expecting my period in a few days, but had never felt that way before — like a heat lamp was burning into the meat of my pelvis.\n\nMy mother and I spent the better part of 9 hours in a tiny room with speckled vinyl floors and too-bright fluorescents. At one point, I was sent to another room nearby that was a little larger and had no extra chairs. My mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy. A nurse told me to undress from the waist down and wait for the doctor.\n\nMy doctor came in and asked me — in a few different ways — if I’d ever been “penetrated”. I had not and said so — repeatedly. She referenced the development of my body, implied the crudeness of the boys around me. It was an unsaid question, but one that still required an answer. “No,” I said, “I’ve never put anything in there.” She said “if you say so”, before telling me to lay down, scoot my butt towards the end of the examination table, and spread my legs so she could “take a look.”\n\nI didn’t know what that meant, but she was the doctor, so I did what she told me to do.\n\nHave you ever screamed “no!” and “stop!” at the top of your lungs while being penetrated by an unidentified object that scraped at your most intimate insides? Have you ever been told to “be still” and “hold on” like your pain was the most mundane thing that had ever happened? Have you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum? Have you ever redressed yourself afterwards with shaky hands and legs and raucously laughed about it to your mom who was just a few feet away getting a cup of water when she heard the tail-end of your screams? Has a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?\n\nI was sent home with instructions to take Motrin and “stay out of trouble”. My mother and I rode the bus while she angrily pondered on whether I was still a virgin. I wrapped my arms around my middle and tried to protect something that felt like pierced cellophane. The tests for STIs came back clean.",
    "keywords": [
      "sent",
      "doctor",
      "mother",
      "required",
      "penetrated",
      "hospitals",
      "stop",
      "wait",
      "told",
      "deserve",
      "room",
      "say"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------9fbf468f_a794_41bf_b498_14afc0edded9-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------4-73--------------------9fbf468f_a794_41bf_b498_14afc0edded9-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------5-73--------------------9fbf468f_a794_41bf_b498_14afc0edded9-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------6-73--------------------9fbf468f_a794_41bf_b498_14afc0edded9-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/the-ascent/how-to-make-enough-money-to-retire-in-the-next-5-years-6a7683ce5a16?source=extreme_main_feed---------7-73--------------------9fbf468f_a794_41bf_b498_14afc0edded9-------",
    "title": "How To Make Enough Money to Retire in the Next 5 Years",
    "publish_date": "2020-09-22 13:02:22",
    "authors": [
      "Tim Denning"
    ],
    "summary": "Take the money from your online business and pour it into cars and free drinks for attractive people you want to sleep with.\nWatch yourself lose your mind from all the money and the thought of it been taken away from you.\nTrade in the luxury life for a simple life that is enforced by how much money you have in your back pocket.\nServe people who have money, and who don’t have money.\nHave money allow you to buy back your time, instead of spending money on things that create a never-ending trail of debt.",
    "text": "1. Invest your money rather than save.\n\nSaving your money is stupid. Inflation will eat away at your money. You make money when you invest what you have in real assets.\n\n2. Understand the idea of purchasing power.\n\nGovernments print money to fight recessions, and fund wars. When they do, they take away the purchasing power of the money you have earned. The only way to repay the huge debt the US Government has racked up is by either: 1) Raising taxes 2) Printing money out of thin air.\n\nIncreasing taxes won’t repay the debt. That leaves option two which we’ve been doing as a global economy since 2008. You can overcome the attack on your purchasing power when you learn about inflation hedge assets.\n\n3. Lose all of your money.\n\nLet money show you another side to life. Start a business with your family. Choose a marketplace to sell on. Import goods from China. Buy low and sell high. Let the business become huge. Bring on investors and see that they are like having a boss whip you with a whip.\n\nBelieve you were destined to be a hot shot entrepreneur. Take the money from your online business and pour it into cars and free drinks for attractive people you want to sleep with. Become a total ass in the process. Treat people like absolute dirt. Tell poor people to work harder. Abuse random charities and tell them to stop asking for donations. Let your ego run your life.\n\nStart a second business using your overconfidence from the first business. Park your car each morning in the reserved car space for BMWs and Mercs only. Get out of the car and slam the door like a boss. Keep your head up so you look confident. Walk into the office and give advice to people twice your age. Take the intersection of luck and the rise of the internet for granted. Tell yourself you’re amazing and you built this empire because you’re brilliant.\n\nGo out on the weekends and try and pickup using your money. Flash $100 bills. Talk down to the bar staff. Tip service workers like they’re your slaves and you’re the emperor. Wear loafers that cost twice the weekly minimum wage of a person you call a ‘worker.’\n\nWhile all of this is going on, get greedy. Not just a little bit greedy. Treat your family like they serve you now. Don’t visit your grandparents or repair broken relationships with aunties and uncles. You’re too busy hustling and making money. Keep making the money. Watch the problems enter your life. Watch those problems get out of control.\n\nSee, in a matter of months, your money-making machine almost crumble because of one bad decision. Realize the end is near. Find yourself out on the streets late at night talking to your employees and predicting conspiracies. Watch yourself lose your mind from all the money and the thought of it been taken away from you. Watch your self-worth become your net-worth.\n\nShow up to the office one day and realize it’s all over. Say goodbye to the employees while you hold back tears. Pretend to be strong when you know you’re weak. Offer to give them references for their next job, knowing you’ll be lucky to find a job yourself.\n\nGo home when it’s all over. Sell the luxury car. Catch trains to visit friends. Learn what it’s like to have nothing. Check your bank account and see your savings evaporate fast. Trade in the luxury life for a simple life that is enforced by how much money you have in your back pocket. Accept the gift of an old car from a kind family member you neglected when you had your business.\n\nDrive their car back to your empty home. Pick up the car cleaning accessories you had for your BMW. Take the car down to the local car wash and see if you can shine it into something that resembles the BMW. Watch your worst nightmare, a big spider, jump out from underneath the car. Scream at the top of your voice and then watch it crawl away.\n\nFinish cleaning the car and notice how it hasn’t morphed into anything you could imagine in your dreams. Feel slightly grateful you even have a car for a few brief moments.\n\nReturn home and look for a job. Apply for everything. Watch the phone never ring and the thought of moving in with distant family, to survive, become a reality. Keep trying. Pick up the phone one Monday morning and talk to a nice lady named Fiona on the other end. Say hi and pretend to be okay when you’re not okay. Say yes to the job interview knowing something is wrong… you feel sick.\n\nSee the doctor. Try and find out what is wrong with you. Try all of their suggestions: a change in diet, fructose tests, colon inspections. Roll up the following week for the job interview. Have the thought of presenting your failed business journey almost bring you to tears. Watch your hands shake and feel the sweat drip down your back and stink out the interview room.\n\nGet a call saying you made it. You got a job in a call center working for a bank. Notice the contrast between making loads of money and earning minimum wage. Work at the bank for eight years. Learn about how money works. Serve people who have money, and who don’t have money.\n\nSpend your time after work learning about different assets: stocks, real estate, gold, digital currencies, bonds, cash. Apply the knowledge and invest what you earn. Take the money you earn from being a part-time writer and invest it, too. Feel like you’re smart with money. Watch the money grow. Make enough money to cover all of your expenses for a year, in advance. Feel no different.\n\nSimultaneously, work on yourself. Face your inner demons. Get help. Face mental illness too. Be kind to yourself. Realize you’re doing the best you can. Forgive yourself for your messy past, where you acted like a dictator with too much money. Say sorry to the people you hurt. Forgive people who you banned for life because they violated one of your rules. Forgive people for no reason at all.\n\nLook at what makes you happy now: family, your partner, messages from readers, mending of broken relationships.\n\nFeel what it’s like not to run towards money. Notice how fancy cars, houses and luxury goods have zero appeal to you. Take the simple things in life and let them change your life.\n\nHave money allow you to buy back your time, instead of spending money on things that create a never-ending trail of debt. Make the acquisition of wealth secondary. Focus on how you can be helpful. Get excited by all the people you can meet and do life with.\n\nLearn to make a difference rather than a profit.\n\n4. Become a content creator.\n\nContent creators are part of one of the biggest wealth transfers in history. Everything is content. Storytelling through words, videos, audio, photography and illustrations is a booming business.",
    "keywords": [
      "life",
      "family",
      "job",
      "retire",
      "car",
      "money",
      "watch",
      "feel",
      "work",
      "business",
      "youre"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/steve-jobss-definition-of-smart-will-make-you-rethink-your-actions-6b1d7873fd46?source=extreme_main_feed---------8-73--------------------9fbf468f_a794_41bf_b498_14afc0edded9-------",
    "title": "Steve Jobs’s Definition of “Smart” Will Reprogram Your Idea of Intelligence",
    "publish_date": "2020-09-10 17:51:04",
    "authors": [
      "Alan Trapulionis"
    ],
    "summary": "Steve Jobs: “You have to not have the same bag of experiences as everyone else does”Recently, I’ve come across a video where a young Steve Jobs explains a key characteristic of what he considers to be a smart person.\nHow do you increase your intelligence to become what Jobs considers to be a “smart” person?\nAccording to the visionary — it’s all about having unique life experiences.\nOn Ferriss’s podcast, Lütke went in-depth about the books that changed his life — carefully describing each one of them.\nBooks are the easiest way for introverts to gather unique insights that shape their own worldview.",
    "text": "Steve Jobs: “You have to not have the same bag of experiences as everyone else does”\n\nRecently, I’ve come across a video where a young Steve Jobs explains a key characteristic of what he considers to be a smart person.\n\nI expected to hear something among the lines of “thinking out of the box” and “unflinching dedication.” Instead, I discovered one of the most profound pieces of advice I’ve ever heard.\n\n“A lot of [what it means to be smart] is the ability to zoom out, like you’re in a city and you could look at the whole thing from the 80th floor down at the city. And while other people are trying to figure out how to get from point A to point B reading these stupid little maps, you could just see it in front of you. You can see the whole thing.”\n\nJobs masterfully notes that smart people often make connections that seem obvious to them, but perplexing to others — simply because they have developed the skill of “zooming out” to get a better view of the big picture.\n\nThis, of course, sounds great and we can all agree that in order to change the world you need to clearly see the world. But how do you do that? How do you increase your intelligence to become what Jobs considers to be a “smart” person?\n\nAccording to the visionary — it’s all about having unique life experiences.\n\n“You have to not have the same bag of experiences as everyone else does, or else you’re gonna make the same connections and you won’t be innovative. […] You might want to think about going to Paris and being a poet for a few years. Or you might want to go to a third-world country — I’d highly advise that. Falling in love with two people at once. Walt Disney took LSD, do you know that?”\n\nIt makes sense. A 2015 study has concluded that openness to experience was the best predictor for “job performance in situations requiring creativity,” which is every entrepreneur’s bread and butter. It’s also safe to say that any significant career step up will require a decisive innovative move.\n\nThe study also found that extraversion “played a key role in contexts involving social interactions,” which is hardly a surprise, but a healthy reminder nonetheless. These findings tie in nicely with what Jobs said — people who are open to experience and extroverted will seek out the most interesting, non-standard situations in life — and gain invaluable perspectives as a result.\n\nJobs’ idea also helps explain why so many successful entrepreneurs are avid readers. Divyank Turakhia, a 35-year old Indian tech billionaire, has once said that since the age of 15 he has read for 800 hours a year, every year. Tobias Lütke, Shopify’s billionaire founder, was described by Tim Ferriss as one of the most aggressive readers he’d ever met.\n\nIt’s probably not the information itself that these leaders value about books, but rather how they change their perspective. On Ferriss’s podcast, Lütke went in-depth about the books that changed his life — carefully describing each one of them.\n\nBooks are the easiest way for introverts to gather unique insights that shape their own worldview. They expand your mental horizons, so it makes sense that someone who’s read 100 classic business books can spot a rising trend or a missed opportunity before anyone else.",
    "keywords": [
      "life",
      "youre",
      "world",
      "situations",
      "jobss",
      "books",
      "study",
      "unique",
      "intelligence",
      "idea",
      "jobs",
      "reprogram",
      "steve",
      "smart",
      "definition"
    ]
  },
  {
    "url": "https://medium.com/better-marketing/why-is-linkedin-such-a-cringefest-b2b29ca60833?source=extreme_main_feed---------9-73--------------------9fbf468f_a794_41bf_b498_14afc0edded9-------",
    "title": "Why Is LinkedIn Such a Cringefest?",
    "publish_date": "2020-09-01 18:54:04",
    "authors": [
      "Sean Kernan"
    ],
    "summary": "For example, Rule #1 of getting internet points (be hot), applies to LinkedIn, even if the post has no relation to the purpose of the platform.\nJust as an FYI, if you leave a comment on a LinkedIn post, it’s automatically going to show that post, with your comment highlighted, to a number of your connections.\nHe emailed me something to the effect of, “How’d you know that about that wolf post?” Then I explained it to him (I consume a lot of wildlife documentaries), and also explained my harsh tone.\nAuthor via LinkedinLove it or hate it, Linkedin is full of lurkers.\nLinkedIn has become a meme.",
    "text": "Why Do Such Trash Posts Go Viral?\n\nThere’s a couple of reasons.\n\nYes, short attention spans are a part of it. But, by far, the biggest contributor is that lots of users aren’t good at English. And I say that with no malice.\n\nMany non-native speakers see these posts and can’t see the nuance of why it’s terrible writing. But they recognize the simple verbs and nouns. They put the puzzle together and hail praise to the mighty turd.\n\nI can't blame them. I’d probably upvote a Spanish shitpost without knowing it.\n\nHere’s a tone-deaf example. This went super-viral:\n\nSource: author via linkedin\n\nNote on the above: they said they don’t want money but then later in the post say they want a salary increase.\n\nQuick side tip: don’t capitalize words unless there is a very specific reason. The tone can be interpreted as a bit hostile. Also, don’t ever write a post like that.\n\nMy theory is that any algorithm-based platform, including Medium, will eventually devolve into Facebook without some sort of intervention. Human beings don't know how to optimize for quality on their own.\n\nFor example, Rule #1 of getting internet points (be hot), applies to LinkedIn, even if the post has no relation to the purpose of the platform.\n\nCase in point:\n\nAuthor via Linkedin\n\nTheir English might be bad. But all men are fluent in thirst. Just as an FYI, if you leave a comment on a LinkedIn post, it’s automatically going to show that post, with your comment highlighted, to a number of your connections.\n\nIt won’t be great personal branding. I learned this first hand.\n\nI was messaged by my CEO after I left a frustrated comment on a post. You may recognize the post. It goes viral at least once a year.\n\nAuthor via ipinimig\n\nThere will always be thousands of comments about how amazing this meme is and how companies should be just like wolf packs.\n\nThe problem? That isn’t how wolf packs operate.\n\nThe alpha doesn’t just sit at the back and it’s ridiculous that this meme keeps getting recirculated. No, this fake-story isn’t a world-changing issue. It’s just annoying that people just make up science to fit a clicky narrative.\n\nI left a comment correcting it, perhaps a bit bluntly. My comment got buried in the cluttered sludge of fanboys. Unexpectedly, my CEO saw the comment.\n\nHe emailed me something to the effect of, “How’d you know that about that wolf post?” Then I explained it to him (I consume a lot of wildlife documentaries), and also explained my harsh tone.\n\nI’ll give you one last example. It is constantly going viral.\n\nSource: author via factcheck\n\nThis isn’t what happened. The baby on the right isn’t even the same baby. The girl on the right is the sister of the girl on the left.\n\nThe bigger point: we need to be careful about how we engage on these platforms. It’s super easy to look like a dumb-dumb because of all the blatantly false content that floats around.\n\nAdditionally, we need to be mindful of our ego. Resist the urge to flex post.\n\nAuthor via Linkedin\n\nLove it or hate it, Linkedin is full of lurkers. They are quick to judge. And many of those judgemental lurkers scan resumes for a living. Don’t be a cringe bot.\n\nLinkedIn has become a meme. But you don’t have to be part of it. Lest you join the annals of bad marketing.\n\nAnd men, enough with the thirst comments. It’s super weird. In the history of man, I don’t think they’ve ever led to anything good, particularly when your supervisor sees it.",
    "keywords": [
      "dont",
      "isnt",
      "cringefest",
      "thirst",
      "example",
      "linkedin",
      "comment",
      "post",
      "meme",
      "super",
      "wolf"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------fbdb3b53_fd8a_4b81_8fc4_8cfb9ab434f5-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------fbdb3b53_fd8a_4b81_8fc4_8cfb9ab434f5-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------fbdb3b53_fd8a_4b81_8fc4_8cfb9ab434f5-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------fbdb3b53_fd8a_4b81_8fc4_8cfb9ab434f5-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------fbdb3b53_fd8a_4b81_8fc4_8cfb9ab434f5-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://gen.medium.com/2020-has-been-bad-but-things-are-going-to-get-worse-2e083903b0f4?source=extreme_main_feed---------0-74--------------------2cce69df_c09d_4e44_8fc4_d833033e1fd9-------",
    "title": "2020 Has Been Bad. But Things Are Going to Get Worse.",
    "publish_date": "2020-10-15 16:16:45",
    "authors": [
      "Colin Horgan"
    ],
    "summary": "2020 Has Been Bad.\nBut Things Are Going to Get Worse.\nThe pandemic revealed our society’s failings.\nPhoto: Markus Spiske/UnsplashEarlier in 2020, as the lockdowns arrived, time started to feel warped.\nDisparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.",
    "text": "2020 Has Been Bad. But Things Are Going to Get Worse.\n\nThe pandemic revealed our society’s failings. We’re running out of time to fix them.\n\nPhoto: Markus Spiske/Unsplash\n\nEarlier in 2020, as the lockdowns arrived, time started to feel warped. We began to ask ourselves whether we were living in the past or the present or whether we were caught somewhere in between. This feeling of inertia was a function of recognizing a time lag between when the virus arrived and when we realized it was here.\n\nThe coronavirus case counts we saw updated every morning were already history — reality as it was two weeks prior. What was happening had already happened but also had not happened yet. Gradually, as the weeks and months followed, we learned more about the virus, including how long it had actually been around us — as well as how unprepared our society and our systems were for its arrival.\n\nThe pandemic has proven to be a clarifying force. While it will likely change some aspects of our society, before it does, it is first revealing what kind of a society we already had: one that is teetering on decaying foundations that have either gone unseen or have been deliberately ignored for decades.\n\nIn nearly every Western democracy it has hit, the pandemic has disproportionately affected people of color, the poor, and the elderly. Sometimes, like in the U.S., it’s hit them all. In short, the virus has shown us where our most egregious inequalities lie. Disparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.\n\nWe are living on a neglected structure, poorly constructed decades ago and then left largely unchecked. Even when we had the chance, after its near-collapse in 2008, to reassess the system, we didn’t bother and instead were steered for another decade in an ideological vacuum, maybe the last true product of late capitalist boredom. This long-standing failure to account for the obvious disparities at the heart of our society is probably why the pandemic will likely create a so-called K-shaped recession — one wherein “big companies and rich families have largely recovered, whereas mom-and-pops and the moms and pops who run them are living through a second Great Depression,” as Annie Lowrey wrote recently at The Atlantic.\n\nWe live every day under a looming sense of delayed inevitability. How long can it go on?\n\nThe mechanisms we have that ought to help us address those disparities, like politics, law, or journalism, have also been revealed to be heavily damaged. Our democracies are stressed, not from external enemies as much as from internal rot. Rebuilding them would require us to inhabit a shared reality. Thanks somewhat to our current acoustic information sphere dominated by platforms of fantasy, we don’t have one.\n\nThat lag time we noticed in the spring now feels more familiar, if not constant. We live every day under a looming sense of delayed inevitability. How long can it go on?",
    "keywords": [
      "bad",
      "2020",
      "long",
      "revealed",
      "disparities",
      "pandemic",
      "living",
      "going",
      "worse",
      "weeks",
      "virus",
      "society",
      "things",
      "sense"
    ]
  },
  {
    "url": "https://gen.medium.com/amy-coney-barretts-confirmation-could-cause-a-right-to-privacy-domino-effect-e0e721c2c36a?source=extreme_main_feed---------1-74--------------------2cce69df_c09d_4e44_8fc4_d833033e1fd9-------",
    "title": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect",
    "publish_date": "2020-10-15 18:07:16",
    "authors": [
      "Jill Filipovic"
    ],
    "summary": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino EffectIf there’s no right to privacy, a whole line of rulings goes out the windowAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation.\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion.\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\nIf Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it.",
    "text": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect\n\nIf there’s no right to privacy, a whole line of rulings goes out the window\n\nAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation. Photo: Pool/Getty Images\n\nIf there is one stunningly clear takeaway from the hearings to confirm Amy Coney Barrett to the Supreme Court, it’s this: Enjoy your rights to bodily sovereignty and sexual privacy while you have them. Because if Barrett is confirmed to the Supreme Court, they may not last long.\n\nSupreme Court confirmation hearings are often farcical displays. A nominee, chosen from among the finest legal minds in the land and auditioning for a job to write legal opinions that have the power to profoundly shape Americans’ lives, sits before the Senate Judiciary Committee and purports to have few opinions at all on the cases and issues that are the most controversial and oft-discussed inside the legal academy and out of it. But Barrett brings the dissembling and disingenuous refusal to answer direct questions to a new level. No Supreme Court nominee in memory has been so evasive. And where Barrett hedges the most are the biggest tells: on the Affordable Care Act, on presidential powers in elections, and on reproductive rights and sexual privacy.\n\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion. She has said so herself, joining the “pro-life” faculty group at Notre Dame Law School, and signing an ad that said, “It’s time to put an end to the barbaric legacy of Roe v. Wade and restore laws that protect the lives of unborn children.” That isn’t a statement of a personal view; that’s a demand for the courts to act. And if confirmed, Barrett will be one of the nine people in the country with the power to do what the letter she signed demands.\n\nShe has already shown us her intentions. President Donald Trump believes her. Senate Republicans believe her. We should believe her, too.\n\nDiscerning what Barrett will do if she is elevated to the court is made a little more complicated by the fact that Barrett suddenly refuses to speak about her views at all. Neither she nor the president nor her Republican proponents in the Senate want her to be too transparent on the abortion question. Roe v. Wade is, after all, the law of the land, and most Americans do not want it overturned. The election concludes in just 20 days — a clear argument against holding these hearings now, but one Republicans have disregarded. If Barrett answers honestly in the confirmation hearings — if she says that she believes Roe was wrongly decided — then Republicans are going to face a lot of demands to vote no on her confirmation, and have a lot of angry voters on their hands.\n\nAnd so instead, we are treated to this joke of a hearing, where we all pretend that Barrett doesn’t believe exactly what she has repeatedly said she believes.\n\nBarrett is not the first Supreme Court nominee to dodge the abortion question. But she is even less committal than most. Ruth Bader Ginsburg answered clearly in her confirmation hearings that she believes Roe was rightly decided; Sonia Sotomayor agreed that Roe was settled law. Barrett won’t do that.\n\nTo add insult to injury, Senate Republicans (and a few Democrats) have spent precious minutes fawning over Barrett’s family and her ability to have both a career and a large family, something men have done for centuries without much comment. Over and over, conservative senators called Barrett a role model or an inspiration for girls and women (as if boys and men can’t look up to a woman). There is something particularly pernicious about demanding that women laud Barrett, a woman more in the mold of anti-feminist Phyllis Schlafly than women’s rights trailblazer Ruth Bader Ginsburg, as an icon of female accomplishment and professional possibility. It’s no coincidence that in the wake of Roe v. Wade and earlier cases establishing a right to contraception access, American women surged toward greater independence, going to college and into the workforce in record numbers. The lessons of safe abortion and readily available contraception reverberate around the world: When women can plan their families, women thrive. We live longer. We are far less likely to die in childbirth, and our children are less likely to die, too. We are more likely to go to school; so are our daughters. We are less likely to be trapped in abusive relationships, and less likely to be stuck in poverty. Our families are more prosperous. Our communities are healthier.\n\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\n\nFeminists have fought long and hard for these rights — including for the right of women to choose to have large families, as Barrett has, even if they are not worth nearly $2.6 million, as Barrett is, but are instead struggling to keep their children safe and secure. Republicans and conservatives like Barrett have cheered on large (white) families, while refusing to do much of anything to help out when families struggle. Feminists have tried to clear the way for women to make their own reproductive choices — to have children or not, without state interference or professional discrimination. Barrett has benefited from that feminist work, which is why she is now in a position to undermine it. Being told that feminists and women generally should appreciate that and admire her is a hard pill to swallow.\n\nBarrett won’t be the first anti-abortion judge on the court (although if Republicans are looking for firsts, she would be the first staunchly anti-abortion woman). But her hostility to reproductive rights extends far beyond Roe and the right to abortion. In the hearings, Barrett couldn’t answer whether she believed Griswold v. Connecticut, the case that extended contraception access to married women, was rightly decided. We know that her mentor, Antonin Scalia, believed Griswold was indeed decided wrongly, and given the chance, would likely have overturned it. We know Barrett has said that, while she is her own woman, she believes Scalia got most of his decisions right. While Roe gets a lot of press, Griswold is at the heart of many of the court’s most significant decisions — it was the first case that fully laid out the right to sexual privacy, which has been understood since then to include the right of any woman to use contraception and have an abortion; the right of people of the same sex to have consensual intercourse; and the right of individuals to marry someone of the same sex. If Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\n\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it. And she’s right that it’s been a while since states have criminalized contraception. But they haven’t done that because abortion rights and Roe have taken the bulk of the focus of the anti-abortion movement. It’s worth noting, though, that most mainstream anti-abortion groups do not support contraception access; some are publicly opposed to it, and some falsely characterize common contraceptive methods as “abortifacients.” These same groups have pushed legislation that establishes personhood at the moment of conception, something at odds with the medical definition of pregnancy, but that could outlaw several of the most common and effective forms of birth control and even criminalize in-vitro fertilization. That’s all very far from an academic exercise. It is not “unthinkable.” It is, in fact, part of a well-thought-out plan. If Roe is overturned, there’s little to stop conservative groups from pressing forward and coming for contraception next — or marriage equality, or the right to have consensual intercourse with an adult of the same sex.\n\nThe message from Barrett’s confirmation hearing was clear: This is all on the line. She does not believe there is a constitutional right to sexual privacy. The question is whether the weight of the precedent — dozens of cases over five decades, millions of Americans who rely on what they believe to be their right to use contraception, end unwanted or dangerous pregnancies, have sex, and get married — will be enough to tip Barrett’s originalist scales toward upholding the law as it stands.\n\nBarrett showed us who she is: a woman who will not affirm even the least contested rights to sexual privacy and family planning. Which means even the least contested of those rights could be up for grabs with Barrett on the Supreme Court.",
    "keywords": [
      "barretts",
      "women",
      "confirmation",
      "effect",
      "cause",
      "barrett",
      "court",
      "griswold",
      "domino",
      "privacy",
      "rights",
      "amy",
      "coney",
      "hearings",
      "contraception",
      "right",
      "roe"
    ]
  },
  {
    "url": "https://elemental.medium.com/my-therapist-says-all-relationships-are-impossible-d4c61f7df249?source=extreme_main_feed---------2-74--------------------2cce69df_c09d_4e44_8fc4_d833033e1fd9-------",
    "title": "My Therapist Says All Relationships Are Impossible",
    "publish_date": "2020-10-14 05:32:29",
    "authors": [
      "Naveen Kumar"
    ],
    "summary": "My Therapist Says All Relationships Are ImpossibleIt’s okay to lose a friendshipThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement.\nMy therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!).\nMy therapist put it bluntly: “All relationships are impossible.”All relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\nLabels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\nThis type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences.",
    "text": "My Therapist Says All Relationships Are Impossible\n\nIt’s okay to lose a friendship\n\nThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement. In the decade we’ve known each other, I had always felt comfortable talking to him about my own experience of otherness as an Indian American. But when I pointed to his whiteness as a privilege he ought to examine, he grew defensive, blew up, and ghosted.\n\nI’m not someone who falls out with friends easily or often. The few times it has happened, my instinct is to ask, “How did I get myself into this?” or “Why didn’t I see this coming?”\n\nWhen any situation in my life goes awry, I tend to perseverate, fixating on how I might have caused it to fly off the rails. “Am I a bad judge of character?” I think. My therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!). But when it comes to the shock of a breakup, whether with a friend or a romantic partner, it’s the fantasy that we can ever fully know someone, or achieve a kind of perfect unity that’s to blame.\n\nMy therapist put it bluntly: “All relationships are impossible.”\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\nHis statement was one of those breakthrough moments when my jaw dropped and I felt an immediate sense of relief. The existentialism of it thrilled me, and its practical application made perfect sense. In every relationship, there will always come a conflict (likely many over time) that indicates an unbridgeable distance between two people. Labels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\n“A lot of the things that the world tells us about what a relationship is supposed to be present an ideal that everyone feels they’re failing to live up to,” says Jamieson Webster, PhD, a psychoanalyst in New York City and author of Conversion Disorder: Listening to the Body in Psychoanalysis. It’s not just that the messages we get from pop culture, about fairy tale romance and lifelong BFFs, are unrealistic. The very idea that any relationship, no matter how close, can make us less alone or separate from each other is perhaps the ultimate human fantasy.\n\n“Separation and difference are very hard, including the capacity to understand being alone,” Webster says. “There is so much fantasy that tries to cover over ‘aloneness,’ which is simply a factual reality.”\n\nWhen we’re able to more clearly understand our innate separateness, we can also more readily accept that personal differences are bound to arise in every relationship. The question then becomes how two people acknowledge the essential distance between them, communicate their feelings about it, and reach a mutual resolution that doesn’t attempt to paper over it. Sometimes it’s possible to bridge the gap and continue forward together; in other cases, it may be time to move on. “Whether with a friend or a partner, it’s about what you build on the basis of your differences,” Webster says. “Because you are two unique people with different histories and different pleasures and pains.”\n\nRecognizing the impossibility of a “perfect” relationship is also useful when we seek to build new ones. While swiping through dating profiles, for example, it’s easy to point to a picture you don’t particularly like or the fact that someone prefers cats over dogs as reasons why it would never work out. This type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences. How many potential connections have we cut off at the pass due to preconceived notions of compatibility?\n\nBreakups are hard, even and especially with close friends. But they’re also the surest way to recognize, and even honor, the truth of our individuality. “Breakups really propel people forward in terms of their development,” Webster says. “Whether it’s with friends or partners, a breakup is a time to recover yourself and find your separateness,” something you may have been struggling to find inside the relationship. That doesn’t mean we shouldn’t allow ourselves to feel hurt and disappointed, or take responsibility for our role in the process. But rather than frame a breakup as a personal failure, we can acknowledge it as a reflection of one of life’s most essential truths.",
    "keywords": [
      "differences",
      "partner",
      "therapist",
      "fantasy",
      "impossible",
      "friend",
      "relationship",
      "webster",
      "friends",
      "relationships",
      "perfect"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------2cce69df_c09d_4e44_8fc4_d833033e1fd9-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/fearless-she-wrote/we-should-be-ashamed-of-the-sexism-surrounding-the-murder-of-shanann-watts-904bc0fc0ef9?source=extreme_main_feed---------4-73--------------------2cce69df_c09d_4e44_8fc4_d833033e1fd9-------",
    "title": "We Should Be Ashamed of the Sexism Surrounding the Murder of Shanann Watts",
    "publish_date": "2020-10-13 16:37:33",
    "authors": [
      "Laura Fox"
    ],
    "summary": "We Should Be Ashamed of the Sexism Surrounding the Murder of Shanann WattsA pregnant woman was murdered by her husband.\nThe documentary is narrated by the victim Shanann Watts using audio and footage from her Facebook live streams.\nAny footage of her husband and murderer, Chris Watts, is from police body cams, cameras in the police interview rooms, and courtroom footage.\nChris Watts, husband of Shanann and father to Bella, Celeste, and Nico, eventually confessed to their murders, but not before trying to pin the blame on Shanann.\nWhy does a female murder victim have to be “perfect” in order to receive compassion?",
    "text": "We Should Be Ashamed of the Sexism Surrounding the Murder of Shanann Watts\n\nA pregnant woman was murdered by her husband. He went on to murder their two children. But somehow, she “drove him to it.”\n\nThe home of Shanann and where she was murdered. Image licensed for commercial use.\n\nSocial media has been buzzing with people’s reaction to the Netflix documentary American Murder: The Family Next Door. What sets this documentary apart from traditional murder documentaries is that it centers the victims in the story rather than the murderer. The documentary is narrated by the victim Shanann Watts using audio and footage from her Facebook live streams. Any footage of her husband and murderer, Chris Watts, is from police body cams, cameras in the police interview rooms, and courtroom footage.\n\nThe murder took place on August 13th, 2018. Shanann, who was pregnant at the time with a baby boy called Nico, was reported missing along with her two children, Bella,4, and Celeste, 3. Chris Watts, husband of Shanann and father to Bella, Celeste, and Nico, eventually confessed to their murders, but not before trying to pin the blame on Shanann. He insisted in police interviews that Shanann was the one who had killed their daughters and he killed her in retaliation.\n\nChris did not fully admit to what he had done until November 6th, 2018. In that time, social media was filled with people scrutinising Shanann’s Facebook page. Her parenting was criticised along with her personality. And despite the fact Chris would eventually admit that Shanann had not hurt their daughters, the internet still critcised her and tried to find ways of blaming her for Chris’s actions.\n\nI watched the documentary and found it impossible to hold back tears. Audio recordings were played of people calling her crazy, bossy, and highly strung. She was even called a bitch and people suggested she drove Chris to murder her and their children.\n\nThe public’s treatment of Shanann was disappointing, but not surprising. It’s true that Shanann seemed like the highly-strung one in the relationship. In one of her Facebook livestreams that was played in the documentary, she described herself as the more dominant one in the relationship and liked things a certain way.\n\nSomeone with these personality traits can be annoying sometimes. Shanann herself seemed aware of this. But do women deserve to be murdered for being bossy? No. Absolutely not. And the fact people were suggesting this was okay is extremely sexist.\n\nI can’t help but feel that if Shanann had been a man with these personality traits, she would have been seen as ambitious, hardworking, assertive, and the leader of her family. But because she was a woman, these traits were labeled as bossy, highly strung, and crazy.\n\nVictim blaming women is nothing new\n\nThe hashtag #iwasblamed was trending on Twitter earlier this year in response to an article where Sabrina Lekaj, who was stabbed to death, was painted in a negative light. Her murderer, Petrit Lekaj, was painted in a more favourable light as a father who was concerned about his daughter’s drinking, partying, and drug-taking. These are some of the tweets from people who have experienced victim-blaming for being women on the receiving end of male perpetrators:\n\n#iwasblamed I was told I was a slut, a home wrecker, a whore, a baby killer who didn’t deserve to live. I was 15 and had been sexually abused by a friends step dad. He also made me have an illegal abortion. Then the media said we had an affair and I was his “lover” I was 15. My abuser tried to kill me then shot himself. He was called lovesick and I was a heartbreaker. I was 21 #iwasblamed #iwasblamed for being beaten by my brother and almost killed by my father. My extended family all took the side of the guilty parties, despite the extent of the damage done to me. It always seemed as though the men in my family could do no wrong. #iwasblamed by the media for my 22 year old abusers suicide after I spoke to the police. .. I was 14 and quoted as his “girlfriend” in the subheading\n\nOther women have been blamed for the actions of their murderers\n\nMuch like how Shanann was blamed for her own murder, Tatyana Strakhova was vilified on social media after she was raped and murdered by her roommate. Her rapist and murderer killed himself, and as a result, Tatyana’s Instagram was filled with comments blaming her.\n\nOne opinion piece published by Dni.ru said that she “wasn’t as innocent as it might seem at first glance.” The piece featured photos from Strakhova’s social media accounts of her drinking or posing in sexually suggestive positions.\n\nThey Blamed A Victim For Her Own Murder. Here’s How Women Are Responding by Otillia Steadman of Buzzfeed News.\n\nSimilarly, Grace Millane was blamed for her own murder due to her sexual history of having a preference for BDSM. The media reporting of her murder was met with outrage and exposed a disturbing historical trend of women being blamed for not being the “perfect victim.” According to theconversation.com, this attitude can be traced as far back to the response to the murders of Jack the Ripper.\n\nIt has been argued by several feminist historians, that the whole grand narrative of the Whitechapel Murders is held aloft to all women — as a warning of what may happen should they breach their prescribed gendered limits of domesticity, geography and sexuality.\n\n‘Jack the Ripper’ was a serial killer who disemboweled women — we need to stop celebrating that by Charlotte Mallinson\n\nWhy did it take a documentary to evoke compassion towards Shanann?\n\nSince the documentary aired, I feel like I know Shanann and her children. The documentary sets an example for other murder documentaries as it gives the victims a voice. Due to its format, many people seem to feel the same way as I do and are largely in support of Shanann. Her Facebook page is filled with comments of love and support towards her. On photos of her and Chris, members of the public have commented to condemn his actions.\n\nMost victims don’t get to have their voices heard. And it’s sad that it took a Netflix documentary to evoke some compassion and understanding towards Shanann. Why does a female murder victim have to be “perfect” in order to receive compassion? And why is it when they do fit the bill of “perfect victim”, people desperately try to find reasons as to how they drove their male attacker to harm them?\n\nShanann was popular and thought of as a loving wife and mother, yet people were determined to find ways they could justify what happened to her. The psychology of victim-blaming explains that people do this because we want to believe that something unthinkable doesn’t just happen to anyone. We want to believe that we would have been more careful and done things differently so we can convince ourselves it would never happen to us.\n\nBut in reality, anyone can be a victim. Even people who are flawed and made choices many may not agree with. They are still a victim and their personal history or character flaws do not reduce the severity of the crime committed against them.\n\nSoon the buzz of this documentary will die down. Another woman will be murdered by a man and we will try to find ways to explain how she drove him to it. Or we could remember Shanann and pay tribute to her, and the many women who have been murdered and blamed before her, by learning from this shameful behaviour. History doesn’t have to repeat itself.\n\nWhether women are bossy, highly-strung, or even “crazy” or “bitches”, they do not deserve to be murdered. It’s shameful that has to be said.",
    "keywords": [
      "shanann",
      "women",
      "ashamed",
      "murdered",
      "surrounding",
      "sexism",
      "victim",
      "media",
      "murderer",
      "blamed",
      "murder",
      "watts",
      "chris",
      "documentary"
    ]
  },
  {
    "url": "https://towardsdatascience.com/real-time-time-series-anomaly-detection-981cf1e1ca13?source=extreme_main_feed---------5-73--------------------2cce69df_c09d_4e44_8fc4_d833033e1fd9-------",
    "title": "Real-Time Time Series Anomaly Detection",
    "publish_date": "2020-10-14 14:31:51",
    "authors": [
      "Marco Cerliani"
    ],
    "summary": "In this post, we explore different anomaly detection approaches that can scale on a big data source in real-time.\nTsmoothie is a python library for time series smoothing and outlier detection that can handle multiple series in a vectorized way.\nThe convolutional smoother uses weights generated using predefined windows function (linear, hanning, hamming, bartlett, blackman).\nThe exponential smoother uses weights generated with an exponential function.\nRespectively, two different data structures are taken into account: random walks series and seasonal series with no trend.",
    "text": "As much as it has become easier over the years to collect vast amounts of data across different sources, companies need to ensure that the data they’re gathering can bring value. To aid insight collection from the data, machine learning and analytics have become trending tools. Since these domains require real-time insights, an abundance of unwelcome data can create real issues.\n\nBefore decisions are made, and critically, before actions are taken, we must ask: are there anomalies in our data that could skew the results of the algorithmic analysis? If anomalies do exist, it is critical that we automatically detect and mitigate their influence. This ensures that we get the most accurate results possible before taking action.\n\nIn this post, we explore different anomaly detection approaches that can scale on a big data source in real-time. The tsmoothie package can help us to carry out this task. Tsmoothie is a python library for time series smoothing and outlier detection that can handle multiple series in a vectorized way. It’s useful because it can provide the techniques we needed to monitor sensors over time.\n\nTYPES OF ANOMALIES\n\nFirst, let’s define anomalies. They can be anything that is different or abnormal and deviates substantially from other data in the sample or historical data.\n\nAnomalies are often divided into point and pattern anomalies. Point anomalies are single instances of something abnormal, while pattern anomalies represent clusters of data that are abnormal.\n\nIn most of the case, some point anomalies may seem like a case of bad luck. With a pattern anomaly instead, the data creates a pattern that looks very different from normal. Pattern anomalies are more difficult to detect because we must first be able to define a normal pattern, and then we could need more data to be able to classify that this pattern is anomalous compared to historical activity.\n\nBelow we present different simulated scenarios, where we apply different techniques suitable for anomaly detection. Their adoption is domain-related and they are all based on simple assumptions. This simplicity is fundamental in all the tasks where we have a lack of information or in the presence of a little amount of data.\n\nPOINT ANOMALIES\n\nOur aim here is to detect data points that deviate so much from others. This arouses suspicions that the points were generated by a different mechanism.\n\nTwo different algorithms are used: a convolutional smoother and an exponential smoother. Both smooth the received signals using a sliding window approach. The convolution approach uses a discrete linear convolution while the exponential one uses an exponentially weighted convolution. Convolution is a mathematical operation that could be described as the integral of the product of two sequences: the raw signal and the weights. The convolutional smoother uses weights generated using predefined windows function (linear, hanning, hamming, bartlett, blackman). In the case of linear type, the weights are all the same and equal to one. This makes the operation equal to a moving average. The exponential smoother uses weights generated with an exponential function. As result, the most recent observations weight the most when computing the smoothing.\n\nRespectively, two different data structures are taken into account: random walks series and seasonal series with no trend.",
    "keywords": [
      "detection",
      "anomaly",
      "anomalies",
      "weights",
      "uses",
      "pattern",
      "convolution",
      "exponential",
      "smoother",
      "different",
      "realtime",
      "data",
      "series"
    ]
  },
  {
    "url": "https://towardsdatascience.com/25-lesser-known-java-libraries-you-should-try-ff8abd354a94?source=extreme_main_feed---------6-73--------------------2cce69df_c09d_4e44_8fc4_d833033e1fd9-------",
    "title": "25 lesser-known Java libraries you should try in 2020",
    "publish_date": "2020-10-07 22:09:24",
    "authors": [
      "Md Kamaruzzaman"
    ],
    "summary": "JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape.\nIn enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform.\nWiremockHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development.\nLink:ConclusionIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries.\nThere are many excellent Java libraries that I have not listed here but worth a try.",
    "text": "1. RxJava\n\nReactive Extensions (ReactiveX) is a popular software development paradigm to deal with asynchronous and event-driven programming. RxJava is the Java VM implementations of the Reactive Extensions by using Observables. It extends the Observer Pattern to support event-driven programming by adding composable operators on a sequence of events/data in a declarative way. It also hides the low-level complexities like threading, thread-safety, synchronization, and concurrent data structure.\n\nIf you want to do reactive programming in Java, it is a must-have library.\n\nLink:\n\n2. OkHttp\n\nHTTP is by far the most used Application layer protocol. There are many excellent Java-based HTTP client libraries out there. But OkHttp is the simplest yet powerful HTTP client library in the JVM. It offers fluent and clean API to develop HTTP client in Java.\n\nIt also supports some advanced features: Connection pooling, GZIP shrink, response caching, modern TLS features, and many more.\n\nLink:\n\n3. MyBatis\n\nIn most Software development projects, we need to store data. Although there are many types of data storage, SQL is still the most used data storage type. As a Java developer, we need to match our Java object to the SQL table. One way to achieve the mapping is to use ORM (e.g., Hibernate). But there are many use cases when you want to have full control over the Object-Table mapping (e.g., Performance). In those cases, you can directly use JDBC and write the SQL query. The other way is to use MyBatis to map Java Object to Stored Procedure or SQL statements. It offers both annotation-based or XML descriptor based mapping.\n\nI prefer MyBatis over plain JDBC, especially in larger projects, as it improves the separation of concerns.\n\nLink:\n\n4. HikariCP\n\nHikariCP is the second library in this list related to Database. Establishing a JDBC connection is resource expensive. If you create a new connection every time you access the Database and close it once you are done, it can severely impact your application performance. Not to mention that failure to close the connection properly or allowing limitless database connection can crash your application.\n\nUsing Connection Pooling means connections are reused rather than created each time a connection is requested. HikariCP is a very fast yet lightweight Database connection pooling in JVM. It is also very reliable and a “zero-overhead” JDBC connection pool.\n\nLink:\n\n5. Lombok\n\nIn modern days, Java is often criticized as a verbose and bloated programming language. Compared to other popular languages (JavaScript, Python, Scala, Kotlin), a developer needs to write lots of boilerplate code in Java. Although Java has introduced Records in JDK 15 to reduce boilerplate code in Java, it is not an LTS release. Fortunately, a library can already reduce your boilerplate code in Java significantly: Project Lombok. You can generate getters, setters, hashcode, equals, toString, Builder classes by adding a few annotations. Additionally, it offers null pointer check, logger, and many more.\n\nLink:\n\n6. VAVR\n\nJava finally released the much-awaited functional programming via Lambda and Streaming in version 8. If you are used to functional programming or want to dive deep into functional programming, you may find Java’s functional programming wanting. Compared to many other functional programming languages (Haskell, Scala), Java is pale. VAVR is a library that can fill the gap of the functional programming features in Java. It provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nLink:\n\n7. Gson\n\nOver the years, JSON has become the de-facto data exchange format. In Java, there also exist several excellent libraries to deal with JSON. One of them is Jackson, which I have covered in my previous article. The other excellent library is Google’s Gson. Unlike Jackson, it is a minimalistic library and only supports JSON. It offers Data Binding, extensive Generic support, flexible customization. One of the major advantage (or disadvantage depending on your liking) of Gson is that it does not need annotation.\n\nLink:\n\n8. jsoup\n\nIf you are developing your application in Java and need to deal with HTML, you should use jsoup. It is a Java library to work with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data. It implements the WHATWG HTML5 specification and parses HTML using the best of HTML5 DOM methods. It supports parsing HTML from URL/string, find and extract data, manipulate the HTML elements, clean HTML, output HTML.\n\nLink:\n\n9. JIB\n\nIf you are working on an enterprise-grade application, it should be at least Cloud-ready. The first step to make your application cloud-ready is to containerize your application, i.e., put your artifactory binary into Docker image. Dockerizing a Java application is a bit tedious work: you need to have deep knowledge of Docker, you need to create a Dockerfile, and you will need Docker Daemon. Fortunately for the Java developers, Google has created an Open-source Java containerizer using already existing tools. You can use JIB as a Java library to build an optimized Docker and OCI image.\n\nLink\n\n10. Tink\n\nTink is yet another handy Java library in this list from Google. Cryptography and security are becoming increasingly more important in Software Development. Cryptographic techniques are used to secure user data. Implementing cryptography correctly requires a lot of expertise and effort. A group of Cryptographers and security engineers in Google has written the multi-language cryptographic library Tink. It offers easy-to-use but hard to misuse security API. Tink offers cryptographic functionalities via different primitives. It provides symmetric key encryption, streaming symmetric key encryption, deterministic symmetric key encryption, digital signature, hybrid encryption, and many other encryption functionalities.\n\nLink:\n\n11. Webmagic\n\nIf you work on Web crawling, you can write your own crawler, which is time-consuming and tedious. In Java, Webmagic is an excellent Web crawler library that covers the complete life-cycle of crawler: downloading, URL management, content extraction, persistence. It offers a simple yet flexible core, Annotation support, multi-threaded, and easy-to-use API.\n\nLink:\n\n12. ANTLR 4\n\nIf you work on parsing and processing data, then the ANTLR library could be handy. It is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It does this by giving us access to language processing primitives like lexers, grammars, parsers, and the runtime to process text against them.\n\nIt’s often used to build tools and frameworks.\n\nLink:\n\n13. Caffeine\n\nIf your application is read-heavy, then caching can dramatically improve your application’s data access performance. Java has many great caching libraries. Caffeine is the best among the lot. It is a high-performance, near-optimal caching library based on Java. It offers a fluent caching API and some advanced features like asynchronous loading of entries, asynchronous refresh, weak referenced keys, etc.\n\nLink:\n\n14. Metrics\n\nOnce your Java application runs into production, you will want to have insight into your application's critical components. Metrics from the Dropwizard framework is a simple yet compelling Java library that provides insight into your application and JVMs KPI, e.g., rate of events, pending jobs, service health check, and more. It is modular and offers modules for other libraries/frameworks.\n\nLink:\n\n15. gRPC-Java\n\nGoogle has created gRPC as a modern Remote Procedure Call system in 2015. Since then, gRPC became extremely popular and one of the most used RPC system in modern software development. The library gRPC-Java is the Java implementation of the gRPC client. If you want to use gRPC in Java, then this library can be handy for you.\n\nLink:\n\n16. Java WebSocket\n\nTraditional Client-Server communications unidirectional. WebSocket is a bi-directional communication protocol over a single TCP connection. Java WebSocket is a barebone WebSocket server and client implementation in Java. If you are a Java developer and want to work with WebSocket, this library is highly recommended.\n\nLink:\n\n17. JJWT\n\nJSON Web Token (JWT) is the de-facto Authorization and secure Information exchange format in modern software development. Whether you are using a simple session-based Authorization or highly advanced OAuth2 based Authorization, you will probably use JWT. JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape. It is fully RFC specification compliant on all implemented functionality. It supports readable and convenient fluent API.\n\nLink:\n\n18. Swagger-Core\n\nOpenAPI is the specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. Swagger-Core is the Java implementation of the OpenAPI specification. If you are exposing REST API in your Java/JavaEE application, you can automatically provide and expose your API definitions using Swagger-Core.\n\nLink:\n\n19. Async Http Client\n\nAsynchronous programming is becoming increasingly popular of late because of its non-blocking nature. Most of the popular Java HTTP client libraries offer limited to no asynchronous HTTP response processing. Async Http Client is a popular Java library that offers asynchronous HTTP response processing. As a bonus feature, this library also supports the WebSocket protocol.\n\nLink:\n\n20. Liquibase\n\nAs a software developer, we all know the importance of version control, DevOps, and CI/CD of our code. In a blog post: Evolutionary Database Design, the great Martin Fowler argued that we also need version control and CI/CD of our code. Liquibase is a tool that supports tracking, version controlling, and deployment of SQL database changes in Java Applications. If you are working with an SQL database where the database is evolving, this tool can greatly simplify your database migration.\n\nLink:\n\n21. Springfox\n\nI have already listed Swagger-Core in this list, which can automatically generate REST API documentation for vanilla Java or Java EE application. In enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform. In Spring-based Java applications, the Springfox library can automatically generate REST API documentation from the source code.\n\nLink:\n\n22. JavaCV\n\nOpenCV is a computer vision and machine learning software library. It is open-source and was built to provide a common infrastructure for computer vision applications. JavaCV is a wrapper on OpenCV and many other popular libraries (FFmpeg, libdc 1394, PGR FlyCapture) in the field of computer vision. JavaCV also comes with hardware accelerated full-screen image display, easy-to-use methods to execute code in parallel on multiple cores, user-friendly geometric and the color calibration of cameras and projectors, detection and matching of feature points, and many other features.\n\nLink:\n\n23. Joda Time\n\nJava had a poor date and time functionalities in the pre-Java8 core library. Java8 released much needed advanced date and time functionalities in its java.time package. If you are working with an older version of Java (pre Java8), Joda time can provide you the advanced date and time functionalities. However, if you are working in a newer version of Java, you may not need this library.\n\nLink:\n\n24. Wiremock\n\nHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development. During the writing Unit test, it is best to focus on SUT (System Under Test) and mock the services used in the SUT. Wiremock is a simulator for REST API and enables developers to write code against an API that does not exist or incomplete. In microservice-based software development, Wiremock can significantly boost development velocity.\n\nLink:\n\n25. MapStruct\n\nIn Java application development, you often need to convert one type of POJO to another type of POJO. One way to achieve this POJO or Bean conversion is to explicitly code the transformation, which is tedious. The smart way is to use a library that is specifically developed to transform POJO/Bean. MapStruct is a code generator that implements mapping between POJO/Bean on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe, and easy to understand.\n\nLink:\n\nConclusion\n\nIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries. These libraries are not domain-specific and can help you whether you are developing Software for Business applications, Robotics, Android Apps or Personal projects. Please note that for a large and wide eco-system like Java, this list is not conclusive. There are many excellent Java libraries that I have not listed here but worth a try. But this list of libraries can provide a quick peek into the world of the Java eco-system.",
    "keywords": [
      "2020",
      "development",
      "lesserknown",
      "libraries",
      "try",
      "library",
      "25",
      "application",
      "java",
      "need",
      "offers",
      "programming",
      "software",
      "data"
    ]
  },
  {
    "url": "https://uxdesign.cc/29-of-my-favorite-websites-most-designers-have-never-heard-of-d7d99179cda7?source=extreme_main_feed---------7-73--------------------2cce69df_c09d_4e44_8fc4_d833033e1fd9-------",
    "title": "29 of My Favorite Design Tools & Websites You’ve Never Heard of",
    "publish_date": "2020-10-07 15:12:18",
    "authors": [
      "Danny Sapio"
    ],
    "summary": "The design space is awash with countless design tools, plugins, websites, resources, and more promising to improve your workflow and make you a savvier designer.\nI’ve tried my hand at a lot of them over the years, but there are only a few that really stand out.\nThis list is the cream of the crop — the most obscure, creative, unique, helpful or exceptional.\nSome are fun sites to be inspired from; others are tools and resources that will absolutely make you a better designer.\nLet me know what your favorite tools are on Twitter.",
    "text": "The design space is awash with countless design tools, plugins, websites, resources, and more promising to improve your workflow and make you a savvier designer. I’ve tried my hand at a lot of them over the years, but there are only a few that really stand out.\n\nThis list is the cream of the crop — the most obscure, creative, unique, helpful or exceptional. Some are fun sites to be inspired from; others are tools and resources that will absolutely make you a better designer.\n\nI hope you enjoy! Let me know what your favorite tools are on Twitter.\n\n1. The preposterous web portal of Erik Bernacchi\n\neeerik.com",
    "keywords": [
      "stand",
      "workflow",
      "heard",
      "resources",
      "favorite",
      "tools",
      "web",
      "design",
      "unique",
      "twitter1",
      "youve",
      "tried",
      "29",
      "websites"
    ]
  },
  {
    "url": "https://medium.com/its-tinkoff/typescript-tricks-that-allow-you-to-scale-your-app-endlessly-95a0ff3d160d?source=extreme_main_feed---------8-73--------------------2cce69df_c09d_4e44_8fc4_d833033e1fd9-------",
    "title": "TypeScript tricks that allow you to scale your app endlessly",
    "publish_date": "2020-10-08 12:02:05",
    "authors": [
      "Roman Sedov"
    ],
    "summary": "We collected a set of rules for more strict TypeScript.\nstrictTypeScript has a “strict” mode that is unfortunately disabled by default.\nWith “strict” mode you forget about errors like undefined is not a function or cannot read property X of null .\nIf you start a new project, enable “strict” and be happy.\ntsconfig.json filereadonlyThe next important rule for us as developers in TypeScript is using readonly everywhere.",
    "text": "We use TypeScript because it helps develop our apps safer and faster.\n\nTypeScript by default has many simplifications. They help JavaScript developers to start using it easier but they waste a lot of time in the long term.\n\nWe collected a set of rules for more strict TypeScript. You just get used to it once and save much time working with your code in the future.\n\nany\n\nThere is a simple rule that returns much profit in the long term.\n\nDo not use “any”. Ever.\n\nThere is simply no case where you cannot describe a type instead of using “any”. If you have such a situation, it can be a problem in architecture, legacy or something else.\n\nUse generics, unknown or overloads and do not worry about unexpected problems with data structures. Such problems are hard and expensive to debug.\n\nstrict\n\nTypeScript has a “strict” mode that is unfortunately disabled by default. This mode enables a set of rules for safe and comfortable TypeScript. If you do not know about this mode, read the following article.\n\nWith “strict” mode you forget about errors like undefined is not a function or cannot read property X of null . Your types are accurate and correct.\n\nAnd what should I do?\n\nIf you start a new project, enable “strict” and be happy.\n\nIf you have a project without “strict” mode and you want to enable it, you can meet a lot of compilations. It is very hard to write a strict code without alerts of the compiler. So it’s likely you have a lot of problematic places. Migrating the whole project to “strict” gets annoying pretty quickly.\n\nIt is recommended to cut this big task into pieces. The “strict” mode consists of a set of 6 rules. You can enable one of them and fix all errors. The next time, you enable the second one, fix errors and continue work and so on. One day you get a “strict” mode.\n\ntsconfig.json file\n\nreadonly\n\nThe next important rule for us as developers in TypeScript is using readonly everywhere.\n\nIt is a bad practice to mutate structures while working with them. For example, Angular does not like this way: there are some issues with ChangeDetection and updates of your view when you mutate data.\n\nBut you can prevent all attempts to mutate data easily. Just make a habit of writing readonly word.\n\nAnd how should I do it?\n\nThere are many places in your app where you can replace unsafe types to readonly options.\n\nUse “readonly” properties in interfaces\n\nPrefer “readonly” types\n\nUse “readonly” fields in a class when possible\n\nUse “readonly” structures\n\nas const\n\nIn TypeScript v.3.4 we got const-assertions\n\nIt is a more strict instrument than “readonly” types because it seals instance to the most precise type and you can be sure that nobody and nothing will change it.\n\nUsing as const you also get exact types in the tips of your IDE.\n\nUtility Types\n\nTypeScript has a set of types that are shortcut transformations of other types.\n\nPlease, explore the official utility types doc and use them in your app. It saves a lot of time.\n\nNarrow down your types\n\nTypeScript has many instruments to narrow down types. It is cool because we can support strict typing in our project in a wide variety of cases.\n\nLook at the following sample. It is a simple case but it can help to understand the difference between checking a type and narrowing it down.",
    "keywords": [
      "using",
      "typescript",
      "types",
      "endlessly",
      "set",
      "project",
      "lot",
      "readonly",
      "enable",
      "scale",
      "allow",
      "tricks",
      "mode",
      "strict",
      "app"
    ]
  },
  {
    "url": "https://eand.co/are-these-the-last-25-days-of-american-democracy-14fa529ba8bd?source=extreme_main_feed---------9-73--------------------2cce69df_c09d_4e44_8fc4_d833033e1fd9-------",
    "title": "Are These the Last 25 Days of American Democracy?",
    "publish_date": "2020-10-09 16:36:55",
    "authors": [
      "Umair Haque"
    ],
    "summary": "Are these to be the last 25 days of American democracy?\n!” while Trump was busy scapegoating immigrants, refugees, Jews, Muslims, and everyone else who wasn’t a “real” American.\nLike I said: it’s deeply abnormal for a society to feel this way, act this way, think this way, be this way.\nBecause I want you to really understand American collapse, so that you really understand what America is up against in this election.\nThese could very well be the last 25 days of American democracy.",
    "text": "The more desperate that Trump gets, the more egregious his transgressions become. The latest, as he plummets in the polls, is to call for his opponents to be prosecuted and indicted.\n\nThat’s straight out of the authoritarian’s playbook. And it should be a clear sign of what is to come. Are these to be the last 25 days of American democracy?\n\nTrump has long understood that he is unlikely to win the election outright. That the majority of Americans don’t back him — they didn’t the first time around, remember. That’s no mere coincidence: it is the culmination of a trend. The same happened with George W Bush, and it was an ominous sign of things to come. America’s ranked as a flawed democracy precisely because it’s obscure “electoral college” system at this point, a remnant of slavery and segregation, designed to empower wealthy landowners, stands against the wishes of the majority — who want a society more like Canada or Europe than the failed state of Texas.\n\nAnd so what has developed over the last few months — and the over the last several decades, with the GOP— is what looks like a sophisticated, complex strategy to thwart democracy itself, and steal the election. That’s no overstatement or hyperbole. As I’ve written in the recent past, the elements of this are in plain view — for those who care to look.\n\nBefore I discuss this strategy, and how its evolving, though, I want to point something out. Americans don’t quite seem to understand that they are living in a pre-authoritarian society now, and have been for quite some time. When the Supreme Court handed the win to Bush, that was a major, major development in pre-authoritarianism. When Obama — as good a person as he is, he made several major mistakes — bailed out the banks, but not Main St, that too was pre-authoritarianism, propping up failed predatory institutions. When warnings of Trump’s abuses of power to come were dismissed in 2016, that too was pre-authoritarianism, as it was when Hillary got attacked for “but her emails!!” while Trump was busy scapegoating immigrants, refugees, Jews, Muslims, and everyone else who wasn’t a “real” American.\n\nPre-authoritarianism isn’t just a political phenomenon, though. It’s also a kind of cultural and social current sweeping through a nation. And America’s long been pre-authoritarian in those ways, too. Americans are legendary the world over for their cruelty, indifference, and brutality — all of which are severe blinking-red indicators of pre-authoritarianism. Kids shooting each other up at schools — something which happens nowhere else in the world with such regularity? People having to beg strangers online to pay for basic medicine? Generations crippled by unpayable debt, beginning with “lunch debt,” becoming “student debt,” then turning into “credit card” and “medical debt” — a society of neo-serfs, in other words?\n\nAll these things are severe indicators of pre-authoritarianism, and yet they have also become normalised in America to the extent that many Americans don’t understand that living this way, among such severe cruelty and brutality, is deeply, deeply abnormal. An example I often raise is that of Pakistan, a place where you can buy AK-47s at gun markets — but nobody is shooting up schools. America’s problems are cultural and social.\n\nIt’s no overstatement to say that America is a nation in profound social and cultural crisis, with cultural and social problems — like school shootings, medical bankruptcy, skyrocketing despair and suicide, mass distrust, a level of vitriol and indifference that’s truly shocking — that exist almost nowhere else in the world. And all those problems are the ones of pre-authoritarian societies: they are what tend to happen just before societies collapse full on into authoritarianism.\n\nSo what is their genesis? What made America fall apart socially and culturally — by which I mean become a society in which no one much trusts anyone else, where indifference, despair, and rage are normalized? Like I said: it’s deeply abnormal for a society to feel this way, act this way, think this way, be this way.\n\nAmerica imploded into social and cultural crisis not out of the blue, but for a very simple reason, which predicted just such implosion. Economic collapse. The Soviet Union stagnated for thirty years — and that was enough to cause it to fracture into little nations, many of which are failing authoritarian states today. America’s stagnated for fifty. That’s almost twice as long, half a century where average incomes haven’t really risen.\n\nMeanwhile, the prices of basics have spiralled completely out of control, becoming flatly unaffordable. Education will cost you as much as a house, and so will falling ill. Food and water and utilities cost far, far more than they do in rich or poor societies. Retirement is an impossibility for three generations and counting right about now. These basics have become things that nobody much can afford in America.\n\nThe result of this dislocation — incomes stagnating, while prices rose and rose to amounts that the entire rest of the world finds startling and unbelievable, like $50K for childbirth — was that the American middle class finally collapsed. It took about two decades for the middle class to eat through its savings and assets, and finally, for the first time, around 2010, the middle class finally became a minority.\n\nToday, the average American dies in $62,000 of debt. That’s a figure, an idea, that Americans have normalized — isn’t this how everyone lives? — but it is so profoundly abnormal and perverse that to an economist like me it’s like having a patient who can’t breathe and is about to go into cardiac arrest. There is nothing — and I mean nothing — more alarming in the world of social statistics and economic figures than a nation dying in mass debt.\n\nWhat happens to societies where people die in mass debt? Debts they have never been able to repay? When entire generations fall prey to that failure? They implode into authoritarianism and/or fascism.\n\nThat is precisely the story of Weimar Germany, after all. It’s also the story of post-Soviet Russia. And the story of the Islamic world.\n\nWhy? What is the connection between a collapsing economy and an imploding society? Trust is. If you can’t make ends meet, no matter how hard you try, you live a life of panic, despair, fatalism, nihilism. You are perpetually angry, a human pistol with a hair trigger, ready to lash out. You have been denied the basics, and with them go peace of mind. And with all that goes trust. You being to grow suspicious of your neighbours, who were once friends. Now everyone is just a rival in a bitter, desperate battle for survival. Tribe turns on tribe, group on group. Atop it all stride elites, grinning, satisfied, because now the masses are too weak to even act for themselves. The bonds between them have been severed — and so no collective action is possible.\n\nA society dies, this way: an economy collapses, and takes trust with it, which produces a political implosion, by way of social disintegration.\n\nThat is exactly what happened in America. As the economy collapsed, from 1970 onwards, steadily, slowly, then fast, and finally all at once, collective action stopped being possible at all. Americans by the 2000s distrusted one another so much that they refused to give one another healthcare, retirement, education, and so on. Do you see the irony? That deficit was of the very basics that produced the vicious cycle of implosion, and yet because trust had gone missing from society, collective action to simply give one another the basics was no longer possible.\n\nAnd that created the opening for a demagogue. Sooner or later, someone was going to come along who blamed already hated minorities for all this. Who scapegoated Jews, Muslims, Mexicans, refugees, immigrants, for the problems of “real” Americans.\n\nAnd that is exactly what transpired. Trump led a neo-fascist movement to power, and soon kids were in camps, being ripped away from their families, minorities being hunted down in the streets, people being beaten and gassed, women forcibly sterilised in the camps. And there Trump is today, calling for his opponents to be prosecuted and indicted — a classic and predictable authoritarian move, to finalise the seizure of power.\n\nWhy am I telling you all this? Because I want you to really understand American collapse, so that you really understand what America is up against in this election. Let me put it bluntly.\n\nFor Trump to lose this election — really lose it, not just fail to win a majority but still retain power — America is going to have to commit its first act of collective action in a very, very long time. Its first positive act. Not just a negative one, as in denying everyone else healthcare, education, retirement, and so on — but an affirmative one, as in, we still want to be a democracy.\n\nIf that makes you shudder a little bit, then I’ve been successful — because you understand how big the stakes really are.\n\nAmerica isn’t just up against Trump. It is up against history. A toxic political party, a failed set of paradigms, a catastrophic set of ways of thinking about the world. That selfishness and cruelty and brutality — politely disguised as “self-interest” and “self-reliance” and “standing on your own two feet” and even “freedom” — can ever lead a society upwards, towards higher living standards.\n\nInstead, those ideologies, toxic remnants of slavery and segregation, which had never really gone away, led to the following sequence: economic collapse, even for the “real” American, which led to social disintegration, as social bonds were severed, and trust died, which led to predictable and inevitable political implosion, into fascism and demagoguery.\n\nThat is all what it means when I say “America was a pre-authoritarian society.” It goes deep, deep into the heart of America’s interlinked crises, economic, social, political, cultural, and is the central thread weaving them together, by way of indifference, despair, and enmity.\n\nThis election is America’s last chance. It is a pre-authoritarian society. If Trump wins — and remember, I don’t just mean that he loses the majority, but stays in power, thanks to legal challenges, the Supreme Court, voter intimidation and suppression — if he wins, whatever way he wins, America is finished. The transformation to an authoritarian society, which has been on the cards for decades now, will be complete.\n\nThat is why people like me — survivors and scholars of authoritarianism — have been trying to warn you about all these links. Sarah Kendzior has written about the despair in “flyover country,” Peter Daou warned how civil wars erupt, Jason Stanley discussed the evolution of fascism. America’s pundits — the ones you hear, on CNN and in the NYT and whatnot? They have no idea about this. They have been wrong from day one because they have never lived this, experienced it, understood it in a visceral, firsthand way. We have.\n\nTake the warnings seriously.\n\nThese could very well be the last 25 days of American democracy. America is up against all its mistakes, who have culminated in one man, Trump, and his movement of fascists, theocrats, flunkies, sycophants, idiots, and militias. It has never taken a majority to topple a democracy — only a fanatical enough minority.\n\nBut do you know what it takes to save one?\n\nA majority, who is capable of doing what is has not, for too long. Finally coming together, to resolve to stand up for decency, goodness, humility, truth, beauty, justice, wisdom, grace.\n\nThat is what needs to happen in the next 25 days. America needs to grow more in these last three and a half weeks than it has in the last three and a half decades.\n\nCan it do that? You, my friend, tell me.\n\nUmair\n\nOctober 2020",
    "keywords": [
      "american",
      "trump",
      "way",
      "world",
      "majority",
      "america",
      "social",
      "25",
      "debt",
      "really",
      "democracy",
      "society",
      "americas",
      "days"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------ee432ff5_84e1_4da5_9f48_007e00dc75e4-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------ee432ff5_84e1_4da5_9f48_007e00dc75e4-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------ee432ff5_84e1_4da5_9f48_007e00dc75e4-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------ee432ff5_84e1_4da5_9f48_007e00dc75e4-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------ee432ff5_84e1_4da5_9f48_007e00dc75e4-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://williamfleitch.medium.com/there-will-be-no-laughing-on-election-night-3d1d498afc38?source=extreme_main_feed---------1-74--------------------3fe71a8d_19b2_4ed3_936b_9ae4afbbb062-------",
    "title": "There Will Be No Laughing on Election Night",
    "publish_date": "2020-10-13 20:34:19",
    "authors": [
      "Will Leitch"
    ],
    "summary": "But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off.\nBut one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000.\nAlready cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious.\nThere is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified.\nBut I damn sure know it won’t be funny.",
    "text": "NBC\n\nIn November 2000, I fell asleep to Al Gore being declared the next president, woke up to George W. Bush having won, and by lunchtime no one had any idea who had won or what was going on. What I remember the most is finding the whole thing very funny. And it was funny.\n\nI know now that being able to find such chaos amusing was a privilege, and an ugly one, of being an aimless but mostly comfortable white kid in his early 20s. One can argue about the specific differences of how the world would have turned out had Al Gore become president instead of George W. Bush, but there’s no question there were definite differences. But if you followed the race in 2000, this was not what everybody thought. I covered protests at the Democratic National Convention in Los Angeles that year — the same one Barack Obama couldn’t even get into — and the one thing every protestor believed, along with most young Gen Xers like myself, was that it didn’t matter whether the next president was Bush or Gore: They were two variations of the same flavor. That the race ended up so close sure didn’t feel like an accident. If you ask 300 million people whether they’d prefer two nickels or a dime, you shouldn’t be surprised when the results are 50–50. The madness that followed the close vote felt not like a moment of democratic peril. It felt like the logical conclusion to an incredibly stupid process. You just had to laugh.\n\nWhile watching 537 Votes, a new documentary about the 2000 Florida recount (and specifically the Miami-Dade county non-recount) that airs on HBO on October 21, I was reminded that it wasn’t just snarky former grunge kids who thought all this was ridiculous. The documentary itself is mediocre, more interested in cheap nostalgia and sight gags than the psychology of the era (director Billy Corben of Cocaine Cowboys has a persistent habit of dressing up his films with gimmicks rather than trusting his story to tell itself), but its ability to mine cultural artifacts of that time is remarkable. There’s a ton of clips from The Daily Show, and they each make a strong argument that the smugness that ultimately drove us all away from Jon Stewart was there from the get-go. There’s a reminder that Craig Kilborn used to host a late-night talk show. And there is a Wanda Sykes riff on Florida that is even rawer and more cutting 20 years later. But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off. Seriously, they found all of this hilarious. The most famous voice that night was Dan Rather and all his goofy homespun sayings—“If a frog had side pockets, he’d carry a hand gun”—but everyone was yucking it up. Second place was Tim Russert, the evening’s breakout star, with his whiteboards and his red states and blue states, with a big giddy grin on his face throughout, even at 3:17 a.m., like this was the most fun he’s ever had in his life. Isn’t this a blast? You hear the crew cackling off stage. What a night!\n\nIt sure seems less funny now.\n\nThere are many, many ways that 2020 is worse than 2000. (Sheesh, in 2000, Joe Rogan was just that guy from “NewsRadio.”) As Clare Malone pointed out in a fantastic piece for FiveThirtyEight, we’re a lot more polarized and a lot less likely to just give up and accept it if our preferred candidate loses in a tightly contested election. But one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000. Already cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious. There is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified. There is an awareness that if we are not careful about this democratic process, the whole thing could collapse.\n\nThere was none of that in 2000. It was all just a wacky story—this election is crazy close!—that was covered as if the stakes were a lot lower than they were. (Within three years, the NASDAQ collapsed, 9/11 happened and we were in multiple wars. The stakes turned out to be pretty freaking high.) What has changed, of course, is that we now know what a difference it can make when one candidate wins and one loses, that the entire nation is a fire just waiting for kindling, and that there are bad actors eager to pounce at the first sign of uncertainty. History will be made, and our anchors and analysts, by all accounts, understand how precise and meticulous they will need to be. And they understand, mostly, just how ungodly serious this is. And that’s where we’ve changed the most. In 2000, it felt like America would be around, and strong, forever, no matter who won, that the democratic process would do its job and we’d all be fine. Twenty years later, we’ve had 9/11 and endless wars and economic collapses and pandemics and Donald Trump. There are no illusions that America will just automatically land on its feet anymore. I don’t know how the networks, or the public, will react to what happens on November 3. But I damn sure know it won’t be funny.\n\nWill Leitch will be writing multiple pieces a week for Medium. He lives in Athens, Georgia, with his family, and is the author of five books, including the upcoming novel “How Lucky,” released by Harper next May. He also writes a free weekly newsletter that you might enjoy.",
    "keywords": [
      "sure",
      "2000",
      "lot",
      "night",
      "laughing",
      "democratic",
      "know",
      "thing",
      "election",
      "watching",
      "won"
    ]
  },
  {
    "url": "https://marquisele.medium.com/we-do-not-deserve-hospitals-abd8756d7bbf?source=extreme_main_feed---------2-74--------------------3fe71a8d_19b2_4ed3_936b_9ae4afbbb062-------",
    "title": "We Do Not Deserve Hospitals",
    "publish_date": "2020-10-15 03:05:18",
    "authors": [
      "Marquisele Mercedes"
    ],
    "summary": "We Do Not Deserve HospitalsMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\nAt one point, I was sent to another room nearby that was a little larger and had no extra chairs.\nMy mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy.\nHave you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum?\nHas a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?",
    "text": "We Do Not Deserve Hospitals\n\nMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\n\nSource: Unsplash\n\nOn a night in my early teens, I went to the Pediatric Emergency Department at Montefiore’s Children’s Hospital for intense cramps. I was expecting my period in a few days, but had never felt that way before — like a heat lamp was burning into the meat of my pelvis.\n\nMy mother and I spent the better part of 9 hours in a tiny room with speckled vinyl floors and too-bright fluorescents. At one point, I was sent to another room nearby that was a little larger and had no extra chairs. My mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy. A nurse told me to undress from the waist down and wait for the doctor.\n\nMy doctor came in and asked me — in a few different ways — if I’d ever been “penetrated”. I had not and said so — repeatedly. She referenced the development of my body, implied the crudeness of the boys around me. It was an unsaid question, but one that still required an answer. “No,” I said, “I’ve never put anything in there.” She said “if you say so”, before telling me to lay down, scoot my butt towards the end of the examination table, and spread my legs so she could “take a look.”\n\nI didn’t know what that meant, but she was the doctor, so I did what she told me to do.\n\nHave you ever screamed “no!” and “stop!” at the top of your lungs while being penetrated by an unidentified object that scraped at your most intimate insides? Have you ever been told to “be still” and “hold on” like your pain was the most mundane thing that had ever happened? Have you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum? Have you ever redressed yourself afterwards with shaky hands and legs and raucously laughed about it to your mom who was just a few feet away getting a cup of water when she heard the tail-end of your screams? Has a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?\n\nI was sent home with instructions to take Motrin and “stay out of trouble”. My mother and I rode the bus while she angrily pondered on whether I was still a virgin. I wrapped my arms around my middle and tried to protect something that felt like pierced cellophane. The tests for STIs came back clean.",
    "keywords": [
      "sent",
      "doctor",
      "mother",
      "required",
      "penetrated",
      "hospitals",
      "stop",
      "wait",
      "told",
      "deserve",
      "room",
      "say"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------3fe71a8d_19b2_4ed3_936b_9ae4afbbb062-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/javascript-in-plain-english/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6?source=extreme_main_feed---------4-73--------------------3fe71a8d_19b2_4ed3_936b_9ae4afbbb062-------",
    "title": "11 Frontend tricks that most Frontend Developers don’t know about",
    "publish_date": "2020-10-14 19:17:01",
    "authors": [
      "Daniel Anderson"
    ],
    "summary": "Datalist elementOne HTML element that you don’t see used much at all and for no reason!\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements.\nYou will see a drop-down list of pre-defined options as you type.\n<datalist>Example:<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\"><option value=\"Cat\"><option value=\"Dog\"><option value=\"Chicken\"><option value=\"Cow\"><option value=\"Pig\"></datalist>",
    "text": "1. Datalist element\n\nOne HTML element that you don’t see used much at all and for no reason!\n\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements. You will see a drop-down list of pre-defined options as you type.\n\n<datalist>\n\nExample:\n\n<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\">\n\n<option value=\"Cat\">\n\n<option value=\"Dog\">\n\n<option value=\"Chicken\">\n\n<option value=\"Cow\">\n\n<option value=\"Pig\">\n\n</datalist>",
    "keywords": [
      "dont",
      "tag",
      "11",
      "datalist",
      "valuecatoption",
      "valuepigdatalist",
      "reasonthe",
      "frontend",
      "know",
      "valuedogoption",
      "valuecowoption",
      "developers",
      "typedatalistexampleinput",
      "tricks",
      "valuechickenoption",
      "used"
    ]
  },
  {
    "url": "https://medium.com/better-marketing/10-websites-that-pay-you-for-your-writing-241e455ac262?source=extreme_main_feed---------6-73--------------------3fe71a8d_19b2_4ed3_936b_9ae4afbbb062-------",
    "title": "10 Websites That Pay You for Your Writing",
    "publish_date": "2020-10-13 20:26:49",
    "authors": [
      "Maryam Merchant"
    ],
    "summary": "10 Websites That Pay You for Your WritingWrite articles and get paid for your writingPhoto by Daria Shevtsova from PexelsAs a writer, we can’t always rely on one platform.\nAs every article I read about writing from top writers of Medium says, don’t put all eggs in one basket.\nIt means we need to look for other freelance writing platforms as well.\nSo if you want writing as a career or as a side hustle, then you need to mold yourself and, side by side, start looking at other freelance writing gigs that pay you.\nBut I still want to try something outside of this platform, so I found these ten websites that pay a writer for writing articles.",
    "text": "10 Websites That Pay You for Your Writing\n\nWrite articles and get paid for your writing\n\nPhoto by Daria Shevtsova from Pexels\n\nAs a writer, we can’t always rely on one platform. We all want to surf and get used to the competitive world. As every article I read about writing from top writers of Medium says, don’t put all eggs in one basket.\n\nIt means we need to look for other freelance writing platforms as well. So if you want writing as a career or as a side hustle, then you need to mold yourself and, side by side, start looking at other freelance writing gigs that pay you.\n\nAs a newbie, I found Medium two months back, and it’s one of the best platforms, which I am in love with. But I still want to try something outside of this platform, so I found these ten websites that pay a writer for writing articles. I just want to help you with that.",
    "keywords": [
      "articles",
      "platforms",
      "medium",
      "platform",
      "writing",
      "need",
      "freelance",
      "pay",
      "writer",
      "websites"
    ]
  },
  {
    "url": "https://medium.com/in-fitness-and-in-health/why-you-should-eat-oatmeal-at-least-once-a-week-9e6c1feadad9?source=extreme_main_feed---------9-73--------------------3fe71a8d_19b2_4ed3_936b_9ae4afbbb062-------",
    "title": "Why You Should Eat Oatmeal at Least Once a Week",
    "publish_date": "2020-10-12 14:55:31",
    "authors": [
      "Alyssa Atkinson"
    ],
    "summary": "Why You Should Eat Oatmeal at Least Once a WeekAnd how to make it taste incrediblePhoto by Ellieelien on UnsplashIf there’s one controversial statement about food, it’s this: breakfast is superior to all other meals.\nAfter all, the options are endless — pancakes, waffles, cereal, peanut butter toast, bagels, cinnamon rolls, and of course, oatmeal.\nIn fact, when I was in college, one of my campus dining halls served breakfast all day every single day.\nYet, I felt it was worth it to make the trek so I could eat my favorite breakfast foods whenever I wanted.\nAnd despite the wide variety of breakfast foods I consume every single week, there is one that I consume almost every morning, and it’s a staple that you should be eating as well.",
    "text": "Why You Should Eat Oatmeal at Least Once a Week\n\nAnd how to make it taste incredible\n\nPhoto by Ellieelien on Unsplash\n\nIf there’s one controversial statement about food, it’s this: breakfast is superior to all other meals.\n\nWe’ve heard time and time again that breakfast is the most important meal of the day, and that it’s absolutely crucial if you want to maintain a healthy weight. However, evidence such as the following cited in Time Magazine:\n\n“has found no strong connection between breakfast and weight loss.”\n\nEven so, I can confidently say that breakfast is indeed my favorite meal, and I’m not one to skip it. After all, the options are endless — pancakes, waffles, cereal, peanut butter toast, bagels, cinnamon rolls, and of course, oatmeal.\n\nIn fact, when I was in college, one of my campus dining halls served breakfast all day every single day. The walk to that building from my dorm room was 15 minutes further than the other dining hall which was practically right outside my door. Yet, I felt it was worth it to make the trek so I could eat my favorite breakfast foods whenever I wanted.\n\nAnd despite the wide variety of breakfast foods I consume every single week, there is one that I consume almost every morning, and it’s a staple that you should be eating as well.\n\nThe powerhouse I’m referring to is oatmeal. It’s the meal I’ve been eating for years that’s inexpensive, offers a number of mindblowing health benefits, and is incredibly delicious if you know how to make it right.\n\nHere’s why you should add it to your meal plan, and how to dress it up for optimal flavor.",
    "keywords": [
      "week",
      "day",
      "eating",
      "im",
      "meal",
      "favorite",
      "single",
      "foods",
      "oatmeal",
      "breakfast",
      "weight",
      "eat"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------e93d3c91_afd0_441f_b01e_8ce7e3d9ba38-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------e93d3c91_afd0_441f_b01e_8ce7e3d9ba38-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------e93d3c91_afd0_441f_b01e_8ce7e3d9ba38-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------e93d3c91_afd0_441f_b01e_8ce7e3d9ba38-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------e93d3c91_afd0_441f_b01e_8ce7e3d9ba38-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://williamfleitch.medium.com/there-will-be-no-laughing-on-election-night-3d1d498afc38?source=extreme_main_feed---------1-74--------------------c506091f_4072_4269_800e_6330c98a7053-------",
    "title": "There Will Be No Laughing on Election Night",
    "publish_date": "2020-10-13 20:34:19",
    "authors": [
      "Will Leitch"
    ],
    "summary": "But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off.\nBut one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000.\nAlready cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious.\nThere is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified.\nBut I damn sure know it won’t be funny.",
    "text": "NBC\n\nIn November 2000, I fell asleep to Al Gore being declared the next president, woke up to George W. Bush having won, and by lunchtime no one had any idea who had won or what was going on. What I remember the most is finding the whole thing very funny. And it was funny.\n\nI know now that being able to find such chaos amusing was a privilege, and an ugly one, of being an aimless but mostly comfortable white kid in his early 20s. One can argue about the specific differences of how the world would have turned out had Al Gore become president instead of George W. Bush, but there’s no question there were definite differences. But if you followed the race in 2000, this was not what everybody thought. I covered protests at the Democratic National Convention in Los Angeles that year — the same one Barack Obama couldn’t even get into — and the one thing every protestor believed, along with most young Gen Xers like myself, was that it didn’t matter whether the next president was Bush or Gore: They were two variations of the same flavor. That the race ended up so close sure didn’t feel like an accident. If you ask 300 million people whether they’d prefer two nickels or a dime, you shouldn’t be surprised when the results are 50–50. The madness that followed the close vote felt not like a moment of democratic peril. It felt like the logical conclusion to an incredibly stupid process. You just had to laugh.\n\nWhile watching 537 Votes, a new documentary about the 2000 Florida recount (and specifically the Miami-Dade county non-recount) that airs on HBO on October 21, I was reminded that it wasn’t just snarky former grunge kids who thought all this was ridiculous. The documentary itself is mediocre, more interested in cheap nostalgia and sight gags than the psychology of the era (director Billy Corben of Cocaine Cowboys has a persistent habit of dressing up his films with gimmicks rather than trusting his story to tell itself), but its ability to mine cultural artifacts of that time is remarkable. There’s a ton of clips from The Daily Show, and they each make a strong argument that the smugness that ultimately drove us all away from Jon Stewart was there from the get-go. There’s a reminder that Craig Kilborn used to host a late-night talk show. And there is a Wanda Sykes riff on Florida that is even rawer and more cutting 20 years later. But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off. Seriously, they found all of this hilarious. The most famous voice that night was Dan Rather and all his goofy homespun sayings—“If a frog had side pockets, he’d carry a hand gun”—but everyone was yucking it up. Second place was Tim Russert, the evening’s breakout star, with his whiteboards and his red states and blue states, with a big giddy grin on his face throughout, even at 3:17 a.m., like this was the most fun he’s ever had in his life. Isn’t this a blast? You hear the crew cackling off stage. What a night!\n\nIt sure seems less funny now.\n\nThere are many, many ways that 2020 is worse than 2000. (Sheesh, in 2000, Joe Rogan was just that guy from “NewsRadio.”) As Clare Malone pointed out in a fantastic piece for FiveThirtyEight, we’re a lot more polarized and a lot less likely to just give up and accept it if our preferred candidate loses in a tightly contested election. But one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000. Already cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious. There is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified. There is an awareness that if we are not careful about this democratic process, the whole thing could collapse.\n\nThere was none of that in 2000. It was all just a wacky story—this election is crazy close!—that was covered as if the stakes were a lot lower than they were. (Within three years, the NASDAQ collapsed, 9/11 happened and we were in multiple wars. The stakes turned out to be pretty freaking high.) What has changed, of course, is that we now know what a difference it can make when one candidate wins and one loses, that the entire nation is a fire just waiting for kindling, and that there are bad actors eager to pounce at the first sign of uncertainty. History will be made, and our anchors and analysts, by all accounts, understand how precise and meticulous they will need to be. And they understand, mostly, just how ungodly serious this is. And that’s where we’ve changed the most. In 2000, it felt like America would be around, and strong, forever, no matter who won, that the democratic process would do its job and we’d all be fine. Twenty years later, we’ve had 9/11 and endless wars and economic collapses and pandemics and Donald Trump. There are no illusions that America will just automatically land on its feet anymore. I don’t know how the networks, or the public, will react to what happens on November 3. But I damn sure know it won’t be funny.\n\nWill Leitch will be writing multiple pieces a week for Medium. He lives in Athens, Georgia, with his family, and is the author of five books, including the upcoming novel “How Lucky,” released by Harper next May. He also writes a free weekly newsletter that you might enjoy.",
    "keywords": [
      "sure",
      "2000",
      "lot",
      "night",
      "laughing",
      "democratic",
      "know",
      "thing",
      "election",
      "watching",
      "won"
    ]
  },
  {
    "url": "https://marquisele.medium.com/we-do-not-deserve-hospitals-abd8756d7bbf?source=extreme_main_feed---------2-74--------------------c506091f_4072_4269_800e_6330c98a7053-------",
    "title": "We Do Not Deserve Hospitals",
    "publish_date": "2020-10-15 03:05:18",
    "authors": [
      "Marquisele Mercedes"
    ],
    "summary": "We Do Not Deserve HospitalsMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\nAt one point, I was sent to another room nearby that was a little larger and had no extra chairs.\nMy mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy.\nHave you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum?\nHas a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?",
    "text": "We Do Not Deserve Hospitals\n\nMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\n\nSource: Unsplash\n\nOn a night in my early teens, I went to the Pediatric Emergency Department at Montefiore’s Children’s Hospital for intense cramps. I was expecting my period in a few days, but had never felt that way before — like a heat lamp was burning into the meat of my pelvis.\n\nMy mother and I spent the better part of 9 hours in a tiny room with speckled vinyl floors and too-bright fluorescents. At one point, I was sent to another room nearby that was a little larger and had no extra chairs. My mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy. A nurse told me to undress from the waist down and wait for the doctor.\n\nMy doctor came in and asked me — in a few different ways — if I’d ever been “penetrated”. I had not and said so — repeatedly. She referenced the development of my body, implied the crudeness of the boys around me. It was an unsaid question, but one that still required an answer. “No,” I said, “I’ve never put anything in there.” She said “if you say so”, before telling me to lay down, scoot my butt towards the end of the examination table, and spread my legs so she could “take a look.”\n\nI didn’t know what that meant, but she was the doctor, so I did what she told me to do.\n\nHave you ever screamed “no!” and “stop!” at the top of your lungs while being penetrated by an unidentified object that scraped at your most intimate insides? Have you ever been told to “be still” and “hold on” like your pain was the most mundane thing that had ever happened? Have you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum? Have you ever redressed yourself afterwards with shaky hands and legs and raucously laughed about it to your mom who was just a few feet away getting a cup of water when she heard the tail-end of your screams? Has a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?\n\nI was sent home with instructions to take Motrin and “stay out of trouble”. My mother and I rode the bus while she angrily pondered on whether I was still a virgin. I wrapped my arms around my middle and tried to protect something that felt like pierced cellophane. The tests for STIs came back clean.",
    "keywords": [
      "sent",
      "doctor",
      "mother",
      "required",
      "penetrated",
      "hospitals",
      "stop",
      "wait",
      "told",
      "deserve",
      "room",
      "say"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------c506091f_4072_4269_800e_6330c98a7053-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/javascript-in-plain-english/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6?source=extreme_main_feed---------4-73--------------------c506091f_4072_4269_800e_6330c98a7053-------",
    "title": "11 Frontend tricks that most Frontend Developers don’t know about",
    "publish_date": "2020-10-14 19:17:01",
    "authors": [
      "Daniel Anderson"
    ],
    "summary": "Datalist elementOne HTML element that you don’t see used much at all and for no reason!\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements.\nYou will see a drop-down list of pre-defined options as you type.\n<datalist>Example:<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\"><option value=\"Cat\"><option value=\"Dog\"><option value=\"Chicken\"><option value=\"Cow\"><option value=\"Pig\"></datalist>",
    "text": "1. Datalist element\n\nOne HTML element that you don’t see used much at all and for no reason!\n\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements. You will see a drop-down list of pre-defined options as you type.\n\n<datalist>\n\nExample:\n\n<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\">\n\n<option value=\"Cat\">\n\n<option value=\"Dog\">\n\n<option value=\"Chicken\">\n\n<option value=\"Cow\">\n\n<option value=\"Pig\">\n\n</datalist>",
    "keywords": [
      "dont",
      "tag",
      "11",
      "datalist",
      "valuecatoption",
      "valuepigdatalist",
      "reasonthe",
      "frontend",
      "know",
      "valuedogoption",
      "valuecowoption",
      "developers",
      "typedatalistexampleinput",
      "tricks",
      "valuechickenoption",
      "used"
    ]
  },
  {
    "url": "https://medium.com/better-marketing/10-websites-that-pay-you-for-your-writing-241e455ac262?source=extreme_main_feed---------6-73--------------------c506091f_4072_4269_800e_6330c98a7053-------",
    "title": "10 Websites That Pay You for Your Writing",
    "publish_date": "2020-10-13 20:26:49",
    "authors": [
      "Maryam Merchant"
    ],
    "summary": "10 Websites That Pay You for Your WritingWrite articles and get paid for your writingPhoto by Daria Shevtsova from PexelsAs a writer, we can’t always rely on one platform.\nAs every article I read about writing from top writers of Medium says, don’t put all eggs in one basket.\nIt means we need to look for other freelance writing platforms as well.\nSo if you want writing as a career or as a side hustle, then you need to mold yourself and, side by side, start looking at other freelance writing gigs that pay you.\nBut I still want to try something outside of this platform, so I found these ten websites that pay a writer for writing articles.",
    "text": "10 Websites That Pay You for Your Writing\n\nWrite articles and get paid for your writing\n\nPhoto by Daria Shevtsova from Pexels\n\nAs a writer, we can’t always rely on one platform. We all want to surf and get used to the competitive world. As every article I read about writing from top writers of Medium says, don’t put all eggs in one basket.\n\nIt means we need to look for other freelance writing platforms as well. So if you want writing as a career or as a side hustle, then you need to mold yourself and, side by side, start looking at other freelance writing gigs that pay you.\n\nAs a newbie, I found Medium two months back, and it’s one of the best platforms, which I am in love with. But I still want to try something outside of this platform, so I found these ten websites that pay a writer for writing articles. I just want to help you with that.",
    "keywords": [
      "articles",
      "platforms",
      "medium",
      "platform",
      "writing",
      "need",
      "freelance",
      "pay",
      "writer",
      "websites"
    ]
  },
  {
    "url": "https://medium.com/in-fitness-and-in-health/why-you-should-eat-oatmeal-at-least-once-a-week-9e6c1feadad9?source=extreme_main_feed---------9-73--------------------c506091f_4072_4269_800e_6330c98a7053-------",
    "title": "Why You Should Eat Oatmeal at Least Once a Week",
    "publish_date": "2020-10-12 14:55:31",
    "authors": [
      "Alyssa Atkinson"
    ],
    "summary": "Why You Should Eat Oatmeal at Least Once a WeekAnd how to make it taste incrediblePhoto by Ellieelien on UnsplashIf there’s one controversial statement about food, it’s this: breakfast is superior to all other meals.\nAfter all, the options are endless — pancakes, waffles, cereal, peanut butter toast, bagels, cinnamon rolls, and of course, oatmeal.\nIn fact, when I was in college, one of my campus dining halls served breakfast all day every single day.\nYet, I felt it was worth it to make the trek so I could eat my favorite breakfast foods whenever I wanted.\nAnd despite the wide variety of breakfast foods I consume every single week, there is one that I consume almost every morning, and it’s a staple that you should be eating as well.",
    "text": "Why You Should Eat Oatmeal at Least Once a Week\n\nAnd how to make it taste incredible\n\nPhoto by Ellieelien on Unsplash\n\nIf there’s one controversial statement about food, it’s this: breakfast is superior to all other meals.\n\nWe’ve heard time and time again that breakfast is the most important meal of the day, and that it’s absolutely crucial if you want to maintain a healthy weight. However, evidence such as the following cited in Time Magazine:\n\n“has found no strong connection between breakfast and weight loss.”\n\nEven so, I can confidently say that breakfast is indeed my favorite meal, and I’m not one to skip it. After all, the options are endless — pancakes, waffles, cereal, peanut butter toast, bagels, cinnamon rolls, and of course, oatmeal.\n\nIn fact, when I was in college, one of my campus dining halls served breakfast all day every single day. The walk to that building from my dorm room was 15 minutes further than the other dining hall which was practically right outside my door. Yet, I felt it was worth it to make the trek so I could eat my favorite breakfast foods whenever I wanted.\n\nAnd despite the wide variety of breakfast foods I consume every single week, there is one that I consume almost every morning, and it’s a staple that you should be eating as well.\n\nThe powerhouse I’m referring to is oatmeal. It’s the meal I’ve been eating for years that’s inexpensive, offers a number of mindblowing health benefits, and is incredibly delicious if you know how to make it right.\n\nHere’s why you should add it to your meal plan, and how to dress it up for optimal flavor.",
    "keywords": [
      "week",
      "day",
      "eating",
      "im",
      "meal",
      "favorite",
      "single",
      "foods",
      "oatmeal",
      "breakfast",
      "weight",
      "eat"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------0b02ac1e_3236_44b9_9b86_b3c5a9e25b84-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------0b02ac1e_3236_44b9_9b86_b3c5a9e25b84-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------0b02ac1e_3236_44b9_9b86_b3c5a9e25b84-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------0b02ac1e_3236_44b9_9b86_b3c5a9e25b84-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------0b02ac1e_3236_44b9_9b86_b3c5a9e25b84-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://gen.medium.com/2020-has-been-bad-but-things-are-going-to-get-worse-2e083903b0f4?source=extreme_main_feed---------0-74--------------------879f31d5_54f6_4744_b99b_b2265182c742-------",
    "title": "2020 Has Been Bad. But Things Are Going to Get Worse.",
    "publish_date": "2020-10-15 16:16:45",
    "authors": [
      "Colin Horgan"
    ],
    "summary": "2020 Has Been Bad.\nBut Things Are Going to Get Worse.\nThe pandemic revealed our society’s failings.\nPhoto: Markus Spiske/UnsplashEarlier in 2020, as the lockdowns arrived, time started to feel warped.\nDisparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.",
    "text": "2020 Has Been Bad. But Things Are Going to Get Worse.\n\nThe pandemic revealed our society’s failings. We’re running out of time to fix them.\n\nPhoto: Markus Spiske/Unsplash\n\nEarlier in 2020, as the lockdowns arrived, time started to feel warped. We began to ask ourselves whether we were living in the past or the present or whether we were caught somewhere in between. This feeling of inertia was a function of recognizing a time lag between when the virus arrived and when we realized it was here.\n\nThe coronavirus case counts we saw updated every morning were already history — reality as it was two weeks prior. What was happening had already happened but also had not happened yet. Gradually, as the weeks and months followed, we learned more about the virus, including how long it had actually been around us — as well as how unprepared our society and our systems were for its arrival.\n\nThe pandemic has proven to be a clarifying force. While it will likely change some aspects of our society, before it does, it is first revealing what kind of a society we already had: one that is teetering on decaying foundations that have either gone unseen or have been deliberately ignored for decades.\n\nIn nearly every Western democracy it has hit, the pandemic has disproportionately affected people of color, the poor, and the elderly. Sometimes, like in the U.S., it’s hit them all. In short, the virus has shown us where our most egregious inequalities lie. Disparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.\n\nWe are living on a neglected structure, poorly constructed decades ago and then left largely unchecked. Even when we had the chance, after its near-collapse in 2008, to reassess the system, we didn’t bother and instead were steered for another decade in an ideological vacuum, maybe the last true product of late capitalist boredom. This long-standing failure to account for the obvious disparities at the heart of our society is probably why the pandemic will likely create a so-called K-shaped recession — one wherein “big companies and rich families have largely recovered, whereas mom-and-pops and the moms and pops who run them are living through a second Great Depression,” as Annie Lowrey wrote recently at The Atlantic.\n\nWe live every day under a looming sense of delayed inevitability. How long can it go on?\n\nThe mechanisms we have that ought to help us address those disparities, like politics, law, or journalism, have also been revealed to be heavily damaged. Our democracies are stressed, not from external enemies as much as from internal rot. Rebuilding them would require us to inhabit a shared reality. Thanks somewhat to our current acoustic information sphere dominated by platforms of fantasy, we don’t have one.\n\nThat lag time we noticed in the spring now feels more familiar, if not constant. We live every day under a looming sense of delayed inevitability. How long can it go on?",
    "keywords": [
      "bad",
      "2020",
      "long",
      "revealed",
      "disparities",
      "pandemic",
      "living",
      "going",
      "worse",
      "weeks",
      "virus",
      "society",
      "things",
      "sense"
    ]
  },
  {
    "url": "https://gen.medium.com/amy-coney-barretts-confirmation-could-cause-a-right-to-privacy-domino-effect-e0e721c2c36a?source=extreme_main_feed---------1-74--------------------879f31d5_54f6_4744_b99b_b2265182c742-------",
    "title": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect",
    "publish_date": "2020-10-15 18:07:16",
    "authors": [
      "Jill Filipovic"
    ],
    "summary": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino EffectIf there’s no right to privacy, a whole line of rulings goes out the windowAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation.\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion.\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\nIf Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it.",
    "text": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect\n\nIf there’s no right to privacy, a whole line of rulings goes out the window\n\nAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation. Photo: Pool/Getty Images\n\nIf there is one stunningly clear takeaway from the hearings to confirm Amy Coney Barrett to the Supreme Court, it’s this: Enjoy your rights to bodily sovereignty and sexual privacy while you have them. Because if Barrett is confirmed to the Supreme Court, they may not last long.\n\nSupreme Court confirmation hearings are often farcical displays. A nominee, chosen from among the finest legal minds in the land and auditioning for a job to write legal opinions that have the power to profoundly shape Americans’ lives, sits before the Senate Judiciary Committee and purports to have few opinions at all on the cases and issues that are the most controversial and oft-discussed inside the legal academy and out of it. But Barrett brings the dissembling and disingenuous refusal to answer direct questions to a new level. No Supreme Court nominee in memory has been so evasive. And where Barrett hedges the most are the biggest tells: on the Affordable Care Act, on presidential powers in elections, and on reproductive rights and sexual privacy.\n\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion. She has said so herself, joining the “pro-life” faculty group at Notre Dame Law School, and signing an ad that said, “It’s time to put an end to the barbaric legacy of Roe v. Wade and restore laws that protect the lives of unborn children.” That isn’t a statement of a personal view; that’s a demand for the courts to act. And if confirmed, Barrett will be one of the nine people in the country with the power to do what the letter she signed demands.\n\nShe has already shown us her intentions. President Donald Trump believes her. Senate Republicans believe her. We should believe her, too.\n\nDiscerning what Barrett will do if she is elevated to the court is made a little more complicated by the fact that Barrett suddenly refuses to speak about her views at all. Neither she nor the president nor her Republican proponents in the Senate want her to be too transparent on the abortion question. Roe v. Wade is, after all, the law of the land, and most Americans do not want it overturned. The election concludes in just 20 days — a clear argument against holding these hearings now, but one Republicans have disregarded. If Barrett answers honestly in the confirmation hearings — if she says that she believes Roe was wrongly decided — then Republicans are going to face a lot of demands to vote no on her confirmation, and have a lot of angry voters on their hands.\n\nAnd so instead, we are treated to this joke of a hearing, where we all pretend that Barrett doesn’t believe exactly what she has repeatedly said she believes.\n\nBarrett is not the first Supreme Court nominee to dodge the abortion question. But she is even less committal than most. Ruth Bader Ginsburg answered clearly in her confirmation hearings that she believes Roe was rightly decided; Sonia Sotomayor agreed that Roe was settled law. Barrett won’t do that.\n\nTo add insult to injury, Senate Republicans (and a few Democrats) have spent precious minutes fawning over Barrett’s family and her ability to have both a career and a large family, something men have done for centuries without much comment. Over and over, conservative senators called Barrett a role model or an inspiration for girls and women (as if boys and men can’t look up to a woman). There is something particularly pernicious about demanding that women laud Barrett, a woman more in the mold of anti-feminist Phyllis Schlafly than women’s rights trailblazer Ruth Bader Ginsburg, as an icon of female accomplishment and professional possibility. It’s no coincidence that in the wake of Roe v. Wade and earlier cases establishing a right to contraception access, American women surged toward greater independence, going to college and into the workforce in record numbers. The lessons of safe abortion and readily available contraception reverberate around the world: When women can plan their families, women thrive. We live longer. We are far less likely to die in childbirth, and our children are less likely to die, too. We are more likely to go to school; so are our daughters. We are less likely to be trapped in abusive relationships, and less likely to be stuck in poverty. Our families are more prosperous. Our communities are healthier.\n\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\n\nFeminists have fought long and hard for these rights — including for the right of women to choose to have large families, as Barrett has, even if they are not worth nearly $2.6 million, as Barrett is, but are instead struggling to keep their children safe and secure. Republicans and conservatives like Barrett have cheered on large (white) families, while refusing to do much of anything to help out when families struggle. Feminists have tried to clear the way for women to make their own reproductive choices — to have children or not, without state interference or professional discrimination. Barrett has benefited from that feminist work, which is why she is now in a position to undermine it. Being told that feminists and women generally should appreciate that and admire her is a hard pill to swallow.\n\nBarrett won’t be the first anti-abortion judge on the court (although if Republicans are looking for firsts, she would be the first staunchly anti-abortion woman). But her hostility to reproductive rights extends far beyond Roe and the right to abortion. In the hearings, Barrett couldn’t answer whether she believed Griswold v. Connecticut, the case that extended contraception access to married women, was rightly decided. We know that her mentor, Antonin Scalia, believed Griswold was indeed decided wrongly, and given the chance, would likely have overturned it. We know Barrett has said that, while she is her own woman, she believes Scalia got most of his decisions right. While Roe gets a lot of press, Griswold is at the heart of many of the court’s most significant decisions — it was the first case that fully laid out the right to sexual privacy, which has been understood since then to include the right of any woman to use contraception and have an abortion; the right of people of the same sex to have consensual intercourse; and the right of individuals to marry someone of the same sex. If Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\n\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it. And she’s right that it’s been a while since states have criminalized contraception. But they haven’t done that because abortion rights and Roe have taken the bulk of the focus of the anti-abortion movement. It’s worth noting, though, that most mainstream anti-abortion groups do not support contraception access; some are publicly opposed to it, and some falsely characterize common contraceptive methods as “abortifacients.” These same groups have pushed legislation that establishes personhood at the moment of conception, something at odds with the medical definition of pregnancy, but that could outlaw several of the most common and effective forms of birth control and even criminalize in-vitro fertilization. That’s all very far from an academic exercise. It is not “unthinkable.” It is, in fact, part of a well-thought-out plan. If Roe is overturned, there’s little to stop conservative groups from pressing forward and coming for contraception next — or marriage equality, or the right to have consensual intercourse with an adult of the same sex.\n\nThe message from Barrett’s confirmation hearing was clear: This is all on the line. She does not believe there is a constitutional right to sexual privacy. The question is whether the weight of the precedent — dozens of cases over five decades, millions of Americans who rely on what they believe to be their right to use contraception, end unwanted or dangerous pregnancies, have sex, and get married — will be enough to tip Barrett’s originalist scales toward upholding the law as it stands.\n\nBarrett showed us who she is: a woman who will not affirm even the least contested rights to sexual privacy and family planning. Which means even the least contested of those rights could be up for grabs with Barrett on the Supreme Court.",
    "keywords": [
      "barretts",
      "women",
      "confirmation",
      "effect",
      "cause",
      "barrett",
      "court",
      "griswold",
      "domino",
      "privacy",
      "rights",
      "amy",
      "coney",
      "hearings",
      "contraception",
      "right",
      "roe"
    ]
  },
  {
    "url": "https://elemental.medium.com/my-therapist-says-all-relationships-are-impossible-d4c61f7df249?source=extreme_main_feed---------2-74--------------------879f31d5_54f6_4744_b99b_b2265182c742-------",
    "title": "My Therapist Says All Relationships Are Impossible",
    "publish_date": "2020-10-14 05:32:29",
    "authors": [
      "Naveen Kumar"
    ],
    "summary": "My Therapist Says All Relationships Are ImpossibleIt’s okay to lose a friendshipThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement.\nMy therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!).\nMy therapist put it bluntly: “All relationships are impossible.”All relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\nLabels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\nThis type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences.",
    "text": "My Therapist Says All Relationships Are Impossible\n\nIt’s okay to lose a friendship\n\nThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement. In the decade we’ve known each other, I had always felt comfortable talking to him about my own experience of otherness as an Indian American. But when I pointed to his whiteness as a privilege he ought to examine, he grew defensive, blew up, and ghosted.\n\nI’m not someone who falls out with friends easily or often. The few times it has happened, my instinct is to ask, “How did I get myself into this?” or “Why didn’t I see this coming?”\n\nWhen any situation in my life goes awry, I tend to perseverate, fixating on how I might have caused it to fly off the rails. “Am I a bad judge of character?” I think. My therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!). But when it comes to the shock of a breakup, whether with a friend or a romantic partner, it’s the fantasy that we can ever fully know someone, or achieve a kind of perfect unity that’s to blame.\n\nMy therapist put it bluntly: “All relationships are impossible.”\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\nHis statement was one of those breakthrough moments when my jaw dropped and I felt an immediate sense of relief. The existentialism of it thrilled me, and its practical application made perfect sense. In every relationship, there will always come a conflict (likely many over time) that indicates an unbridgeable distance between two people. Labels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\n“A lot of the things that the world tells us about what a relationship is supposed to be present an ideal that everyone feels they’re failing to live up to,” says Jamieson Webster, PhD, a psychoanalyst in New York City and author of Conversion Disorder: Listening to the Body in Psychoanalysis. It’s not just that the messages we get from pop culture, about fairy tale romance and lifelong BFFs, are unrealistic. The very idea that any relationship, no matter how close, can make us less alone or separate from each other is perhaps the ultimate human fantasy.\n\n“Separation and difference are very hard, including the capacity to understand being alone,” Webster says. “There is so much fantasy that tries to cover over ‘aloneness,’ which is simply a factual reality.”\n\nWhen we’re able to more clearly understand our innate separateness, we can also more readily accept that personal differences are bound to arise in every relationship. The question then becomes how two people acknowledge the essential distance between them, communicate their feelings about it, and reach a mutual resolution that doesn’t attempt to paper over it. Sometimes it’s possible to bridge the gap and continue forward together; in other cases, it may be time to move on. “Whether with a friend or a partner, it’s about what you build on the basis of your differences,” Webster says. “Because you are two unique people with different histories and different pleasures and pains.”\n\nRecognizing the impossibility of a “perfect” relationship is also useful when we seek to build new ones. While swiping through dating profiles, for example, it’s easy to point to a picture you don’t particularly like or the fact that someone prefers cats over dogs as reasons why it would never work out. This type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences. How many potential connections have we cut off at the pass due to preconceived notions of compatibility?\n\nBreakups are hard, even and especially with close friends. But they’re also the surest way to recognize, and even honor, the truth of our individuality. “Breakups really propel people forward in terms of their development,” Webster says. “Whether it’s with friends or partners, a breakup is a time to recover yourself and find your separateness,” something you may have been struggling to find inside the relationship. That doesn’t mean we shouldn’t allow ourselves to feel hurt and disappointed, or take responsibility for our role in the process. But rather than frame a breakup as a personal failure, we can acknowledge it as a reflection of one of life’s most essential truths.",
    "keywords": [
      "differences",
      "partner",
      "therapist",
      "fantasy",
      "impossible",
      "friend",
      "relationship",
      "webster",
      "friends",
      "relationships",
      "perfect"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------879f31d5_54f6_4744_b99b_b2265182c742-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------4-73--------------------879f31d5_54f6_4744_b99b_b2265182c742-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------5-73--------------------879f31d5_54f6_4744_b99b_b2265182c742-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/better-marketing/why-is-linkedin-such-a-cringefest-b2b29ca60833?source=extreme_main_feed---------7-73--------------------879f31d5_54f6_4744_b99b_b2265182c742-------",
    "title": "Why Is LinkedIn Such a Cringefest?",
    "publish_date": "2020-09-01 18:54:04",
    "authors": [
      "Sean Kernan"
    ],
    "summary": "For example, Rule #1 of getting internet points (be hot), applies to LinkedIn, even if the post has no relation to the purpose of the platform.\nJust as an FYI, if you leave a comment on a LinkedIn post, it’s automatically going to show that post, with your comment highlighted, to a number of your connections.\nHe emailed me something to the effect of, “How’d you know that about that wolf post?” Then I explained it to him (I consume a lot of wildlife documentaries), and also explained my harsh tone.\nAuthor via LinkedinLove it or hate it, Linkedin is full of lurkers.\nLinkedIn has become a meme.",
    "text": "Why Do Such Trash Posts Go Viral?\n\nThere’s a couple of reasons.\n\nYes, short attention spans are a part of it. But, by far, the biggest contributor is that lots of users aren’t good at English. And I say that with no malice.\n\nMany non-native speakers see these posts and can’t see the nuance of why it’s terrible writing. But they recognize the simple verbs and nouns. They put the puzzle together and hail praise to the mighty turd.\n\nI can't blame them. I’d probably upvote a Spanish shitpost without knowing it.\n\nHere’s a tone-deaf example. This went super-viral:\n\nSource: author via linkedin\n\nNote on the above: they said they don’t want money but then later in the post say they want a salary increase.\n\nQuick side tip: don’t capitalize words unless there is a very specific reason. The tone can be interpreted as a bit hostile. Also, don’t ever write a post like that.\n\nMy theory is that any algorithm-based platform, including Medium, will eventually devolve into Facebook without some sort of intervention. Human beings don't know how to optimize for quality on their own.\n\nFor example, Rule #1 of getting internet points (be hot), applies to LinkedIn, even if the post has no relation to the purpose of the platform.\n\nCase in point:\n\nAuthor via Linkedin\n\nTheir English might be bad. But all men are fluent in thirst. Just as an FYI, if you leave a comment on a LinkedIn post, it’s automatically going to show that post, with your comment highlighted, to a number of your connections.\n\nIt won’t be great personal branding. I learned this first hand.\n\nI was messaged by my CEO after I left a frustrated comment on a post. You may recognize the post. It goes viral at least once a year.\n\nAuthor via ipinimig\n\nThere will always be thousands of comments about how amazing this meme is and how companies should be just like wolf packs.\n\nThe problem? That isn’t how wolf packs operate.\n\nThe alpha doesn’t just sit at the back and it’s ridiculous that this meme keeps getting recirculated. No, this fake-story isn’t a world-changing issue. It’s just annoying that people just make up science to fit a clicky narrative.\n\nI left a comment correcting it, perhaps a bit bluntly. My comment got buried in the cluttered sludge of fanboys. Unexpectedly, my CEO saw the comment.\n\nHe emailed me something to the effect of, “How’d you know that about that wolf post?” Then I explained it to him (I consume a lot of wildlife documentaries), and also explained my harsh tone.\n\nI’ll give you one last example. It is constantly going viral.\n\nSource: author via factcheck\n\nThis isn’t what happened. The baby on the right isn’t even the same baby. The girl on the right is the sister of the girl on the left.\n\nThe bigger point: we need to be careful about how we engage on these platforms. It’s super easy to look like a dumb-dumb because of all the blatantly false content that floats around.\n\nAdditionally, we need to be mindful of our ego. Resist the urge to flex post.\n\nAuthor via Linkedin\n\nLove it or hate it, Linkedin is full of lurkers. They are quick to judge. And many of those judgemental lurkers scan resumes for a living. Don’t be a cringe bot.\n\nLinkedIn has become a meme. But you don’t have to be part of it. Lest you join the annals of bad marketing.\n\nAnd men, enough with the thirst comments. It’s super weird. In the history of man, I don’t think they’ve ever led to anything good, particularly when your supervisor sees it.",
    "keywords": [
      "dont",
      "isnt",
      "cringefest",
      "thirst",
      "example",
      "linkedin",
      "comment",
      "post",
      "meme",
      "super",
      "wolf"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/top-4-dying-programming-languages-of-2020-1a4149753e92?source=extreme_main_feed---------8-73--------------------879f31d5_54f6_4744_b99b_b2265182c742-------",
    "title": "Top 4 Dying Programming Languages of 2020",
    "publish_date": "2020-09-29 12:15:03",
    "authors": [
      "Shubham Dixit"
    ],
    "summary": "Perl programming languagePerl programming language has seen a sharp decline.\nSource: Google trends (screenshot by author)Also, the red line in the picture above nearly touches the ground, they are from Google trends results.\nHaskell programming languageHaskell programming language is actually getting better.\nObjective-C programming languageThe Objective-C programming language is actually gaining popularity according to the PYPL index, and is in a 0.2% increase in trend.\nThe Google trends are of this type for Visual Basic programming language.",
    "text": "1. Perl programming language\n\nPerl programming language has seen a sharp decline. It was active in 2004 till 2009, and after that, it had seen a decline. Now, it is not dead, but also not active anymore.\n\nThere are fewer searches on YouTube, Google. Look, a video uploaded 4 years ago, and garnered only 240K views.\n\nAlso, the PYPL index tells the percentage of its decline in this year.\n\nPerl is experiencing a downward trend, so I shifted to another language for more insights.\n\nSource: Google trends (screenshot by author)\n\nAlso, the red line in the picture above nearly touches the ground, they are from Google trends results.\n\n2. Haskell programming language\n\nHaskell programming language is actually getting better. It is used by most companies namely Facebook, IBM.\n\nSource: YouTube\n\nAlso, youtube video shows that a video uploaded 5 years ago, and garnered 535K views.\n\nSource: Google Trends\n\nAlso, google trends results show a consistent trend (in blue line). It nearly touches the line below.\n\nIn comparison to it, the red line (Python) shows an upward trend and is in popularity as well.\n\n3. Objective-C programming language\n\nThe Objective-C programming language is actually gaining popularity according to the PYPL index, and is in a 0.2% increase in trend.\n\nSource: Google Trends\n\nThere are still plenty of people using Objective-C, of course, but they are programming.\n\nIf you are looking for work, or ever plan to in the future, then Swift is the only game in town.\n\nSource: YouTube\n\nAlso, the video uploaded 5 years ago has garnered 250K views till now.\n\nThere are jobs available for Objective-C, and people are actually paying well in the industry.\n\n4. Visual Basic for Applications programming language\n\nVisual Basic goes all the way from being at the top trends in 2004, and after 2009 it came straightway towards its decline. Though I had worked with visual basic, in school.\n\nThe Google trends are of this type for Visual Basic programming language.\n\nSource: Google trends (screenshot by author)\n\nAnd it’s hard to see this language going down in popularity.\n\nMoreover, the numbers from the PYPL index depicts a decline of 0.2%.\n\nI have not seen any video in my YouTube feed that relates to visual basic. So, it might have gone down there as well.\n\nI came across a video on YouTube, that’s uploaded 9 months ago, and garnered 810K views.",
    "keywords": [
      "2020",
      "basic",
      "uploaded",
      "visual",
      "languages",
      "decline",
      "youtube",
      "video",
      "language",
      "programming",
      "google",
      "trends",
      "dying"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------9-73--------------------879f31d5_54f6_4744_b99b_b2265182c742-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------53ff1108_0b9f_4e6d_9c78_1a95e9d4cd8e-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------53ff1108_0b9f_4e6d_9c78_1a95e9d4cd8e-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------53ff1108_0b9f_4e6d_9c78_1a95e9d4cd8e-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------53ff1108_0b9f_4e6d_9c78_1a95e9d4cd8e-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------53ff1108_0b9f_4e6d_9c78_1a95e9d4cd8e-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://hjauquet.medium.com/i-am-a-pro-life-housewife-1ff2cf1b05ec?source=extreme_main_feed---------0-74--------------------6fbd40a4_5165_4676_9c69_1859a5d641f2-------",
    "title": "I am a Pro-Life Housewife",
    "publish_date": "2020-10-15 13:43:33",
    "authors": [
      "Heather Jauquet"
    ],
    "summary": "I am a Pro-Life HousewifeAnd I’m not voting for TrumpPicture by Maria Oswalt on UnsplashAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\nThey are seeing that while Trump is considered the pro-life candidate, he is not pro-life.\nBeing pro-life means having a consistent life ethic from womb to tomb.\nPro-life means honoring the sanctity of life at all stages.\nDon’t discount the vote of the pro-life housewife who is working towards change.",
    "text": "I am a Pro-Life Housewife\n\nAnd I’m not voting for Trump\n\nPicture by Maria Oswalt on Unsplash\n\nAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\n\nI acknowledge that I hate discussing politics and often hesitate to share my views. On the rare occasions I do, it’s usually about my support for the sanctity of human life. I have been admonished by friends from both political parties telling me that I am not pro-life enough, or I’m anti-woman, or I’m not Christian enough, or that I’m too naive. One person, went even so far as to tell me about her “great disappointment” in me and suggested I shouldn’t share my views or should only share them with like-minded people. But if I do as she suggested, my views go in an echo chamber and I forgo the opportunity for rich discussion and to see another perspective. While I might not change someone’s mind, I hope we walk away with a different perspective and the willingness to view every story with grace and compassion.\n\nI grew up loving Jesus and loving my country And now, as a pro-life religious conservative, I’m feeling bereft, without a political party who represents me. To be honest, I felt that way at the last election and even more so now. I disagree with the democratic platform on the issue of abortion. But I abhor the ongoing lack of respect for human life as demonstrated by the current president.\n\nAs we get closer to the U.S. Presidential election there is a contingent of pro-life Catholics and evangelicals who are making their departure from supporting Trump known. They are seeing that while Trump is considered the pro-life candidate, he is not pro-life. His actions against the marginalized show the truth.\n\nBeing pro-life means having a consistent life ethic from womb to tomb. It means valuing human life at all stages, not just when it’s convenient. Often when a new election looms on the horizon the discussion of life becomes a heated topic of debate: When should life be valued? Who is valued?\n\nI cannot in good conscience vote for a man who doesn’t value human dignity and decency. I cannot embrace the politics of a man who is willing to put children in cages and has not, as of yet, addressed the allegations of forced hysterectomies on Immigration and Custom Enforcement (ICE) detainees.\n\nI cannot support a leader who refuses to face the pandemic head on in hopes that it will disappear. The leader of our country mocked his political opponent for wearing a mask and then came down with the very plague he tried to ignore. Then he exposed his staff to the virus. That is not pro-life. It’s a flagrant display of ego and of disrespect for the people who work for him and the 209,000 dead that preceded his diagnosis.\n\nI cannot support a man who is unwilling to denounce white supremacy. It is not pro-life when President Trump refused to denounce white supremacy, but instead told the Proud Boys to “Stand back and stand by.” Pope Francis said in a message to the people of the United States after the killing of George Floyd: “We cannot tolerate or turn a blind eye to racism and exclusion in any form and yet claim to defend the sacredness of every human life.”\n\nWhen then candidate Trump mocked a disabled journalist during the 2016 campaign some people laughed, more were disgusted. His mockery is not pro-life. It points fingers and makes fun of people who are not neurotypical. I have a neurodivergent son and to know that he would be mocked or have his disability used against him is infuriating and heart wrenching. I expect more out of a leader. I expect compassion and restraint.\n\nHow can we support a pro-life candidate who is anything but? His hypocrisy is blatant.\n\nI am ardently pro-life. I hold that position because I believe in the dignity and the sanctity of human life. I believe we are made in the image of God and when we love one another we share the love of Jesus. I believe life is sacred. All life. I believe it begins in the womb and ends at natural death. At a lecture at Fordham University, Cardinal Joseph Bernardin shared this consistent life ethic: “The spectrum of life cuts across the issues of genetics, abortion, capital punishment, modern warfare and the care of the terminally ill.” In short, it’s valuing all life: the infirm, the dying, the disabled, the ones in cages whether they be prisons or at the border, the mentally ill.\n\nWe should show empathy, compassion, and grace when we talk to people about their situations. If we refuse to acknowledge the humanity, do people’s stories simply become pawns in our political stances?\n\nI believe we are called to serve one another. I believe in grace. I believe we shouldn’t be reduced to our mistakes. I believe that we are all broken, and that in our brokenness we can learn to see the whole person and embrace grace. Bryan Stevenson beautifully articulates how brokenness brings about compassion in his book Just Mercy: A story of Justice and Redemption. In his book, Stevenson describes our broken judicial system where too many are given a death sentence for crimes that they did not commit or crimes that do not warrant it.\n\nThe most politically active part of the pro-life position seeks an end to abortion. I fervently wish for an end for abortion. We also need to put in resources to empower women. This means consistent and available health care. This means jobs and housing. This means education. It means giving women the ability to support themselves and their children. It means support. We cannot demonize women for their decisions if we turn a blind eye to their needs. There are religious organizations that help women in crisis pregnancies and one of my favorites is The Gabriel Network whose slogan is “Empower Women.” They not only provide housing, but also angel friends who take women to their appointments, spend time with them getting to know them, and help by anticipating their needs whether it be friendship, baby supplies, or a hand to hold. The Gabriel Network also provides scholarships to help women further their education and careers.\n\nMany people see a pro-life position as a religious one. It is for me, but, it doesn’t have to be. Pro-life means honoring the sanctity of life at all stages. There are other organizations not affiliated with any religion that support a consistent life ethic such as New Wave Feminists and Rehumanize International. New Wave Feminists recognizes the “…full humanity of both the unborn child and the mother and looks to rebuild a culture that embodies legitimate justice for all.” Rehumanize International is a “…human rights organization dedicated to creating a culture of peace and life, and in so doing…seek to bring an end to all aggressive violence against humans through education, discourse, and action.”\n\nWhat if we set aside the presuppositions that being pro-life means that it is only a religious issue or a political stance? What if we used our time and energy to support, encourage, and embrace the sanctity of human life? When we stop pitting pro-choice and pro-life advocates against one another, we could do beautiful work together and shelter the homeless, clothe the naked, and feed the hungry. We can empower women, provide adequate healthcare, end racism, and advocate for social justice.\n\nAs I continue to read, listen, and learn, I embrace the dignity and sanctity of all human life. I acknowledge that if we want to change minds and change hearts, we have to be willing to listen to one another. Don’t discount the vote of the pro-life housewife who is working towards change.",
    "keywords": [
      "life",
      "women",
      "trump",
      "housewife",
      "human",
      "prolife",
      "believe",
      "support",
      "means",
      "sanctity",
      "political"
    ]
  },
  {
    "url": "https://level.medium.com/what-spike-lees-get-on-the-bus-got-right-and-wrong-about-the-million-man-march-2add4af00fc0?source=extreme_main_feed---------2-74--------------------6fbd40a4_5165_4676_9c69_1859a5d641f2-------",
    "title": "25 Years After the Million Man March, the Same Struggles for Black Liberation Persist",
    "publish_date": "2020-10-16 15:15:53",
    "authors": [
      "Julian Kimble"
    ],
    "summary": "And while many Black men agree that they need to do better for the sake of Black people, there’s rarely agreement about the particulars.\nThe movie follows a group of Black men who trek from South Central Los Angeles to Washington, D.C., for the events of October 16, 1995.\nWhile the Million Man March looms large in the film, it’s simply as backdrop; instead, Get on the Bus focuses on the interactions between the travelers.\nWhile the Million Man March may have been established in the spirit of progress, it wasn’t a progressive effort.\nAnd you can’t claim to want what’s best for Black people unless you want it for all Black people.",
    "text": "What Spike Lee’s ‘Get on the Bus’ Got Right — and Wrong — About the Million Man March\n\nA revisiting of the film highlights hurdles Black Americans have yet to overcome\n\nOssie Davis, Isaiah Washington, Andre Braugher, Charles S. Dutton, and a group of men standing next to a bus in a scene from the film ‘Get on the Bus,’ 1996. Photo: Universal/Getty Images\n\nBlack liberation has long been hindered by Black masculinity. Too often, ideas about how Black people can improve their circumstances don’t benefit anyone who isn’t male and heterosexual. And while many Black men agree that they need to do better for the sake of Black people, there’s rarely agreement about the particulars. This reality is one of the driving themes of Spike Lee’s 1996 film, Get on the Bus, which dropped exactly one year after its source of inspiration: the Million Man March.\n\nThe movie follows a group of Black men who trek from South Central Los Angeles to Washington, D.C., for the events of October 16, 1995. Among them are Evan (Thomas Jefferson Byrd), who as part of a court order is literally shackled to the son he neglected (De’Aundre Bonds); Xavier (Hill Harper), an idealistic film student who’s documenting the trip; Flip (Andre Braugher), an obnoxious working actor; Gary (Roger Guenveur Smith), a self-righteous LAPD officer; Kyle (Isaiah Washington) and Randall (Harry Lennix), a couple whose relationship is in dire straits; and Jeremiah (Ossie Davis), the moral center who regrets not attending the March on Washington more than 30 years prior.\n\nBy the end of the film, it’s unclear whether the dial has moved for certain characters — but 24 years later, several of the societal issues those characters represent are still stuck in place.\n\nWhile the Million Man March looms large in the film, it’s simply as backdrop; instead, Get on the Bus focuses on the interactions between the travelers. “People from all different socioeconomic, political backgrounds — which is a combustible mix,” Lee told Charlie Rose of the characters in 1996. Lee and writer Reggie Rock Bythewood depict the trip as a spiritual and emotional journey for the group based on the inevitable conflicts while they’re on the road. The characters represent a variety of issues and perspectives, some of which reveal a lingering resistance to change. By the end of the film, it’s unclear whether the dial has moved for certain characters — but 24 years later, several of the societal issues those characters represent are still stuck in place.\n\nWhile the Million Man March may have been established in the spirit of progress, it wasn’t a progressive effort. Its organizer, Nation of Islam leader Louis Farrakhan, is notorious for his sexism, homophobia, and anti-Semitism. Yet, despite the conservatism at its core, the march stands as a significant display of unity. Given the circumstances at the time — the persistent fallout from the crack epidemic, the 1994 crime bill that led to a surge in mass incarceration, and the notion that Black men were “under attack” in general — many chose to overlook Farrakhan’s radioactive history in favor of the greater good for which he fought.\n\nSome of the characters in Get on the Bus are willing to follow Farrakhan’s lead due to desperation. When Craig (Albert Hall), the original bus driver, tells trip organizer George (Charles S. Dutton) about his teenage daughter’s pregnancy, he acknowledges that he’ll be “all ears” if Farrakhan has a way to deal with the situation. It’s a shortsighted consideration, but Farrakhan and the NOI have long appealed to Black people who feel they’re out of options for whatever reason, so his outlook might catch the ear of a father who feels his daughter has strayed from the values he’d attempted to instill in her.\n\nHowever, the idea that the overarching principle of the march was bigger than Farrakhan himself is also expressed in Get on the Bus. “I guess if the brothers are gettin’ together — you know, talkin’ about some things, tryin’ to work things out — I wanna be there,” Gary tells Xavier, who’s interviewing as many people as he can about their decision to attend the march. Gary is guided by the idea that anyone interested in the march is willing to put whatever differences they have aside, but that proves extremely difficult in an atmosphere of people with different backgrounds, lifestyles, and personality types.\n\nTensions arise within the group as its members get to know one another. Gary’s father, who was also a cop, was murdered by a gang member; when Jamal (Gabriel Casseus) reveals that he’s a reformed Crip who found Islam after committing several murders, Gary vows to put Jamal behind bars once they return to L.A. It doesn’t matter that Jamal works to prevent kids from making the mistakes he made — Gary only sees a murderer akin to his dad’s killer. Meanwhile, Flip serves as a consistently volatile presence throughout Get on the Bus. He craves attention, so when Flip isn’t questioning Gary’s Blackness (his mother is White), he’s name-dropping, overcompensating for his insecurity through misogyny, and being brazenly homophobic. He attacks Randall and Kyle, neither of whom back down. And when the confrontation turns physical, he falls victim to his own hubris.\n\nYou can’t call for empowerment without understanding that capitalism isn’t the solution. You can’t vow to do better by Black women, then not only fail to do so, but fail to understand why they don’t feel safe. And you can’t claim to want what’s best for Black people unless you want it for all Black people.\n\nAs reprehensible as Flip is at times, he’s far more tolerable than Wendell (Wendell Pierce), a car dealership owner who joins the bus in Memphis and then quickly draws the ire of the group. “Every brother ain’t righteous,” a skeptical George says of Wendell, a proud Black Republican who disparages HBCUs as “nigga schools” and rants about bootstrapping his way to success in between cigar puffs. Wendell, who sees the march as a massive networking opportunity, is an example of how capitalism can be a gateway drug to Republicanism, and his diatribe leads to him being forcefully removed from the bus.\n\nThe overall message isn’t subtle: On the way to atonement, these men confront several issues inhibiting progress for Black people as a whole. They don’t make it to the march, but the ordeal still provides a sense of fellowship. Before their journey home, George gives an impassioned speech about the real work beginning once they return. Alas, camaraderie doesn’t equate to evolution or progress. While attitudes on some issues presented in Get on the Bus have shifted slightly — especially across generational lines — many of the same conversations still take place regularly because of how deeply matters like capitalism, sexism, misogyny, and homophobia are embedded in society.\n\nYou can’t call for empowerment without understanding that capitalism isn’t the solution. You can’t vow to do better by Black women, then not only fail to do so, but fail to understand why they don’t feel safe. And you can’t claim to want what’s best for Black people unless you want it for all Black people. Some of these problems are structural and thus difficult to change in 25 years’ time — but others require more personal accountability, and genuine progress is impossible if accountability is treated like a prison.\n\nGet on the Bus leaves viewers with the image of Evan Sr. and Evan Jr.’s shackles lying in front of the Lincoln Memorial. It’s a callback to the shackles, chains, and handcuffs seen at the beginning of the film, which imply that the experience has brought forth liberation, or at least the foundation for it. But with some distance from both the film and the Million Man March that inspired it, the state of the world suggests that in certain instances, the shackles remain in place — locked by the very hands they bind.",
    "keywords": [
      "persist",
      "characters",
      "liberation",
      "men",
      "black",
      "25",
      "million",
      "bus",
      "man",
      "struggles",
      "film",
      "cant",
      "issues",
      "isnt"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------6fbd40a4_5165_4676_9c69_1859a5d641f2-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/javascript-in-plain-english/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6?source=extreme_main_feed---------4-73--------------------6fbd40a4_5165_4676_9c69_1859a5d641f2-------",
    "title": "11 Frontend tricks that most Frontend Developers don’t know about",
    "publish_date": "2020-10-14 19:17:01",
    "authors": [
      "Daniel Anderson"
    ],
    "summary": "Datalist elementOne HTML element that you don’t see used much at all and for no reason!\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements.\nYou will see a drop-down list of pre-defined options as you type.\n<datalist>Example:<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\"><option value=\"Cat\"><option value=\"Dog\"><option value=\"Chicken\"><option value=\"Cow\"><option value=\"Pig\"></datalist>",
    "text": "1. Datalist element\n\nOne HTML element that you don’t see used much at all and for no reason!\n\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements. You will see a drop-down list of pre-defined options as you type.\n\n<datalist>\n\nExample:\n\n<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\">\n\n<option value=\"Cat\">\n\n<option value=\"Dog\">\n\n<option value=\"Chicken\">\n\n<option value=\"Cow\">\n\n<option value=\"Pig\">\n\n</datalist>",
    "keywords": [
      "dont",
      "tag",
      "11",
      "datalist",
      "valuecatoption",
      "valuepigdatalist",
      "reasonthe",
      "frontend",
      "know",
      "valuedogoption",
      "valuecowoption",
      "developers",
      "typedatalistexampleinput",
      "tricks",
      "valuechickenoption",
      "used"
    ]
  },
  {
    "url": "https://uxdesign.cc/the-future-of-apple-ipad-b659b7da75a7?source=extreme_main_feed---------5-73--------------------6fbd40a4_5165_4676_9c69_1859a5d641f2-------",
    "title": "The future of Apple iPad",
    "publish_date": "2020-10-09 22:27:25",
    "authors": [
      "Ali Çorak"
    ],
    "summary": "Harddisk connection, mouse, Bluetooth mouse, Bluetooth keyboard, keyboard with USB-C, etc…We were able to use the iPad as a computer with keyboards.\nAlthough the Magic Keyboard is made for iPad Pro, which is more advanced than other iPads, it now supports iPad Air 4th generation.\nWe use the iPad in a horizontal position with Magic Keyboard.\nWe don’t need a new computer, we’re just looking for a screen; iPad provides this with Sidecar support.\nWhen John Ive left Apple, he founded the design agency LoveFrom and his first customer was Apple.",
    "text": "Catalyst takes care of everything when you develop for iPadOS or iOS with recommendations from Apple. The application becomes available for macOS. As you can imagine, it looks “like a Mac” on the iPad. Also, if you have written your application with Swift, Catalyst is not needed. SwiftUI will automatically adapt to macOS. But SwiftUI supports iOS13 and above. This means that devices with the latest iOS 12 (such as iPhone 6, which are currently widely used in the market) will not be supported.\n\nIt’s a Computer. Because;\n\niPad Pro + Magic Keyboard\n\nAfter making software innovations to the old generations and hardware to the new generations, the iPad became a computer. Harddisk connection, mouse, Bluetooth mouse, Bluetooth keyboard, keyboard with USB-C, etc…\n\nWe were able to use the iPad as a computer with keyboards. But some things could affect the user experience. (Touching the screen and using the keyboard was difficult for some) But then the trackpad came on the Magic Keyboard. Although the Magic Keyboard is made for iPad Pro, which is more advanced than other iPads, it now supports iPad Air 4th generation.\n\nIf we talk about other hardware details, if you use your iPad Pro with Magic Keyboard, there are 2 USB-C ports in total; Like MacBook Air. This is an advantage because any extra accessory you buy for the MacBook can be used for the iPad. (and yes, wish we didn’t have to buy extra accessories) In the end, Magic Keyboard does not move 360 ​​degrees like the Smart Folio Keyboard. I don’t know why but I think it looks like a laptop.\n\nWe use the iPad in a horizontal position with Magic Keyboard. That’s why sidebar matters. But as a problem, some applications open vertically even in a horizontal position. (Maybe it will improve in the future because it will not give a MacBook experience like this)\n\nNote: If you are used to doing operations such as volume up/volume down increase/decrease screen light from the keyboard, unfortunately, there are no top keys in Magic Keyboard.\n\nIt’s Not a Computer. Because;\n\nApple’s Sidecar\n\nWhen using a laptop or desktop, we sometimes need a second screen. We don’t need a new computer, we’re just looking for a screen; iPad provides this with Sidecar support. iPad is not a computer here; a screen.\n\nAnother topic is games; We know that MacBook is not preferred for games. But the iPhone performs well in games. I’m not a gamer but in games, the iPad performs like an iPhone, not MacBook. Moreover, there is controller support.\n\nThe iPadOS should no longer be compared to the iPhone or the Mac. It seems to be between macOS and iOS, but it is not. Special applications should be made for the iPad. For example, the Sharpr3D app is just for the iPad.\n\nSharpr3D\n\nIn other words, you can also do professional works such as 3D modeling, video editing, photo editing on the iPad. So what’s the limit? It’s not currently at the Mac level. You can edit a very good video with an app such as Luma Fusion, iMovie, Adobe Rush on iPads. But when you want to take this to a more professional level, iPads will not be suitable for you.\n\nLuma Fusion\n\nNote: Everyone talks about Apple after John Ive. When John Ive left Apple, he founded the design agency LoveFrom and his first customer was Apple. So Apple still works with John Ive.",
    "keywords": [
      "future",
      "iphone",
      "ipad",
      "computer",
      "magic",
      "screen",
      "macbook",
      "games",
      "used",
      "apple",
      "keyboard"
    ]
  },
  {
    "url": "https://towardsdatascience.com/fastapi-has-ruined-flask-forever-for-me-73916127da?source=extreme_main_feed---------6-73--------------------6fbd40a4_5165_4676_9c69_1859a5d641f2-------",
    "title": "FastAPI has Ruined Flask Forever for Me",
    "publish_date": "2020-10-11 09:01:22",
    "authors": [
      "Fahmi Nurfikri"
    ],
    "summary": "FastAPI has Ruined Flask Forever for MeWhy I prefer using FastAPI instead of FlaskFastAPI Logo — https://fastapi.tiangolo.comWhat do you like best about being a data scientist?\nIf you need to look for something about FastAPI, you usually don’t need to look anywhere else.\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running.\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords.\nFastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.",
    "text": "FastAPI has Ruined Flask Forever for Me\n\nWhy I prefer using FastAPI instead of Flask\n\nFastAPI Logo — https://fastapi.tiangolo.com\n\nWhat do you like best about being a data scientist? It’s definitely modeling and fine-tuning for optimal results. But what does it mean to be a good model if it’s never used or never deployed?\n\nTo produce a machine learning model, the typical approach is to wrap it in a REST API and use it as a microservice. One of the most widely used frameworks for creating APIs is Flask.\n\nThe main reason Flask is widely used is its simplicity. In general, we only use the API to model predictions, so we don’t need a complex architecture (example: Django). Another reason is that Flask is written in Python, which is the language used to do machine learning modeling in general, so we are familiar with it.\n\nHowever, if you want to create a REST API with clear, static, inputs that are validated, you must include several different packages from several third parties that do not cooperate with each other. And you have to create custom code to get everything running.\n\nThis is what caused me to look for alternatives for my needs, where finally I found a framework called FastAPI and it became my new favorite framework. Here are the reasons why I like to use FastAPI.\n\nDocumentation\n\nThe first thing I notice from FastAPI is the documentation. FastAPI has very extensive documentation and rich examples, which makes things easier. If you need to look for something about FastAPI, you usually don’t need to look anywhere else.\n\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running. So that we don’t need to write the API documentation that we created ourselves. As we all know, writing API documentation is annoying, not only because there is a lot of detail to go into, but also nothing more frustrating when the end-users are implementing but not match up the documentation. So that with the automatic generation of API documentation it will be very helpful\n\nBelow is a display example of the API documentation (provided by Swagger UI)\n\nAlternative automatic documentation is also provided (provided by ReDoc)\n\nTo define the created schema, it uses Pydantic, which is another awesome Python library, used for data validation. Its purpose is to validate the input that goes to FastAPI. If the input/request is incorrect then the appropriate error code will be returned.\n\nPerformance\n\nAs the name implies, this is indeed FastAPI. Based on data from techempower benchmarks, FastAPI beats every framework when it comes to performance. Where the most commonly used frameworks like Flask and Django lag behind.\n\nFramework performance — techempower\n\nYeah, it blazingly fast.\n\nAsynchronous\n\nOne of the drawbacks of Flask is the lack of asynchronous I/O support. Asynchronous is pretty important for HTTP endpoints, which tend to do a lot of waiting for I/O and network chat, making it a good one candidate for concurrency using async.\n\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords. FastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.\n\nAll you have to do is declare the endpoints with the async keyword like this:",
    "keywords": [
      "api",
      "dont",
      "using",
      "forever",
      "framework",
      "documentation",
      "flask",
      "need",
      "used",
      "ruined",
      "asynchronous",
      "fastapi"
    ]
  },
  {
    "url": "https://medium.com/personal-growth/6-psychological-reasons-why-you-take-things-too-personally-6c46c21402a1?source=extreme_main_feed---------9-73--------------------6fbd40a4_5165_4676_9c69_1859a5d641f2-------",
    "title": "6 Psychological Reasons Why You Take Things Too Personally",
    "publish_date": "2020-09-15 01:31:24",
    "authors": [
      "Nick Wignall"
    ],
    "summary": "If you want to stop taking things personally don’t generalize a mistake in behavior to a flaw in character.\nTaking things personally often means you value other people’s opinions too much and your own not enough.\nAnd it doesn’t take a psychologist to see how this is going to lead you to take things personally.\nAnd when you do that, you’ll find it far easier to resist taking things personally.\nOne of the best (but sometimes hardest) things you can do to stop taking things personally is to make a big change in the type of people you regularly spend time with.",
    "text": "1. You’re a social perfectionist\n\nSocial perfectionism is when you can’t stand the thought of other people seeing your flaws or mistakes.\n\nWhen you believe you have to be perfect in other people’s eyes, it drives you to constantly worry about what other people think of you. And when you’re in the habit of always worrying about what others think about you, taking things personally is almost inevitable.\n\nBut here’s the deal:\n\nIt’s okay to make mistakes. And more importantly, it’s okay to worry about what other people think of you.\n\nWe’re social creatures, after all. Our biggest advantage as a species is the fact that we can coordinate and work together with each other. And that ability depends on our capacity to imagine what other people are thinking and feeling, including about us. So it’s not surprising that we tend to care a lot about what others think of us!\n\nThe self-help industry has convinced us that we shouldn’t care at all what other people think… This is nonsense!\n\nWe’re fundamentally social creatures. Caring about what others think is part of the package.\n\nThe real problem social perfectionists get into is that they are too hard on themselves for worrying about what other people think.\n\nIf you want to care a little less about what others think and stop taking things so personally the trick is to be validating of your worries instead of judgmental.\n\nWhen you find yourself wondering what other people think of you, simply remind yourself that it’s normal and okay to worry about this a little.\n\n2. You use negative self-talk as motivation\n\nMost of us grow up learning that the only way to be successful in life is to be tough on ourselves. And inevitably, this leads to a subtle but powerful habit of negative self-talk.\n\nLike the drill sergeant hurling insults at his new recruits in order to “make men out of them,” many of us adopt a similar attitude toward ourselves…\n\nWe think that if we’re tough enough on ourselves it will motivate us to succeed. But there’s a slight problem with this reasoning…\n\nBeing harsh and judgmental with yourself actually decreases performance.\n\nBut worse than that, it can lead to a life-long habit of negative self-talk and all the side-effects that go with it — from anxiety and low self-esteem to… yup, you guessed it: taking things too personally.\n\nWhen someone criticizes you or gives you difficult feedback, a strong habit of negative self-talk can easily hijack your thinking. Instead of considering the mistake as an isolated incident, you end up making very extreme or black and white interpretations to yourself:\n\nInstead of I need to work harder at this aspect of my work we tell ourselves I’m a loser.\n\nInstead of He’s disappointed in my work we slip into He’s disappointed in me.\n\nIf you want to stop taking things personally don’t generalize a mistake in behavior to a flaw in character.\n\nTrue freedom from taking things personally comes from removing the habit of negative self-talk altogether — from learning that you don’t actually need to be hard on yourself in order to stay motivated and succeed.\n\nTechniques like cognitive restructuring and self-compassion can help you end the habit of negative self-talk, and as a result, stop taking things personally.\n\n3. You’re afraid to be proud of yourself\n\nAh, pride… Everyone’s favorite sin!\n\nIn part, because of Western culture’s Christian heritage, many people grow up believing that pride is bad, or sinful even. After all, that’s why Lucifer got thrown out of heaven and why Adam and Eve got expelled from Paradise, right? Thinking too much of themselves?\n\nActually I’m not so sure… Now, I’m no theologian (just a humble psychologist) but I think technically the sin of pride comes when you put yourself above other people — thinking that you’re better than someone else.\n\nBut simply acknowledging your own strengths, goodness, and virtues… I’m not sure that’s such a bad thing!\n\nAnd while I can’t speak to the spiritual side of things, psychologically it’s actually very beneficial to have a healthy sense of pride in yourself.\n\nSo how does this relate to taking things personally?\n\nTaking things personally often means you value other people’s opinions too much and your own not enough.\n\nFor example:\n\nSuppose your spouse makes a sarcastic or rude comment about you. If you’re in the habit of always telling yourself that other people are smart and capable but you’re dumb and weak, your chances of believing your spouse’s comment and internalizing it go way up.\n\nOn the other hand, if you have a healthy sense of pride — if you regularly remind yourself of your strengths and positive qualities — it’s going to be much easier to say to yourself Wait a second, that’s not true at all. I’m actually very conscientious and hard-working and almost never lazy. And as a result, not take what your spouse said too seriously or personally.\n\nA healthy sense of pride is a powerful defense against unjust criticism and taking things personally.\n\nMake a little time to remind yourself of your positive and admirable qualities and you’ll find it a lot easier to confidently resist unfair criticism and critiques.\n\n4. You don’t know how to be assertive\n\nMost of us are taught from a young age that it’s important to be nice, kind, and agreeable and to put other people’s wants and needs before our own.\n\nAnd then we get so reinforced for this that we end up taking it to an extreme where we’re chronically taking care of other people but never addressing our own wants and needs.\n\nThis is not sustainable long-term. And one of the many symptoms of constantly denying your own wants and needs by being overly-accommodating of others is that you end up taking things personally more often than you should.\n\nThink about it:\n\nIf you are constantly setting aside your own wants and needs and taking care of others, what are you teaching your own brain about the relative importance of yourself vs other people?\n\nIn short: that you don’t matter.\n\nAnd so, it really shouldn’t be a surprise that when you get criticized for something, your automatic assumption is that they’re probably right and what you think/feel isn’t really very important. And it doesn’t take a psychologist to see how this is going to lead you to take things personally.\n\nThe solution is to learn to be assertive.\n\nAssertiveness is the ability to ask for what you want and say no to what you don’t want in a way that’s honest to your own wants and needs and also respectful of other people.\n\nOnce you start learning to be more assertive, you will begin to value yourself more highly. And when you do that, you’ll find it far easier to resist taking things personally.\n\n5. You get lost in your own stories\n\nTaking things personally usually happens after we’ve been criticized. And while it’s tempting to see the other person’s words as the thing that hurt us, that’s not technically true…\n\nAbout 50 years ago, cognitive scientists finally validated a theory of emotion that philosophers had been trying to convince us of for more than 2,000 years. It’s called cognitive mediation.\n\nCognitive mediation is the idea that things in the world don’t cause emotions. Instead, it’s our thoughts about things that affect how we feel.\n\nHere’s a concrete example:\n\nYou’re driving down the road and some guy in a red sports car zooms past you and cuts you off, forcing you to slam on your breaks and almost causing an accident. Understandably, you’re mad as hell. But the question is, did the guy cutting you off cause your anger?\n\nTechnically no. What caused your anger was your story about what being cut off meant. Here’s what I mean:\n\nIf the first thought that crossed your mind after being cut off was What a jerk! I hope he gets pulled over anger will likely be your emotional response.\n\nBut if the first thought to cross your mind was Oh my God, I could have been killed! fear might be the dominant emotion.\n\nTaking things personally is about the stories you tell yourself, not the stories other people tell you.\n\nA great way to stop taking things so personally is to pay attention to the stories you tell yourself when you’re criticized. And if possible, change those stories to be more realistic — or even better, refrain from telling stories at all.\n\nEasier said than done, of course, but fundamentally our tendency to tell stories to ourselves is a habit. And habits can always be modified with practice and patience.\n\n6. You spend too much time with the wrong people\n\nAs babies and small children, we learn about ourselves through the people around us:\n\nWhen a baby smiles and her mother smiles back at her, she learns that someone is there to be responsive to her.\n\nWhen a kid hears a parent tell them that they’re lazy and “no good” that kid starts to think of themselves as lazy and no good.\n\nWe are social beings to our core. But this isn’t just true for kids…\n\nAs adults, the people we spent the most time around influence us more than we’d like to admit:\n\nThat talk show host you’ve listened to every morning for 8 years… You’re in denial if you think they haven’t influenced you.\n\nThat overly-critical boyfriend you’ve been living with for the past two years… Do you really think your self-esteem hasn’t taken a hit as a result of being around him for so long?\n\nAs human beings we are incredibly sensitive to the influence of other people in our lives, especially the ones we spend the most time around.\n\nSpend all your time around people who disrespect you and you’re going to end up treating yourself the same way.\n\nOne of the best (but sometimes hardest) things you can do to stop taking things personally is to make a big change in the type of people you regularly spend time with.\n\nMaking new friends, ending an unhealthy relationship, or putting boundaries on toxic family members is never going to be easy. But that doesn’t mean it isn’t important .",
    "keywords": [
      "dont",
      "psychological",
      "tell",
      "negative",
      "taking",
      "reasons",
      "habit",
      "think",
      "personally",
      "pride",
      "things",
      "youre"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------e54ac7de_7f37_40b1_a4dc_63176666dfbb-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------e54ac7de_7f37_40b1_a4dc_63176666dfbb-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------e54ac7de_7f37_40b1_a4dc_63176666dfbb-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------e54ac7de_7f37_40b1_a4dc_63176666dfbb-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------e54ac7de_7f37_40b1_a4dc_63176666dfbb-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------0-74--------------------6937d3a6_b279_4fa7_8e06_5e119f10ca5b-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://hjauquet.medium.com/i-am-a-pro-life-housewife-1ff2cf1b05ec?source=extreme_main_feed---------1-74--------------------6937d3a6_b279_4fa7_8e06_5e119f10ca5b-------",
    "title": "I am a Pro-Life Housewife",
    "publish_date": "2020-10-15 13:43:33",
    "authors": [
      "Heather Jauquet"
    ],
    "summary": "I am a Pro-Life HousewifeAnd I’m not voting for TrumpPicture by Maria Oswalt on UnsplashAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\nThey are seeing that while Trump is considered the pro-life candidate, he is not pro-life.\nBeing pro-life means having a consistent life ethic from womb to tomb.\nPro-life means honoring the sanctity of life at all stages.\nDon’t discount the vote of the pro-life housewife who is working towards change.",
    "text": "I am a Pro-Life Housewife\n\nAnd I’m not voting for Trump\n\nPicture by Maria Oswalt on Unsplash\n\nAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\n\nI acknowledge that I hate discussing politics and often hesitate to share my views. On the rare occasions I do, it’s usually about my support for the sanctity of human life. I have been admonished by friends from both political parties telling me that I am not pro-life enough, or I’m anti-woman, or I’m not Christian enough, or that I’m too naive. One person, went even so far as to tell me about her “great disappointment” in me and suggested I shouldn’t share my views or should only share them with like-minded people. But if I do as she suggested, my views go in an echo chamber and I forgo the opportunity for rich discussion and to see another perspective. While I might not change someone’s mind, I hope we walk away with a different perspective and the willingness to view every story with grace and compassion.\n\nI grew up loving Jesus and loving my country And now, as a pro-life religious conservative, I’m feeling bereft, without a political party who represents me. To be honest, I felt that way at the last election and even more so now. I disagree with the democratic platform on the issue of abortion. But I abhor the ongoing lack of respect for human life as demonstrated by the current president.\n\nAs we get closer to the U.S. Presidential election there is a contingent of pro-life Catholics and evangelicals who are making their departure from supporting Trump known. They are seeing that while Trump is considered the pro-life candidate, he is not pro-life. His actions against the marginalized show the truth.\n\nBeing pro-life means having a consistent life ethic from womb to tomb. It means valuing human life at all stages, not just when it’s convenient. Often when a new election looms on the horizon the discussion of life becomes a heated topic of debate: When should life be valued? Who is valued?\n\nI cannot in good conscience vote for a man who doesn’t value human dignity and decency. I cannot embrace the politics of a man who is willing to put children in cages and has not, as of yet, addressed the allegations of forced hysterectomies on Immigration and Custom Enforcement (ICE) detainees.\n\nI cannot support a leader who refuses to face the pandemic head on in hopes that it will disappear. The leader of our country mocked his political opponent for wearing a mask and then came down with the very plague he tried to ignore. Then he exposed his staff to the virus. That is not pro-life. It’s a flagrant display of ego and of disrespect for the people who work for him and the 209,000 dead that preceded his diagnosis.\n\nI cannot support a man who is unwilling to denounce white supremacy. It is not pro-life when President Trump refused to denounce white supremacy, but instead told the Proud Boys to “Stand back and stand by.” Pope Francis said in a message to the people of the United States after the killing of George Floyd: “We cannot tolerate or turn a blind eye to racism and exclusion in any form and yet claim to defend the sacredness of every human life.”\n\nWhen then candidate Trump mocked a disabled journalist during the 2016 campaign some people laughed, more were disgusted. His mockery is not pro-life. It points fingers and makes fun of people who are not neurotypical. I have a neurodivergent son and to know that he would be mocked or have his disability used against him is infuriating and heart wrenching. I expect more out of a leader. I expect compassion and restraint.\n\nHow can we support a pro-life candidate who is anything but? His hypocrisy is blatant.\n\nI am ardently pro-life. I hold that position because I believe in the dignity and the sanctity of human life. I believe we are made in the image of God and when we love one another we share the love of Jesus. I believe life is sacred. All life. I believe it begins in the womb and ends at natural death. At a lecture at Fordham University, Cardinal Joseph Bernardin shared this consistent life ethic: “The spectrum of life cuts across the issues of genetics, abortion, capital punishment, modern warfare and the care of the terminally ill.” In short, it’s valuing all life: the infirm, the dying, the disabled, the ones in cages whether they be prisons or at the border, the mentally ill.\n\nWe should show empathy, compassion, and grace when we talk to people about their situations. If we refuse to acknowledge the humanity, do people’s stories simply become pawns in our political stances?\n\nI believe we are called to serve one another. I believe in grace. I believe we shouldn’t be reduced to our mistakes. I believe that we are all broken, and that in our brokenness we can learn to see the whole person and embrace grace. Bryan Stevenson beautifully articulates how brokenness brings about compassion in his book Just Mercy: A story of Justice and Redemption. In his book, Stevenson describes our broken judicial system where too many are given a death sentence for crimes that they did not commit or crimes that do not warrant it.\n\nThe most politically active part of the pro-life position seeks an end to abortion. I fervently wish for an end for abortion. We also need to put in resources to empower women. This means consistent and available health care. This means jobs and housing. This means education. It means giving women the ability to support themselves and their children. It means support. We cannot demonize women for their decisions if we turn a blind eye to their needs. There are religious organizations that help women in crisis pregnancies and one of my favorites is The Gabriel Network whose slogan is “Empower Women.” They not only provide housing, but also angel friends who take women to their appointments, spend time with them getting to know them, and help by anticipating their needs whether it be friendship, baby supplies, or a hand to hold. The Gabriel Network also provides scholarships to help women further their education and careers.\n\nMany people see a pro-life position as a religious one. It is for me, but, it doesn’t have to be. Pro-life means honoring the sanctity of life at all stages. There are other organizations not affiliated with any religion that support a consistent life ethic such as New Wave Feminists and Rehumanize International. New Wave Feminists recognizes the “…full humanity of both the unborn child and the mother and looks to rebuild a culture that embodies legitimate justice for all.” Rehumanize International is a “…human rights organization dedicated to creating a culture of peace and life, and in so doing…seek to bring an end to all aggressive violence against humans through education, discourse, and action.”\n\nWhat if we set aside the presuppositions that being pro-life means that it is only a religious issue or a political stance? What if we used our time and energy to support, encourage, and embrace the sanctity of human life? When we stop pitting pro-choice and pro-life advocates against one another, we could do beautiful work together and shelter the homeless, clothe the naked, and feed the hungry. We can empower women, provide adequate healthcare, end racism, and advocate for social justice.\n\nAs I continue to read, listen, and learn, I embrace the dignity and sanctity of all human life. I acknowledge that if we want to change minds and change hearts, we have to be willing to listen to one another. Don’t discount the vote of the pro-life housewife who is working towards change.",
    "keywords": [
      "life",
      "women",
      "trump",
      "housewife",
      "human",
      "prolife",
      "believe",
      "support",
      "means",
      "sanctity",
      "political"
    ]
  },
  {
    "url": "https://medium.com/swlh/how-stealing-your-childrens-crayons-can-solve-your-ios-stackview-problems-c2aa5b707b02?source=extreme_main_feed---------2-74--------------------6937d3a6_b279_4fa7_8e06_5e119f10ca5b-------",
    "title": "How Stealing Your Children’s Crayons Can Solve Your iOS StackView Problems",
    "publish_date": "2020-10-16 02:34:06",
    "authors": [
      "Austin Ramsdale"
    ],
    "summary": "Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other.\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here.\nLuckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\nWe can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view.\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons.",
    "text": "Designing responsive and performant iOS apps can be a frustrating chore for new developers. Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other. Alternatively, designing user interfaces programmatically may be preferred, but can take years of mastery and an in-depth understanding of the underlying display engine; and we haven’t even considered the varying sizes and layouts!\n\nIf you’re having issues laying out your interface and getting it to play nicely with the various sizes and orientations, here are some quick tips using nested StackViews that may be able to help you organize and speed up your development process!\n\nFor this article, I am using a Swift recreation of the simple calculator, but you’ll notice that there are two key buttons that differ in size and orientation from the others — creating a complication with traditional stack views, and can be really problematic when using conventional constraints and expecting them to orient properly.\n\nSo how did I tackle this quickly and easily? As the title might suggest, grab any markers, pens, or crayons you may have at your disposal, and start by printing out a copy of the Storyboard. You can also design it on-screen, but for many (myself included), putting pen-to-paper helps to unlock that creative critical thinking that is sometimes needed to crack the visual code.\n\nTo start, I need to outline the largest “block” of interactive elements that I want to organize and manipulate. I’ve marked the corners in red, but instead of working from the outside in, I’m now going to look for the elements that need specific handling, focusing on fitting them into a balanced container, called a Stack View, and then working outwards.\n\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here. Additional information can be found in Apple’s “App Development with Swift” in section 2.1.\n\nAs you can see, the two elements we need to work with are the “0” button, which spans 2x the conventional button width (below button “1” and “2”), and the “=“ button, which inconveniently spans 2x the conventional button height. Luckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\n\nNow that I’ve identified the unique elements, we can see that the buttons fit into a larger chunk of blocks, outlined in green below. We can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view. Lastly, we need to distribute the “1” and “2” buttons evenly, so they share the space inside of the block.\n\nSimilarly, the “=“ , “3”, and “.” button share the lower right block. We create a vertical stack view and put the “=“ button on the right side, and we’ll nest an additional horizontal stack view on the left, putting the “3” in the top, and “.” In the bottom, with “Fill equally” as the distribution method here as well.\n\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons. This makes it a little easier, but it helps to create “balanced” or even blocks where possible.\n\nConveniently, the buttons fit in a 3x4 grid for both top and bottom, so I drew two larger encompassing blocks in blue around those segments, and labeled them “Upper Stackview” and “Lower Stackview”, respectively. You’ll notice that I’ve also started to fill-in other attributes in the margins, marking both the top and bottom blocks as “Fill equally” also (however, the bottom is wrong — it’s actually Fill proportionally, but more on that in a bit).\n\nNow, I simply need to group and space the remaining buttons, starting with drawing a box around the “4”, “5”, “6”, and “-“ buttons, placing them in a vertical stack view, and doing the same with the “Upper Stackview” (highlighted in orange).",
    "keywords": [
      "blocks",
      "stealing",
      "buttons",
      "view",
      "problems",
      "childrens",
      "crayons",
      "button",
      "elements",
      "views",
      "stackview",
      "need",
      "vertical",
      "solve",
      "ios",
      "conventional",
      "stack"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------6937d3a6_b279_4fa7_8e06_5e119f10ca5b-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://uxdesign.cc/the-future-of-apple-ipad-b659b7da75a7?source=extreme_main_feed---------4-73--------------------6937d3a6_b279_4fa7_8e06_5e119f10ca5b-------",
    "title": "The future of Apple iPad",
    "publish_date": "2020-10-09 22:27:25",
    "authors": [
      "Ali Çorak"
    ],
    "summary": "Harddisk connection, mouse, Bluetooth mouse, Bluetooth keyboard, keyboard with USB-C, etc…We were able to use the iPad as a computer with keyboards.\nAlthough the Magic Keyboard is made for iPad Pro, which is more advanced than other iPads, it now supports iPad Air 4th generation.\nWe use the iPad in a horizontal position with Magic Keyboard.\nWe don’t need a new computer, we’re just looking for a screen; iPad provides this with Sidecar support.\nWhen John Ive left Apple, he founded the design agency LoveFrom and his first customer was Apple.",
    "text": "Catalyst takes care of everything when you develop for iPadOS or iOS with recommendations from Apple. The application becomes available for macOS. As you can imagine, it looks “like a Mac” on the iPad. Also, if you have written your application with Swift, Catalyst is not needed. SwiftUI will automatically adapt to macOS. But SwiftUI supports iOS13 and above. This means that devices with the latest iOS 12 (such as iPhone 6, which are currently widely used in the market) will not be supported.\n\nIt’s a Computer. Because;\n\niPad Pro + Magic Keyboard\n\nAfter making software innovations to the old generations and hardware to the new generations, the iPad became a computer. Harddisk connection, mouse, Bluetooth mouse, Bluetooth keyboard, keyboard with USB-C, etc…\n\nWe were able to use the iPad as a computer with keyboards. But some things could affect the user experience. (Touching the screen and using the keyboard was difficult for some) But then the trackpad came on the Magic Keyboard. Although the Magic Keyboard is made for iPad Pro, which is more advanced than other iPads, it now supports iPad Air 4th generation.\n\nIf we talk about other hardware details, if you use your iPad Pro with Magic Keyboard, there are 2 USB-C ports in total; Like MacBook Air. This is an advantage because any extra accessory you buy for the MacBook can be used for the iPad. (and yes, wish we didn’t have to buy extra accessories) In the end, Magic Keyboard does not move 360 ​​degrees like the Smart Folio Keyboard. I don’t know why but I think it looks like a laptop.\n\nWe use the iPad in a horizontal position with Magic Keyboard. That’s why sidebar matters. But as a problem, some applications open vertically even in a horizontal position. (Maybe it will improve in the future because it will not give a MacBook experience like this)\n\nNote: If you are used to doing operations such as volume up/volume down increase/decrease screen light from the keyboard, unfortunately, there are no top keys in Magic Keyboard.\n\nIt’s Not a Computer. Because;\n\nApple’s Sidecar\n\nWhen using a laptop or desktop, we sometimes need a second screen. We don’t need a new computer, we’re just looking for a screen; iPad provides this with Sidecar support. iPad is not a computer here; a screen.\n\nAnother topic is games; We know that MacBook is not preferred for games. But the iPhone performs well in games. I’m not a gamer but in games, the iPad performs like an iPhone, not MacBook. Moreover, there is controller support.\n\nThe iPadOS should no longer be compared to the iPhone or the Mac. It seems to be between macOS and iOS, but it is not. Special applications should be made for the iPad. For example, the Sharpr3D app is just for the iPad.\n\nSharpr3D\n\nIn other words, you can also do professional works such as 3D modeling, video editing, photo editing on the iPad. So what’s the limit? It’s not currently at the Mac level. You can edit a very good video with an app such as Luma Fusion, iMovie, Adobe Rush on iPads. But when you want to take this to a more professional level, iPads will not be suitable for you.\n\nLuma Fusion\n\nNote: Everyone talks about Apple after John Ive. When John Ive left Apple, he founded the design agency LoveFrom and his first customer was Apple. So Apple still works with John Ive.",
    "keywords": [
      "future",
      "iphone",
      "ipad",
      "computer",
      "magic",
      "screen",
      "macbook",
      "games",
      "used",
      "apple",
      "keyboard"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/software-architecture-the-important-architectural-patterns-you-need-to-know-a1f5ea7e4e3d?source=extreme_main_feed---------5-73--------------------6937d3a6_b279_4fa7_8e06_5e119f10ca5b-------",
    "title": "Software Architecture: The Most Important Architectural Patterns You Need to Know",
    "publish_date": "2020-10-15 08:17:04",
    "authors": [
      "Trung Anh Dang"
    ],
    "summary": "Software Architecture: The Most Important Architectural Patterns You Need to KnowExplaining common different architecture patternsPhoto by Alexander Andrews on UnsplashAn architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context.\nMany programmers are nowadays still confused about the difference between architecture patterns or don’t even know much about it.\nLayered ArchitecturePipe and FilterClient ServerModel View ControllerEvent Driven ArchitectureMicroservices ArchitectureLayered ArchitectureThe most common architecture pattern is the layered architecture or known as the n-tier architecture.\nOn the second concept, the layered architecture pattern is a technically partitioned architecture as opposed to a domain partitioned architecture.\nPipe and FilterOne of the patterns in software architecture that appears, again and again, is the pipe-filter pattern.",
    "text": "Software Architecture: The Most Important Architectural Patterns You Need to Know\n\nExplaining common different architecture patterns\n\nPhoto by Alexander Andrews on Unsplash\n\nAn architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context.\n\nA pattern is a solution to a problem in a context.\n\nMany programmers are nowadays still confused about the difference between architecture patterns or don’t even know much about it.\n\nLet me explain to you…!\n\nLayered Architecture\n\nPipe and Filter\n\nClient Server\n\nModel View Controller\n\nEvent Driven Architecture\n\nMicroservices Architecture\n\nLayered Architecture\n\nThe most common architecture pattern is the layered architecture or known as the n-tier architecture. It is widely known by most software architects, designers, developers. Although, there are no specific restrictions in terms of the number and type of layers that must exist, most layered architecture consists of four tiers: presentation, business, persistence and database as follows.\n\nan popular example of n-tier architecture\n\nContext\n\nAll complex systems experience the need to develop and evolve portions of the system independently. For this reason, the developers of the system need clear and well-documented separation of concerns, so that modules of the system may be independently developed and maintained.\n\nProblem\n\nThe software needs to be segmented in such a way that the modules can be developed and evolved separately with little interaction among the parts, supporting portability, modifiability, and reuse.\n\nSolution\n\nTo achieve this separation of concerns, the layered pattern divides the software into units called layers. Each layer is a grouping of modules that offers a cohesive set of services. The usage must be unidirectional. Layers completely partition a set of software, and each partition is exposed through a public interface.\n\nThe first concept is each of the layers has a specific role and responsibility. For example, the presentation layer would be responsible for handling all UI. Because this separation of concerns within the layered architecture makes it easy to build effective roles and responsibility.\n\nOn the second concept, the layered architecture pattern is a technically partitioned architecture as opposed to a domain partitioned architecture. They are groups of components, rather being by domain.\n\nThe last concept is that each of the layers in the layered architecture is marked as being either closed or open. A closed layer means that a request moves from layer to layer, it must go through the layer right below it to get to the next layer below that one. The request cannot skip any layers.\n\nClosed layers and request access\n\nWeakness\n\nLayers contribute to a performance penalty. The pattern does not lend itself to high-performance applications because it is not efficient to go through multiple layers of the architecture to fulfill a business request.\n\nThe addition of layers also adds up-front cost and complexity to a system.\n\nUsages\n\nWe should use this style for small, simple applications or websites. It is a good choice for situations with a very tight budget and time constraints.\n\nMulti-Tier Pattern\n\nContext\n\nIn a distributed deployment, there is often a need to distribute a system’s infrastructure into distinct subsets.\n\nProblem\n\nHow can we split the system into a number of computationally independent execution structures: groups of software and hardware connected by some communications media?\n\nSolution\n\na multi-tier example — consumer website J2EE\n\nThe execution structures of many systems are organized as a set of logical groupings of components. Each grouping is termed a tier.\n\nWeakness\n\nSubstantial up-front cost and complexity.\n\nUsages\n\nUsed in distributed systems.\n\nPipe and Filter\n\nOne of the patterns in software architecture that appears, again and again, is the pipe-filter pattern.\n\nthe pipe filter style\n\nContext\n\nMany systems are required to transform streams of discrete data items, from input to output. Many types of transformations occur repeatedly in practice, and so it is desirable to create these as independent, reusable parts.\n\nProblem\n\nSuch systems need to be divided into reusable, loosely coupled components with simple, generic interactionmechanisms. In this way they can be flexibly combined with each other. The components, being generic and loosely coupled, are easily reused. The components, being independent, can execute in parallel.\n\nSolution\n\nPipes in this architecture form the communication channel between filters. The first concept is each of the pipes is un-directional and point to point for performance reasons, accepting input from one source and always directing output to another.\n\nThere are four types of filters exist within this style as follows.\n\nproducer ( source ): the starting point of a process.\n\n): the starting point of a process. transformer ( map ): performs a transformation on some or all of the data.\n\n): performs a transformation on some or all of the data. tester ( reduce ): tests one or more criteria.\n\n): tests one or more criteria. consumer ( sink ): the terminating point.\n\nWeakness\n\nNot good choice for interactive systems, because of their transformational character.\n\nExcessive parsing and unparsing leads toloss of performance and increased complexity in writing the filters themselves.\n\nUsages\n\nThe pipe-filter architecture uses in a variety of applications, especially tasks that facilitate simple, one-way processing such as EDI, ETL tools.\n\nCompilers: the consecutive filters perform lexical analysis, parsing, semantic analysis, and code generation.\n\nClient Server\n\nContext\n\nThere are shared resources and services that large numbers of distributed clients wish to access, and for which we wish to control access or quality of service.\n\nProblem\n\nBy managing a set of shared resources and services, we can promote modifiability and reuse, by factoring out common services and having to modify these in a single location, or a small number of locations. We want to improve scalability and availability by centralizing the control of these resources and services while distributing the resources themselves across multiple physical servers.\n\nSolution\n\nIn a client-server style, components and connectors have a particular behavior.\n\nComponents, called “clients,” send requests to a component, called “server,” and wait for a reply.\n\nA server component receives a request from a client and sends it the reply.\n\nWeakness\n\nThe server can be a performance bottleneck and a single point of failure.\n\nDecisions about where to locate functionality (in the client or in the server) are often complex and costly to change after a system has been built.\n\nUsages\n\nWe can use the client-server style to model a part of a system that has many components sending requests (clients) to another component (server) that offer services: online applications such as email, document sharing and banking.\n\nModel View Controller\n\nContext\n\nThe user interface is typically the most frequently modified portion of an interactive application. Users often wish to look at data from different perspectives, such as a bar graph or a pie chart. These representations should both reflect the current state of the data.\n\nProblem\n\nHow can user interface functionality be kept separate from application functionality and yet still be responsive to user input, or to changes in the underlying application’s data?\n\nAnd how can multiple views of the user interface be created, maintained, and coordinated when the underlying application data changes?\n\nSolution\n\nThe model-view-controller (MVC) pattern separates application functionality into three kinds of components as follows.\n\nA model, which contains the application’s data.\n\nA view, which displays some portion of the underlying data and interacts with the user.\n\nA controller, which mediates between the model and the viewand manages the notifications of state changes.\n\nWeakness\n\nThe complexity may not be worth it for simple user interfaces.\n\nThe model, view, and controller abstractions may not be good fits for some user interface toolkits.\n\nUsages\n\nMVC is an architectural pattern that is commonly used in web, mobile applications while developing user interfaces.\n\nEvent Driven Architecture\n\nContext\n\nComputational and information resources need to be provided to handle incoming independent asynchronous application-generated events in a manner that can scale up as demand increases.\n\nProblem\n\nConstruct distributed systems that can service asynchronous arriving messages associated with an event, and that can scale from small and simple to large and complex.\n\nSolution\n\nDeploy independent event processes/processors for event handling. Arriving events are queued. A scheduler pulls events from the queue and distributes them to the appropriate event handler based on a scheduling policy.\n\nWeakness\n\nPerformance and error recovery may be issues.\n\nUsages\n\nAn e-commerce application that uses this approach would work as follows:\n\nThe Order Service creates an Order in a pending state and publishes an OrderCreated event.\n\nThe Customer Service receives the event and attempts to reserve credit for that Order. It then publishes either a Credit Reserved event or a CreditLimitExceeded event.\n\nevent. The Order Service receives the event from the Customer Service and changes the state of the order to either approved or canceled\n\nMicroservices Architecture\n\nContext\n\nDeploy server-based enterprise applications that support a variety of browsers and native mobile clients. The application handles client requests by executing business logic, accessing a database, exchanging messages with other systems, and returning responses. The application might expose a 3rd party API.\n\nProblem\n\nMonolithic applications can become too large and complex for efficient support, and deployment for optimal distributed resource utilization such as in cloud environments.\n\nSolution\n\nBuild applications as suites of services. Each service is independently deployable and scalable and has its own API boundary. Different services can be written in different programming languages, manage their own database, and developed by different teams.\n\nWeakness\n\nSystems must be designed to tolerate service failures that require more system monitoring. Service choreography and event collaboration overhead.\n\nWe also need more memory.\n\nUsages\n\nMany use cases are applicable for a microservices architecture, especially those that involve an extensive data pipeline. For example, a microservices-based system would be ideal for a reporting system on a company’s retail store sales. Each step in the data preparation process would be handled by a microservice: data collection, cleansing, normalization, enrichment, aggregation, reporting, etc.\n\nEasy, right?",
    "keywords": [
      "layers",
      "architectural",
      "service",
      "pattern",
      "systems",
      "important",
      "patterns",
      "know",
      "need",
      "services",
      "applications",
      "software",
      "data",
      "system",
      "architecture"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------7-73--------------------6937d3a6_b279_4fa7_8e06_5e119f10ca5b-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------8-73--------------------6937d3a6_b279_4fa7_8e06_5e119f10ca5b-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------9-73--------------------6937d3a6_b279_4fa7_8e06_5e119f10ca5b-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------69521083_102a_4b92_bed3_3677fd5c070a-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------69521083_102a_4b92_bed3_3677fd5c070a-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------69521083_102a_4b92_bed3_3677fd5c070a-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------69521083_102a_4b92_bed3_3677fd5c070a-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------69521083_102a_4b92_bed3_3677fd5c070a-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------0-74--------------------87911fea_3ecc_4843_9ef1_1d5a57424503-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://hjauquet.medium.com/i-am-a-pro-life-housewife-1ff2cf1b05ec?source=extreme_main_feed---------1-74--------------------87911fea_3ecc_4843_9ef1_1d5a57424503-------",
    "title": "I am a Pro-Life Housewife",
    "publish_date": "2020-10-15 13:43:33",
    "authors": [
      "Heather Jauquet"
    ],
    "summary": "I am a Pro-Life HousewifeAnd I’m not voting for TrumpPicture by Maria Oswalt on UnsplashAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\nThey are seeing that while Trump is considered the pro-life candidate, he is not pro-life.\nBeing pro-life means having a consistent life ethic from womb to tomb.\nPro-life means honoring the sanctity of life at all stages.\nDon’t discount the vote of the pro-life housewife who is working towards change.",
    "text": "I am a Pro-Life Housewife\n\nAnd I’m not voting for Trump\n\nPicture by Maria Oswalt on Unsplash\n\nAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\n\nI acknowledge that I hate discussing politics and often hesitate to share my views. On the rare occasions I do, it’s usually about my support for the sanctity of human life. I have been admonished by friends from both political parties telling me that I am not pro-life enough, or I’m anti-woman, or I’m not Christian enough, or that I’m too naive. One person, went even so far as to tell me about her “great disappointment” in me and suggested I shouldn’t share my views or should only share them with like-minded people. But if I do as she suggested, my views go in an echo chamber and I forgo the opportunity for rich discussion and to see another perspective. While I might not change someone’s mind, I hope we walk away with a different perspective and the willingness to view every story with grace and compassion.\n\nI grew up loving Jesus and loving my country And now, as a pro-life religious conservative, I’m feeling bereft, without a political party who represents me. To be honest, I felt that way at the last election and even more so now. I disagree with the democratic platform on the issue of abortion. But I abhor the ongoing lack of respect for human life as demonstrated by the current president.\n\nAs we get closer to the U.S. Presidential election there is a contingent of pro-life Catholics and evangelicals who are making their departure from supporting Trump known. They are seeing that while Trump is considered the pro-life candidate, he is not pro-life. His actions against the marginalized show the truth.\n\nBeing pro-life means having a consistent life ethic from womb to tomb. It means valuing human life at all stages, not just when it’s convenient. Often when a new election looms on the horizon the discussion of life becomes a heated topic of debate: When should life be valued? Who is valued?\n\nI cannot in good conscience vote for a man who doesn’t value human dignity and decency. I cannot embrace the politics of a man who is willing to put children in cages and has not, as of yet, addressed the allegations of forced hysterectomies on Immigration and Custom Enforcement (ICE) detainees.\n\nI cannot support a leader who refuses to face the pandemic head on in hopes that it will disappear. The leader of our country mocked his political opponent for wearing a mask and then came down with the very plague he tried to ignore. Then he exposed his staff to the virus. That is not pro-life. It’s a flagrant display of ego and of disrespect for the people who work for him and the 209,000 dead that preceded his diagnosis.\n\nI cannot support a man who is unwilling to denounce white supremacy. It is not pro-life when President Trump refused to denounce white supremacy, but instead told the Proud Boys to “Stand back and stand by.” Pope Francis said in a message to the people of the United States after the killing of George Floyd: “We cannot tolerate or turn a blind eye to racism and exclusion in any form and yet claim to defend the sacredness of every human life.”\n\nWhen then candidate Trump mocked a disabled journalist during the 2016 campaign some people laughed, more were disgusted. His mockery is not pro-life. It points fingers and makes fun of people who are not neurotypical. I have a neurodivergent son and to know that he would be mocked or have his disability used against him is infuriating and heart wrenching. I expect more out of a leader. I expect compassion and restraint.\n\nHow can we support a pro-life candidate who is anything but? His hypocrisy is blatant.\n\nI am ardently pro-life. I hold that position because I believe in the dignity and the sanctity of human life. I believe we are made in the image of God and when we love one another we share the love of Jesus. I believe life is sacred. All life. I believe it begins in the womb and ends at natural death. At a lecture at Fordham University, Cardinal Joseph Bernardin shared this consistent life ethic: “The spectrum of life cuts across the issues of genetics, abortion, capital punishment, modern warfare and the care of the terminally ill.” In short, it’s valuing all life: the infirm, the dying, the disabled, the ones in cages whether they be prisons or at the border, the mentally ill.\n\nWe should show empathy, compassion, and grace when we talk to people about their situations. If we refuse to acknowledge the humanity, do people’s stories simply become pawns in our political stances?\n\nI believe we are called to serve one another. I believe in grace. I believe we shouldn’t be reduced to our mistakes. I believe that we are all broken, and that in our brokenness we can learn to see the whole person and embrace grace. Bryan Stevenson beautifully articulates how brokenness brings about compassion in his book Just Mercy: A story of Justice and Redemption. In his book, Stevenson describes our broken judicial system where too many are given a death sentence for crimes that they did not commit or crimes that do not warrant it.\n\nThe most politically active part of the pro-life position seeks an end to abortion. I fervently wish for an end for abortion. We also need to put in resources to empower women. This means consistent and available health care. This means jobs and housing. This means education. It means giving women the ability to support themselves and their children. It means support. We cannot demonize women for their decisions if we turn a blind eye to their needs. There are religious organizations that help women in crisis pregnancies and one of my favorites is The Gabriel Network whose slogan is “Empower Women.” They not only provide housing, but also angel friends who take women to their appointments, spend time with them getting to know them, and help by anticipating their needs whether it be friendship, baby supplies, or a hand to hold. The Gabriel Network also provides scholarships to help women further their education and careers.\n\nMany people see a pro-life position as a religious one. It is for me, but, it doesn’t have to be. Pro-life means honoring the sanctity of life at all stages. There are other organizations not affiliated with any religion that support a consistent life ethic such as New Wave Feminists and Rehumanize International. New Wave Feminists recognizes the “…full humanity of both the unborn child and the mother and looks to rebuild a culture that embodies legitimate justice for all.” Rehumanize International is a “…human rights organization dedicated to creating a culture of peace and life, and in so doing…seek to bring an end to all aggressive violence against humans through education, discourse, and action.”\n\nWhat if we set aside the presuppositions that being pro-life means that it is only a religious issue or a political stance? What if we used our time and energy to support, encourage, and embrace the sanctity of human life? When we stop pitting pro-choice and pro-life advocates against one another, we could do beautiful work together and shelter the homeless, clothe the naked, and feed the hungry. We can empower women, provide adequate healthcare, end racism, and advocate for social justice.\n\nAs I continue to read, listen, and learn, I embrace the dignity and sanctity of all human life. I acknowledge that if we want to change minds and change hearts, we have to be willing to listen to one another. Don’t discount the vote of the pro-life housewife who is working towards change.",
    "keywords": [
      "life",
      "women",
      "trump",
      "housewife",
      "human",
      "prolife",
      "believe",
      "support",
      "means",
      "sanctity",
      "political"
    ]
  },
  {
    "url": "https://medium.com/swlh/how-stealing-your-childrens-crayons-can-solve-your-ios-stackview-problems-c2aa5b707b02?source=extreme_main_feed---------2-74--------------------87911fea_3ecc_4843_9ef1_1d5a57424503-------",
    "title": "How Stealing Your Children’s Crayons Can Solve Your iOS StackView Problems",
    "publish_date": "2020-10-16 02:34:06",
    "authors": [
      "Austin Ramsdale"
    ],
    "summary": "Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other.\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here.\nLuckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\nWe can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view.\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons.",
    "text": "Designing responsive and performant iOS apps can be a frustrating chore for new developers. Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other. Alternatively, designing user interfaces programmatically may be preferred, but can take years of mastery and an in-depth understanding of the underlying display engine; and we haven’t even considered the varying sizes and layouts!\n\nIf you’re having issues laying out your interface and getting it to play nicely with the various sizes and orientations, here are some quick tips using nested StackViews that may be able to help you organize and speed up your development process!\n\nFor this article, I am using a Swift recreation of the simple calculator, but you’ll notice that there are two key buttons that differ in size and orientation from the others — creating a complication with traditional stack views, and can be really problematic when using conventional constraints and expecting them to orient properly.\n\nSo how did I tackle this quickly and easily? As the title might suggest, grab any markers, pens, or crayons you may have at your disposal, and start by printing out a copy of the Storyboard. You can also design it on-screen, but for many (myself included), putting pen-to-paper helps to unlock that creative critical thinking that is sometimes needed to crack the visual code.\n\nTo start, I need to outline the largest “block” of interactive elements that I want to organize and manipulate. I’ve marked the corners in red, but instead of working from the outside in, I’m now going to look for the elements that need specific handling, focusing on fitting them into a balanced container, called a Stack View, and then working outwards.\n\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here. Additional information can be found in Apple’s “App Development with Swift” in section 2.1.\n\nAs you can see, the two elements we need to work with are the “0” button, which spans 2x the conventional button width (below button “1” and “2”), and the “=“ button, which inconveniently spans 2x the conventional button height. Luckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\n\nNow that I’ve identified the unique elements, we can see that the buttons fit into a larger chunk of blocks, outlined in green below. We can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view. Lastly, we need to distribute the “1” and “2” buttons evenly, so they share the space inside of the block.\n\nSimilarly, the “=“ , “3”, and “.” button share the lower right block. We create a vertical stack view and put the “=“ button on the right side, and we’ll nest an additional horizontal stack view on the left, putting the “3” in the top, and “.” In the bottom, with “Fill equally” as the distribution method here as well.\n\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons. This makes it a little easier, but it helps to create “balanced” or even blocks where possible.\n\nConveniently, the buttons fit in a 3x4 grid for both top and bottom, so I drew two larger encompassing blocks in blue around those segments, and labeled them “Upper Stackview” and “Lower Stackview”, respectively. You’ll notice that I’ve also started to fill-in other attributes in the margins, marking both the top and bottom blocks as “Fill equally” also (however, the bottom is wrong — it’s actually Fill proportionally, but more on that in a bit).\n\nNow, I simply need to group and space the remaining buttons, starting with drawing a box around the “4”, “5”, “6”, and “-“ buttons, placing them in a vertical stack view, and doing the same with the “Upper Stackview” (highlighted in orange).",
    "keywords": [
      "blocks",
      "stealing",
      "buttons",
      "view",
      "problems",
      "childrens",
      "crayons",
      "button",
      "elements",
      "views",
      "stackview",
      "need",
      "vertical",
      "solve",
      "ios",
      "conventional",
      "stack"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------87911fea_3ecc_4843_9ef1_1d5a57424503-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------4-73--------------------87911fea_3ecc_4843_9ef1_1d5a57424503-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------6-73--------------------87911fea_3ecc_4843_9ef1_1d5a57424503-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------7-73--------------------87911fea_3ecc_4843_9ef1_1d5a57424503-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://uxdesign.cc/the-future-of-apple-ipad-b659b7da75a7?source=extreme_main_feed---------8-73--------------------87911fea_3ecc_4843_9ef1_1d5a57424503-------",
    "title": "The future of Apple iPad",
    "publish_date": "2020-10-09 22:27:25",
    "authors": [
      "Ali Çorak"
    ],
    "summary": "Harddisk connection, mouse, Bluetooth mouse, Bluetooth keyboard, keyboard with USB-C, etc…We were able to use the iPad as a computer with keyboards.\nAlthough the Magic Keyboard is made for iPad Pro, which is more advanced than other iPads, it now supports iPad Air 4th generation.\nWe use the iPad in a horizontal position with Magic Keyboard.\nWe don’t need a new computer, we’re just looking for a screen; iPad provides this with Sidecar support.\nWhen John Ive left Apple, he founded the design agency LoveFrom and his first customer was Apple.",
    "text": "Catalyst takes care of everything when you develop for iPadOS or iOS with recommendations from Apple. The application becomes available for macOS. As you can imagine, it looks “like a Mac” on the iPad. Also, if you have written your application with Swift, Catalyst is not needed. SwiftUI will automatically adapt to macOS. But SwiftUI supports iOS13 and above. This means that devices with the latest iOS 12 (such as iPhone 6, which are currently widely used in the market) will not be supported.\n\nIt’s a Computer. Because;\n\niPad Pro + Magic Keyboard\n\nAfter making software innovations to the old generations and hardware to the new generations, the iPad became a computer. Harddisk connection, mouse, Bluetooth mouse, Bluetooth keyboard, keyboard with USB-C, etc…\n\nWe were able to use the iPad as a computer with keyboards. But some things could affect the user experience. (Touching the screen and using the keyboard was difficult for some) But then the trackpad came on the Magic Keyboard. Although the Magic Keyboard is made for iPad Pro, which is more advanced than other iPads, it now supports iPad Air 4th generation.\n\nIf we talk about other hardware details, if you use your iPad Pro with Magic Keyboard, there are 2 USB-C ports in total; Like MacBook Air. This is an advantage because any extra accessory you buy for the MacBook can be used for the iPad. (and yes, wish we didn’t have to buy extra accessories) In the end, Magic Keyboard does not move 360 ​​degrees like the Smart Folio Keyboard. I don’t know why but I think it looks like a laptop.\n\nWe use the iPad in a horizontal position with Magic Keyboard. That’s why sidebar matters. But as a problem, some applications open vertically even in a horizontal position. (Maybe it will improve in the future because it will not give a MacBook experience like this)\n\nNote: If you are used to doing operations such as volume up/volume down increase/decrease screen light from the keyboard, unfortunately, there are no top keys in Magic Keyboard.\n\nIt’s Not a Computer. Because;\n\nApple’s Sidecar\n\nWhen using a laptop or desktop, we sometimes need a second screen. We don’t need a new computer, we’re just looking for a screen; iPad provides this with Sidecar support. iPad is not a computer here; a screen.\n\nAnother topic is games; We know that MacBook is not preferred for games. But the iPhone performs well in games. I’m not a gamer but in games, the iPad performs like an iPhone, not MacBook. Moreover, there is controller support.\n\nThe iPadOS should no longer be compared to the iPhone or the Mac. It seems to be between macOS and iOS, but it is not. Special applications should be made for the iPad. For example, the Sharpr3D app is just for the iPad.\n\nSharpr3D\n\nIn other words, you can also do professional works such as 3D modeling, video editing, photo editing on the iPad. So what’s the limit? It’s not currently at the Mac level. You can edit a very good video with an app such as Luma Fusion, iMovie, Adobe Rush on iPads. But when you want to take this to a more professional level, iPads will not be suitable for you.\n\nLuma Fusion\n\nNote: Everyone talks about Apple after John Ive. When John Ive left Apple, he founded the design agency LoveFrom and his first customer was Apple. So Apple still works with John Ive.",
    "keywords": [
      "future",
      "iphone",
      "ipad",
      "computer",
      "magic",
      "screen",
      "macbook",
      "games",
      "used",
      "apple",
      "keyboard"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/software-architecture-the-important-architectural-patterns-you-need-to-know-a1f5ea7e4e3d?source=extreme_main_feed---------9-73--------------------87911fea_3ecc_4843_9ef1_1d5a57424503-------",
    "title": "Software Architecture: The Most Important Architectural Patterns You Need to Know",
    "publish_date": "2020-10-15 08:17:04",
    "authors": [
      "Trung Anh Dang"
    ],
    "summary": "Software Architecture: The Most Important Architectural Patterns You Need to KnowExplaining common different architecture patternsPhoto by Alexander Andrews on UnsplashAn architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context.\nMany programmers are nowadays still confused about the difference between architecture patterns or don’t even know much about it.\nLayered ArchitecturePipe and FilterClient ServerModel View ControllerEvent Driven ArchitectureMicroservices ArchitectureLayered ArchitectureThe most common architecture pattern is the layered architecture or known as the n-tier architecture.\nOn the second concept, the layered architecture pattern is a technically partitioned architecture as opposed to a domain partitioned architecture.\nPipe and FilterOne of the patterns in software architecture that appears, again and again, is the pipe-filter pattern.",
    "text": "Software Architecture: The Most Important Architectural Patterns You Need to Know\n\nExplaining common different architecture patterns\n\nPhoto by Alexander Andrews on Unsplash\n\nAn architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context.\n\nA pattern is a solution to a problem in a context.\n\nMany programmers are nowadays still confused about the difference between architecture patterns or don’t even know much about it.\n\nLet me explain to you…!\n\nLayered Architecture\n\nPipe and Filter\n\nClient Server\n\nModel View Controller\n\nEvent Driven Architecture\n\nMicroservices Architecture\n\nLayered Architecture\n\nThe most common architecture pattern is the layered architecture or known as the n-tier architecture. It is widely known by most software architects, designers, developers. Although, there are no specific restrictions in terms of the number and type of layers that must exist, most layered architecture consists of four tiers: presentation, business, persistence and database as follows.\n\nan popular example of n-tier architecture\n\nContext\n\nAll complex systems experience the need to develop and evolve portions of the system independently. For this reason, the developers of the system need clear and well-documented separation of concerns, so that modules of the system may be independently developed and maintained.\n\nProblem\n\nThe software needs to be segmented in such a way that the modules can be developed and evolved separately with little interaction among the parts, supporting portability, modifiability, and reuse.\n\nSolution\n\nTo achieve this separation of concerns, the layered pattern divides the software into units called layers. Each layer is a grouping of modules that offers a cohesive set of services. The usage must be unidirectional. Layers completely partition a set of software, and each partition is exposed through a public interface.\n\nThe first concept is each of the layers has a specific role and responsibility. For example, the presentation layer would be responsible for handling all UI. Because this separation of concerns within the layered architecture makes it easy to build effective roles and responsibility.\n\nOn the second concept, the layered architecture pattern is a technically partitioned architecture as opposed to a domain partitioned architecture. They are groups of components, rather being by domain.\n\nThe last concept is that each of the layers in the layered architecture is marked as being either closed or open. A closed layer means that a request moves from layer to layer, it must go through the layer right below it to get to the next layer below that one. The request cannot skip any layers.\n\nClosed layers and request access\n\nWeakness\n\nLayers contribute to a performance penalty. The pattern does not lend itself to high-performance applications because it is not efficient to go through multiple layers of the architecture to fulfill a business request.\n\nThe addition of layers also adds up-front cost and complexity to a system.\n\nUsages\n\nWe should use this style for small, simple applications or websites. It is a good choice for situations with a very tight budget and time constraints.\n\nMulti-Tier Pattern\n\nContext\n\nIn a distributed deployment, there is often a need to distribute a system’s infrastructure into distinct subsets.\n\nProblem\n\nHow can we split the system into a number of computationally independent execution structures: groups of software and hardware connected by some communications media?\n\nSolution\n\na multi-tier example — consumer website J2EE\n\nThe execution structures of many systems are organized as a set of logical groupings of components. Each grouping is termed a tier.\n\nWeakness\n\nSubstantial up-front cost and complexity.\n\nUsages\n\nUsed in distributed systems.\n\nPipe and Filter\n\nOne of the patterns in software architecture that appears, again and again, is the pipe-filter pattern.\n\nthe pipe filter style\n\nContext\n\nMany systems are required to transform streams of discrete data items, from input to output. Many types of transformations occur repeatedly in practice, and so it is desirable to create these as independent, reusable parts.\n\nProblem\n\nSuch systems need to be divided into reusable, loosely coupled components with simple, generic interactionmechanisms. In this way they can be flexibly combined with each other. The components, being generic and loosely coupled, are easily reused. The components, being independent, can execute in parallel.\n\nSolution\n\nPipes in this architecture form the communication channel between filters. The first concept is each of the pipes is un-directional and point to point for performance reasons, accepting input from one source and always directing output to another.\n\nThere are four types of filters exist within this style as follows.\n\nproducer ( source ): the starting point of a process.\n\n): the starting point of a process. transformer ( map ): performs a transformation on some or all of the data.\n\n): performs a transformation on some or all of the data. tester ( reduce ): tests one or more criteria.\n\n): tests one or more criteria. consumer ( sink ): the terminating point.\n\nWeakness\n\nNot good choice for interactive systems, because of their transformational character.\n\nExcessive parsing and unparsing leads toloss of performance and increased complexity in writing the filters themselves.\n\nUsages\n\nThe pipe-filter architecture uses in a variety of applications, especially tasks that facilitate simple, one-way processing such as EDI, ETL tools.\n\nCompilers: the consecutive filters perform lexical analysis, parsing, semantic analysis, and code generation.\n\nClient Server\n\nContext\n\nThere are shared resources and services that large numbers of distributed clients wish to access, and for which we wish to control access or quality of service.\n\nProblem\n\nBy managing a set of shared resources and services, we can promote modifiability and reuse, by factoring out common services and having to modify these in a single location, or a small number of locations. We want to improve scalability and availability by centralizing the control of these resources and services while distributing the resources themselves across multiple physical servers.\n\nSolution\n\nIn a client-server style, components and connectors have a particular behavior.\n\nComponents, called “clients,” send requests to a component, called “server,” and wait for a reply.\n\nA server component receives a request from a client and sends it the reply.\n\nWeakness\n\nThe server can be a performance bottleneck and a single point of failure.\n\nDecisions about where to locate functionality (in the client or in the server) are often complex and costly to change after a system has been built.\n\nUsages\n\nWe can use the client-server style to model a part of a system that has many components sending requests (clients) to another component (server) that offer services: online applications such as email, document sharing and banking.\n\nModel View Controller\n\nContext\n\nThe user interface is typically the most frequently modified portion of an interactive application. Users often wish to look at data from different perspectives, such as a bar graph or a pie chart. These representations should both reflect the current state of the data.\n\nProblem\n\nHow can user interface functionality be kept separate from application functionality and yet still be responsive to user input, or to changes in the underlying application’s data?\n\nAnd how can multiple views of the user interface be created, maintained, and coordinated when the underlying application data changes?\n\nSolution\n\nThe model-view-controller (MVC) pattern separates application functionality into three kinds of components as follows.\n\nA model, which contains the application’s data.\n\nA view, which displays some portion of the underlying data and interacts with the user.\n\nA controller, which mediates between the model and the viewand manages the notifications of state changes.\n\nWeakness\n\nThe complexity may not be worth it for simple user interfaces.\n\nThe model, view, and controller abstractions may not be good fits for some user interface toolkits.\n\nUsages\n\nMVC is an architectural pattern that is commonly used in web, mobile applications while developing user interfaces.\n\nEvent Driven Architecture\n\nContext\n\nComputational and information resources need to be provided to handle incoming independent asynchronous application-generated events in a manner that can scale up as demand increases.\n\nProblem\n\nConstruct distributed systems that can service asynchronous arriving messages associated with an event, and that can scale from small and simple to large and complex.\n\nSolution\n\nDeploy independent event processes/processors for event handling. Arriving events are queued. A scheduler pulls events from the queue and distributes them to the appropriate event handler based on a scheduling policy.\n\nWeakness\n\nPerformance and error recovery may be issues.\n\nUsages\n\nAn e-commerce application that uses this approach would work as follows:\n\nThe Order Service creates an Order in a pending state and publishes an OrderCreated event.\n\nThe Customer Service receives the event and attempts to reserve credit for that Order. It then publishes either a Credit Reserved event or a CreditLimitExceeded event.\n\nevent. The Order Service receives the event from the Customer Service and changes the state of the order to either approved or canceled\n\nMicroservices Architecture\n\nContext\n\nDeploy server-based enterprise applications that support a variety of browsers and native mobile clients. The application handles client requests by executing business logic, accessing a database, exchanging messages with other systems, and returning responses. The application might expose a 3rd party API.\n\nProblem\n\nMonolithic applications can become too large and complex for efficient support, and deployment for optimal distributed resource utilization such as in cloud environments.\n\nSolution\n\nBuild applications as suites of services. Each service is independently deployable and scalable and has its own API boundary. Different services can be written in different programming languages, manage their own database, and developed by different teams.\n\nWeakness\n\nSystems must be designed to tolerate service failures that require more system monitoring. Service choreography and event collaboration overhead.\n\nWe also need more memory.\n\nUsages\n\nMany use cases are applicable for a microservices architecture, especially those that involve an extensive data pipeline. For example, a microservices-based system would be ideal for a reporting system on a company’s retail store sales. Each step in the data preparation process would be handled by a microservice: data collection, cleansing, normalization, enrichment, aggregation, reporting, etc.\n\nEasy, right?",
    "keywords": [
      "layers",
      "architectural",
      "service",
      "pattern",
      "systems",
      "important",
      "patterns",
      "know",
      "need",
      "services",
      "applications",
      "software",
      "data",
      "system",
      "architecture"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------90e4c5a8_a2d3_4978_a33b_1d7666362ca5-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------90e4c5a8_a2d3_4978_a33b_1d7666362ca5-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------90e4c5a8_a2d3_4978_a33b_1d7666362ca5-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------90e4c5a8_a2d3_4978_a33b_1d7666362ca5-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------90e4c5a8_a2d3_4978_a33b_1d7666362ca5-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://gen.medium.com/2020-has-been-bad-but-things-are-going-to-get-worse-2e083903b0f4?source=extreme_main_feed---------0-74--------------------0e054cad_b478_4992_bf62_e951b68a2326-------",
    "title": "2020 Has Been Bad. But Things Are Going to Get Worse.",
    "publish_date": "2020-10-15 16:16:45",
    "authors": [
      "Colin Horgan"
    ],
    "summary": "2020 Has Been Bad.\nBut Things Are Going to Get Worse.\nThe pandemic revealed our society’s failings.\nPhoto: Markus Spiske/UnsplashEarlier in 2020, as the lockdowns arrived, time started to feel warped.\nDisparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.",
    "text": "2020 Has Been Bad. But Things Are Going to Get Worse.\n\nThe pandemic revealed our society’s failings. We’re running out of time to fix them.\n\nPhoto: Markus Spiske/Unsplash\n\nEarlier in 2020, as the lockdowns arrived, time started to feel warped. We began to ask ourselves whether we were living in the past or the present or whether we were caught somewhere in between. This feeling of inertia was a function of recognizing a time lag between when the virus arrived and when we realized it was here.\n\nThe coronavirus case counts we saw updated every morning were already history — reality as it was two weeks prior. What was happening had already happened but also had not happened yet. Gradually, as the weeks and months followed, we learned more about the virus, including how long it had actually been around us — as well as how unprepared our society and our systems were for its arrival.\n\nThe pandemic has proven to be a clarifying force. While it will likely change some aspects of our society, before it does, it is first revealing what kind of a society we already had: one that is teetering on decaying foundations that have either gone unseen or have been deliberately ignored for decades.\n\nIn nearly every Western democracy it has hit, the pandemic has disproportionately affected people of color, the poor, and the elderly. Sometimes, like in the U.S., it’s hit them all. In short, the virus has shown us where our most egregious inequalities lie. Disparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.\n\nWe are living on a neglected structure, poorly constructed decades ago and then left largely unchecked. Even when we had the chance, after its near-collapse in 2008, to reassess the system, we didn’t bother and instead were steered for another decade in an ideological vacuum, maybe the last true product of late capitalist boredom. This long-standing failure to account for the obvious disparities at the heart of our society is probably why the pandemic will likely create a so-called K-shaped recession — one wherein “big companies and rich families have largely recovered, whereas mom-and-pops and the moms and pops who run them are living through a second Great Depression,” as Annie Lowrey wrote recently at The Atlantic.\n\nWe live every day under a looming sense of delayed inevitability. How long can it go on?\n\nThe mechanisms we have that ought to help us address those disparities, like politics, law, or journalism, have also been revealed to be heavily damaged. Our democracies are stressed, not from external enemies as much as from internal rot. Rebuilding them would require us to inhabit a shared reality. Thanks somewhat to our current acoustic information sphere dominated by platforms of fantasy, we don’t have one.\n\nThat lag time we noticed in the spring now feels more familiar, if not constant. We live every day under a looming sense of delayed inevitability. How long can it go on?",
    "keywords": [
      "bad",
      "2020",
      "long",
      "revealed",
      "disparities",
      "pandemic",
      "living",
      "going",
      "worse",
      "weeks",
      "virus",
      "society",
      "things",
      "sense"
    ]
  },
  {
    "url": "https://gen.medium.com/amy-coney-barretts-confirmation-could-cause-a-right-to-privacy-domino-effect-e0e721c2c36a?source=extreme_main_feed---------1-74--------------------0e054cad_b478_4992_bf62_e951b68a2326-------",
    "title": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect",
    "publish_date": "2020-10-15 18:07:16",
    "authors": [
      "Jill Filipovic"
    ],
    "summary": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino EffectIf there’s no right to privacy, a whole line of rulings goes out the windowAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation.\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion.\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\nIf Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it.",
    "text": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect\n\nIf there’s no right to privacy, a whole line of rulings goes out the window\n\nAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation. Photo: Pool/Getty Images\n\nIf there is one stunningly clear takeaway from the hearings to confirm Amy Coney Barrett to the Supreme Court, it’s this: Enjoy your rights to bodily sovereignty and sexual privacy while you have them. Because if Barrett is confirmed to the Supreme Court, they may not last long.\n\nSupreme Court confirmation hearings are often farcical displays. A nominee, chosen from among the finest legal minds in the land and auditioning for a job to write legal opinions that have the power to profoundly shape Americans’ lives, sits before the Senate Judiciary Committee and purports to have few opinions at all on the cases and issues that are the most controversial and oft-discussed inside the legal academy and out of it. But Barrett brings the dissembling and disingenuous refusal to answer direct questions to a new level. No Supreme Court nominee in memory has been so evasive. And where Barrett hedges the most are the biggest tells: on the Affordable Care Act, on presidential powers in elections, and on reproductive rights and sexual privacy.\n\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion. She has said so herself, joining the “pro-life” faculty group at Notre Dame Law School, and signing an ad that said, “It’s time to put an end to the barbaric legacy of Roe v. Wade and restore laws that protect the lives of unborn children.” That isn’t a statement of a personal view; that’s a demand for the courts to act. And if confirmed, Barrett will be one of the nine people in the country with the power to do what the letter she signed demands.\n\nShe has already shown us her intentions. President Donald Trump believes her. Senate Republicans believe her. We should believe her, too.\n\nDiscerning what Barrett will do if she is elevated to the court is made a little more complicated by the fact that Barrett suddenly refuses to speak about her views at all. Neither she nor the president nor her Republican proponents in the Senate want her to be too transparent on the abortion question. Roe v. Wade is, after all, the law of the land, and most Americans do not want it overturned. The election concludes in just 20 days — a clear argument against holding these hearings now, but one Republicans have disregarded. If Barrett answers honestly in the confirmation hearings — if she says that she believes Roe was wrongly decided — then Republicans are going to face a lot of demands to vote no on her confirmation, and have a lot of angry voters on their hands.\n\nAnd so instead, we are treated to this joke of a hearing, where we all pretend that Barrett doesn’t believe exactly what she has repeatedly said she believes.\n\nBarrett is not the first Supreme Court nominee to dodge the abortion question. But she is even less committal than most. Ruth Bader Ginsburg answered clearly in her confirmation hearings that she believes Roe was rightly decided; Sonia Sotomayor agreed that Roe was settled law. Barrett won’t do that.\n\nTo add insult to injury, Senate Republicans (and a few Democrats) have spent precious minutes fawning over Barrett’s family and her ability to have both a career and a large family, something men have done for centuries without much comment. Over and over, conservative senators called Barrett a role model or an inspiration for girls and women (as if boys and men can’t look up to a woman). There is something particularly pernicious about demanding that women laud Barrett, a woman more in the mold of anti-feminist Phyllis Schlafly than women’s rights trailblazer Ruth Bader Ginsburg, as an icon of female accomplishment and professional possibility. It’s no coincidence that in the wake of Roe v. Wade and earlier cases establishing a right to contraception access, American women surged toward greater independence, going to college and into the workforce in record numbers. The lessons of safe abortion and readily available contraception reverberate around the world: When women can plan their families, women thrive. We live longer. We are far less likely to die in childbirth, and our children are less likely to die, too. We are more likely to go to school; so are our daughters. We are less likely to be trapped in abusive relationships, and less likely to be stuck in poverty. Our families are more prosperous. Our communities are healthier.\n\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\n\nFeminists have fought long and hard for these rights — including for the right of women to choose to have large families, as Barrett has, even if they are not worth nearly $2.6 million, as Barrett is, but are instead struggling to keep their children safe and secure. Republicans and conservatives like Barrett have cheered on large (white) families, while refusing to do much of anything to help out when families struggle. Feminists have tried to clear the way for women to make their own reproductive choices — to have children or not, without state interference or professional discrimination. Barrett has benefited from that feminist work, which is why she is now in a position to undermine it. Being told that feminists and women generally should appreciate that and admire her is a hard pill to swallow.\n\nBarrett won’t be the first anti-abortion judge on the court (although if Republicans are looking for firsts, she would be the first staunchly anti-abortion woman). But her hostility to reproductive rights extends far beyond Roe and the right to abortion. In the hearings, Barrett couldn’t answer whether she believed Griswold v. Connecticut, the case that extended contraception access to married women, was rightly decided. We know that her mentor, Antonin Scalia, believed Griswold was indeed decided wrongly, and given the chance, would likely have overturned it. We know Barrett has said that, while she is her own woman, she believes Scalia got most of his decisions right. While Roe gets a lot of press, Griswold is at the heart of many of the court’s most significant decisions — it was the first case that fully laid out the right to sexual privacy, which has been understood since then to include the right of any woman to use contraception and have an abortion; the right of people of the same sex to have consensual intercourse; and the right of individuals to marry someone of the same sex. If Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\n\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it. And she’s right that it’s been a while since states have criminalized contraception. But they haven’t done that because abortion rights and Roe have taken the bulk of the focus of the anti-abortion movement. It’s worth noting, though, that most mainstream anti-abortion groups do not support contraception access; some are publicly opposed to it, and some falsely characterize common contraceptive methods as “abortifacients.” These same groups have pushed legislation that establishes personhood at the moment of conception, something at odds with the medical definition of pregnancy, but that could outlaw several of the most common and effective forms of birth control and even criminalize in-vitro fertilization. That’s all very far from an academic exercise. It is not “unthinkable.” It is, in fact, part of a well-thought-out plan. If Roe is overturned, there’s little to stop conservative groups from pressing forward and coming for contraception next — or marriage equality, or the right to have consensual intercourse with an adult of the same sex.\n\nThe message from Barrett’s confirmation hearing was clear: This is all on the line. She does not believe there is a constitutional right to sexual privacy. The question is whether the weight of the precedent — dozens of cases over five decades, millions of Americans who rely on what they believe to be their right to use contraception, end unwanted or dangerous pregnancies, have sex, and get married — will be enough to tip Barrett’s originalist scales toward upholding the law as it stands.\n\nBarrett showed us who she is: a woman who will not affirm even the least contested rights to sexual privacy and family planning. Which means even the least contested of those rights could be up for grabs with Barrett on the Supreme Court.",
    "keywords": [
      "barretts",
      "women",
      "confirmation",
      "effect",
      "cause",
      "barrett",
      "court",
      "griswold",
      "domino",
      "privacy",
      "rights",
      "amy",
      "coney",
      "hearings",
      "contraception",
      "right",
      "roe"
    ]
  },
  {
    "url": "https://elemental.medium.com/my-therapist-says-all-relationships-are-impossible-d4c61f7df249?source=extreme_main_feed---------2-74--------------------0e054cad_b478_4992_bf62_e951b68a2326-------",
    "title": "My Therapist Says All Relationships Are Impossible",
    "publish_date": "2020-10-14 05:32:29",
    "authors": [
      "Naveen Kumar"
    ],
    "summary": "My Therapist Says All Relationships Are ImpossibleIt’s okay to lose a friendshipThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement.\nMy therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!).\nMy therapist put it bluntly: “All relationships are impossible.”All relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\nLabels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\nThis type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences.",
    "text": "My Therapist Says All Relationships Are Impossible\n\nIt’s okay to lose a friendship\n\nThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement. In the decade we’ve known each other, I had always felt comfortable talking to him about my own experience of otherness as an Indian American. But when I pointed to his whiteness as a privilege he ought to examine, he grew defensive, blew up, and ghosted.\n\nI’m not someone who falls out with friends easily or often. The few times it has happened, my instinct is to ask, “How did I get myself into this?” or “Why didn’t I see this coming?”\n\nWhen any situation in my life goes awry, I tend to perseverate, fixating on how I might have caused it to fly off the rails. “Am I a bad judge of character?” I think. My therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!). But when it comes to the shock of a breakup, whether with a friend or a romantic partner, it’s the fantasy that we can ever fully know someone, or achieve a kind of perfect unity that’s to blame.\n\nMy therapist put it bluntly: “All relationships are impossible.”\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\nHis statement was one of those breakthrough moments when my jaw dropped and I felt an immediate sense of relief. The existentialism of it thrilled me, and its practical application made perfect sense. In every relationship, there will always come a conflict (likely many over time) that indicates an unbridgeable distance between two people. Labels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\n“A lot of the things that the world tells us about what a relationship is supposed to be present an ideal that everyone feels they’re failing to live up to,” says Jamieson Webster, PhD, a psychoanalyst in New York City and author of Conversion Disorder: Listening to the Body in Psychoanalysis. It’s not just that the messages we get from pop culture, about fairy tale romance and lifelong BFFs, are unrealistic. The very idea that any relationship, no matter how close, can make us less alone or separate from each other is perhaps the ultimate human fantasy.\n\n“Separation and difference are very hard, including the capacity to understand being alone,” Webster says. “There is so much fantasy that tries to cover over ‘aloneness,’ which is simply a factual reality.”\n\nWhen we’re able to more clearly understand our innate separateness, we can also more readily accept that personal differences are bound to arise in every relationship. The question then becomes how two people acknowledge the essential distance between them, communicate their feelings about it, and reach a mutual resolution that doesn’t attempt to paper over it. Sometimes it’s possible to bridge the gap and continue forward together; in other cases, it may be time to move on. “Whether with a friend or a partner, it’s about what you build on the basis of your differences,” Webster says. “Because you are two unique people with different histories and different pleasures and pains.”\n\nRecognizing the impossibility of a “perfect” relationship is also useful when we seek to build new ones. While swiping through dating profiles, for example, it’s easy to point to a picture you don’t particularly like or the fact that someone prefers cats over dogs as reasons why it would never work out. This type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences. How many potential connections have we cut off at the pass due to preconceived notions of compatibility?\n\nBreakups are hard, even and especially with close friends. But they’re also the surest way to recognize, and even honor, the truth of our individuality. “Breakups really propel people forward in terms of their development,” Webster says. “Whether it’s with friends or partners, a breakup is a time to recover yourself and find your separateness,” something you may have been struggling to find inside the relationship. That doesn’t mean we shouldn’t allow ourselves to feel hurt and disappointed, or take responsibility for our role in the process. But rather than frame a breakup as a personal failure, we can acknowledge it as a reflection of one of life’s most essential truths.",
    "keywords": [
      "differences",
      "partner",
      "therapist",
      "fantasy",
      "impossible",
      "friend",
      "relationship",
      "webster",
      "friends",
      "relationships",
      "perfect"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------0e054cad_b478_4992_bf62_e951b68a2326-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------4-73--------------------0e054cad_b478_4992_bf62_e951b68a2326-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------5-73--------------------0e054cad_b478_4992_bf62_e951b68a2326-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/better-marketing/why-is-linkedin-such-a-cringefest-b2b29ca60833?source=extreme_main_feed---------6-73--------------------0e054cad_b478_4992_bf62_e951b68a2326-------",
    "title": "Why Is LinkedIn Such a Cringefest?",
    "publish_date": "2020-09-01 18:54:04",
    "authors": [
      "Sean Kernan"
    ],
    "summary": "For example, Rule #1 of getting internet points (be hot), applies to LinkedIn, even if the post has no relation to the purpose of the platform.\nJust as an FYI, if you leave a comment on a LinkedIn post, it’s automatically going to show that post, with your comment highlighted, to a number of your connections.\nHe emailed me something to the effect of, “How’d you know that about that wolf post?” Then I explained it to him (I consume a lot of wildlife documentaries), and also explained my harsh tone.\nAuthor via LinkedinLove it or hate it, Linkedin is full of lurkers.\nLinkedIn has become a meme.",
    "text": "Why Do Such Trash Posts Go Viral?\n\nThere’s a couple of reasons.\n\nYes, short attention spans are a part of it. But, by far, the biggest contributor is that lots of users aren’t good at English. And I say that with no malice.\n\nMany non-native speakers see these posts and can’t see the nuance of why it’s terrible writing. But they recognize the simple verbs and nouns. They put the puzzle together and hail praise to the mighty turd.\n\nI can't blame them. I’d probably upvote a Spanish shitpost without knowing it.\n\nHere’s a tone-deaf example. This went super-viral:\n\nSource: author via linkedin\n\nNote on the above: they said they don’t want money but then later in the post say they want a salary increase.\n\nQuick side tip: don’t capitalize words unless there is a very specific reason. The tone can be interpreted as a bit hostile. Also, don’t ever write a post like that.\n\nMy theory is that any algorithm-based platform, including Medium, will eventually devolve into Facebook without some sort of intervention. Human beings don't know how to optimize for quality on their own.\n\nFor example, Rule #1 of getting internet points (be hot), applies to LinkedIn, even if the post has no relation to the purpose of the platform.\n\nCase in point:\n\nAuthor via Linkedin\n\nTheir English might be bad. But all men are fluent in thirst. Just as an FYI, if you leave a comment on a LinkedIn post, it’s automatically going to show that post, with your comment highlighted, to a number of your connections.\n\nIt won’t be great personal branding. I learned this first hand.\n\nI was messaged by my CEO after I left a frustrated comment on a post. You may recognize the post. It goes viral at least once a year.\n\nAuthor via ipinimig\n\nThere will always be thousands of comments about how amazing this meme is and how companies should be just like wolf packs.\n\nThe problem? That isn’t how wolf packs operate.\n\nThe alpha doesn’t just sit at the back and it’s ridiculous that this meme keeps getting recirculated. No, this fake-story isn’t a world-changing issue. It’s just annoying that people just make up science to fit a clicky narrative.\n\nI left a comment correcting it, perhaps a bit bluntly. My comment got buried in the cluttered sludge of fanboys. Unexpectedly, my CEO saw the comment.\n\nHe emailed me something to the effect of, “How’d you know that about that wolf post?” Then I explained it to him (I consume a lot of wildlife documentaries), and also explained my harsh tone.\n\nI’ll give you one last example. It is constantly going viral.\n\nSource: author via factcheck\n\nThis isn’t what happened. The baby on the right isn’t even the same baby. The girl on the right is the sister of the girl on the left.\n\nThe bigger point: we need to be careful about how we engage on these platforms. It’s super easy to look like a dumb-dumb because of all the blatantly false content that floats around.\n\nAdditionally, we need to be mindful of our ego. Resist the urge to flex post.\n\nAuthor via Linkedin\n\nLove it or hate it, Linkedin is full of lurkers. They are quick to judge. And many of those judgemental lurkers scan resumes for a living. Don’t be a cringe bot.\n\nLinkedIn has become a meme. But you don’t have to be part of it. Lest you join the annals of bad marketing.\n\nAnd men, enough with the thirst comments. It’s super weird. In the history of man, I don’t think they’ve ever led to anything good, particularly when your supervisor sees it.",
    "keywords": [
      "dont",
      "isnt",
      "cringefest",
      "thirst",
      "example",
      "linkedin",
      "comment",
      "post",
      "meme",
      "super",
      "wolf"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/top-4-dying-programming-languages-of-2020-1a4149753e92?source=extreme_main_feed---------8-73--------------------0e054cad_b478_4992_bf62_e951b68a2326-------",
    "title": "Top 4 Dying Programming Languages of 2020",
    "publish_date": "2020-09-29 12:15:03",
    "authors": [
      "Shubham Dixit"
    ],
    "summary": "Perl programming languagePerl programming language has seen a sharp decline.\nSource: Google trends (screenshot by author)Also, the red line in the picture above nearly touches the ground, they are from Google trends results.\nHaskell programming languageHaskell programming language is actually getting better.\nObjective-C programming languageThe Objective-C programming language is actually gaining popularity according to the PYPL index, and is in a 0.2% increase in trend.\nThe Google trends are of this type for Visual Basic programming language.",
    "text": "1. Perl programming language\n\nPerl programming language has seen a sharp decline. It was active in 2004 till 2009, and after that, it had seen a decline. Now, it is not dead, but also not active anymore.\n\nThere are fewer searches on YouTube, Google. Look, a video uploaded 4 years ago, and garnered only 240K views.\n\nAlso, the PYPL index tells the percentage of its decline in this year.\n\nPerl is experiencing a downward trend, so I shifted to another language for more insights.\n\nSource: Google trends (screenshot by author)\n\nAlso, the red line in the picture above nearly touches the ground, they are from Google trends results.\n\n2. Haskell programming language\n\nHaskell programming language is actually getting better. It is used by most companies namely Facebook, IBM.\n\nSource: YouTube\n\nAlso, youtube video shows that a video uploaded 5 years ago, and garnered 535K views.\n\nSource: Google Trends\n\nAlso, google trends results show a consistent trend (in blue line). It nearly touches the line below.\n\nIn comparison to it, the red line (Python) shows an upward trend and is in popularity as well.\n\n3. Objective-C programming language\n\nThe Objective-C programming language is actually gaining popularity according to the PYPL index, and is in a 0.2% increase in trend.\n\nSource: Google Trends\n\nThere are still plenty of people using Objective-C, of course, but they are programming.\n\nIf you are looking for work, or ever plan to in the future, then Swift is the only game in town.\n\nSource: YouTube\n\nAlso, the video uploaded 5 years ago has garnered 250K views till now.\n\nThere are jobs available for Objective-C, and people are actually paying well in the industry.\n\n4. Visual Basic for Applications programming language\n\nVisual Basic goes all the way from being at the top trends in 2004, and after 2009 it came straightway towards its decline. Though I had worked with visual basic, in school.\n\nThe Google trends are of this type for Visual Basic programming language.\n\nSource: Google trends (screenshot by author)\n\nAnd it’s hard to see this language going down in popularity.\n\nMoreover, the numbers from the PYPL index depicts a decline of 0.2%.\n\nI have not seen any video in my YouTube feed that relates to visual basic. So, it might have gone down there as well.\n\nI came across a video on YouTube, that’s uploaded 9 months ago, and garnered 810K views.",
    "keywords": [
      "2020",
      "basic",
      "uploaded",
      "visual",
      "languages",
      "decline",
      "youtube",
      "video",
      "language",
      "programming",
      "google",
      "trends",
      "dying"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------9-73--------------------0e054cad_b478_4992_bf62_e951b68a2326-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------16557f96_dc03_4a04_8d90_95d3e46d5f18-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------16557f96_dc03_4a04_8d90_95d3e46d5f18-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------16557f96_dc03_4a04_8d90_95d3e46d5f18-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------16557f96_dc03_4a04_8d90_95d3e46d5f18-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------16557f96_dc03_4a04_8d90_95d3e46d5f18-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------0-74--------------------f3f72abf_061e_444e_9694_8a5290bbad56-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://humanparts.medium.com/how-well-get-over-going-to-the-upper-room-with-donald-j-trump-4d63f2e9741a?source=extreme_main_feed---------1-74--------------------f3f72abf_061e_444e_9694_8a5290bbad56-------",
    "title": "How We’ll Get Over: Going to the Upper Room With Donald J. Trump",
    "publish_date": "2020-10-15 21:12:55",
    "authors": [
      "Max S. Gordon"
    ],
    "summary": "What we are facing is bigger than Donald Trump.\nOr maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose.\nPolitically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved.\nIf, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.",
    "text": "We’ve been here before. Our ancestors knew, when you can’t control the evil of the world, you must become the weather. A howling wind through the trees, a blistering sun, an irresistible force. Our democracy is on a respirator now, and we must defend it.\n\nJustice and nonviolent resistance became an electrifying force in 1955 when working-class Blacks who relied on the buses in Montgomery, Alabama, shut down the discriminatory system for an entire year, permanently changing the laws in that city. We need the spirit of transcendence that led these heroic women and men, many of them maids and laborers, to walk to work each day and say, “I can’t feel the hurt in my feet when there is a balm for my soul. And I will walk five more miles to work if it means a better life for my children.”\n\nWe need the Holy Ghost power that stopped Eugene “Bull” O’Connor, the commissioner of public safety in Birmingham, Alabama, when he ordered a battalion of firefighters to turn hoses on a crowd of protesters, including children, on May 5, 1963, often called “Miracle Sunday.” The firefighters not only resisted the order—it was reported that some of them cried.\n\nThe power of the crowd, who had walked from a local church, was both vulnerable and authoritative — a compelling, mystical combination. Whatever racist trance had possessed those firefighters when they’d hosed the same crowds only days before, it was broken, perhaps when they looked at the children and thought, “The little girl I am aiming this hose at could be mine.” Rev. Martin Luther King, Jr. later wrote, “I felt there, for the first time, the pride and the power of nonviolence.”\n\nThe alchemy of grace and conviction works. It has worked. I know because I am alive. I write these words with the knowledge that once upon a time someone who belonged to my family would have been whipped or worse for even trying to learn the alphabet. Yet I read, I write. Something they did to survive must have worked — because I’m here.\n\nNo matter how much they try to distort the truth on Fox News or make us feel like fools for believing, the sacrifices of earlier generations matter. How many women had to die on kitchen floors and back alleys for just one woman to walk into a care facility, protected by Roe v. Wade, and make an appointment for her health — legally and safely? We will not go back. Their sacrifices matter. And we owe them our determination to see that Roe v. Wade is not overturned. A persuasive river of courage flows through history, from Harriet Tubman to the suffragettes to the rioters at Stonewall. We’ll never know all the names, but we know that river exists — because we’re here.\n\nHistory has always had rogues, scoundrels, reprobates, damn fools, men who have acted as children. Bullies. Dictators. As a human family, we’ve seen astounding acts of evil. But the thing about evil is not to make it personal or to take it personally. We have to look beyond the actors. The only way to combat evil is not to respond with evil, but to invest in a more compelling vision. Because of someone’s vision, I am married to the man I love.\n\n7\n\nWelcome to Niggerland. A place on the outskirts of town where there has been crime and poverty and drugs and lack of health care and denied educational opportunities. My white friends, you were once untouched by the pain of the people who live there. But please know, those divisions no longer exist the way they once did. Perhaps Donald Trump’s greatest achievement is that he’s turned every American into a nigger, black or white (including a few people who are convinced they hate niggers). One way or another, we’re all in the soup now.\n\nNigger. It’s an unpleasant word, and forgive me for using it, but it’s the right word. It’s not a Black person’s shame, but a white society’s shame for its ugliness. It’s a word meant to terrorize a group of people within a system of oppression and make them feel powerless so they won’t act and try to change it. In other words, in Donald Trump’s eyes, we’re all niggers now. There isn’t a single person or institution he doesn’t have contempt for.\n\nWhat we are facing is bigger than Donald Trump. Perhaps he is the fulfillment of America’s karma in the world, our political shadow finally come to life. Or maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose. He is the personification of the Ugly American trope, vulgarity incarnate, an ambling Frankenstein monster ripping the village apart with his bare hands. Politically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\n\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved. His message isn’t really new—it’s his malevolence that’s profound. Maybe one day we will perceive his legacy as an opportunity that afforded fundamental change. If, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.\n\nWe may not change his heart, but we need to alter ourselves so we are different when and if the next monster arrives. In the aftermath of what happens, assessments will be made, and we will have to acknowledge that while solidarity eventually came from unexpected sources — Republicans willing to abandon their tribe — this went on for far too long, and too many lives were lost.\n\n8\n\nThere is a Black teenage girl who studies her lipstick one more time in the mirror before cutting off the bathroom light. She is going to a demonstration. There may be violence. But she believes in that preacher, Dr. King, and the sermon he preached on racial equality last Sunday. She knows it is dangerous; they’ve unleashed dogs on protestors; they turned hoses on families, pinning them against buildings and cars. People have been jailed, students have been clubbed, just for having the audacity to want to go to school with whites, to vote without retaliation.\n\nIt is 1957, and only a girl herself, she has no way of knowing that one day her daughter will look back at her through history. Her daughter will move into her dorm at a public university, buy her books, and although every battle won’t have been won, she will walk into the classroom her mother envisioned for her, without having to be escorted by the National Guard. She will claim the seat her mother earned.\n\nWe have a legacy to uphold; we have ancestors to honor. We’ve been here before. The names are always different. But whenever justice is threatened anywhere, there are always brave ones.\n\n9\n\nRevolution begins with a flower. Hold it your hand. And know that the man who owns real estate and golf courses all over world, in all his presumed omnipotence, doesn’t have the power to make a single flower.\n\nAnd if he chooses to destroy that flower, there’s another flower next to it in the field. There will always be flowers. Legions of them, as there are legions of us.\n\nAnd when your hope is restored and you remember who you are and what is possible to achieve with fortitude and grace, step out the door with that flower in your hair.\n\nAnd act.",
    "keywords": [
      "trump",
      "world",
      "way",
      "weve",
      "upper",
      "evil",
      "j",
      "going",
      "know",
      "power",
      "walk",
      "white",
      "room",
      "donald"
    ]
  },
  {
    "url": "https://coronavirus.medium.com/the-company-set-to-roll-out-americas-future-vaccine-cb56ea9691fa?source=extreme_main_feed---------2-74--------------------f3f72abf_061e_444e_9694_8a5290bbad56-------",
    "title": "The Company Set to Roll Out America’s Future Vaccine",
    "publish_date": "2020-10-15 20:44:45",
    "authors": [
      "Yasmin Tayag"
    ],
    "summary": "The Company Set to Roll Out America’s Future VaccineThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccinesMario Tama / Getty ImagesWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages.\nIt’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history.\nIn August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\nAt the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention.\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made.",
    "text": "The Company Set to Roll Out America’s Future Vaccine\n\nThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccines\n\nMario Tama / Getty Images\n\nWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages. It’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history. To do the job, the White House has contracted a company called McKesson Corporation. In August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\n\nThis isn’t McKesson Corporation’s first vaccine-distribution rodeo. The company, founded 187 years ago and the seventh-largest U.S. company in terms of revenue in 2019, was also responsible for managing the distribution of the H1N1 vaccine to as many as 90,000 sites across the U.S. during the 2009 swine flu outbreak. At the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention. The company has also had an existing contract with the CDC to distribute childrens’ vaccines since 2016, and its role in distributing vaccines during the pandemic is based on that contract. Its success during the H1N1 epidemic bodes well for Covid-19 rollout, but U.S. public health infrastructure may continue to pose problems.\n\nAs I wrote previously, the specifics of how a vaccine will be distributed by McKesson — and who will get it first — are not yet clear. In an email to the Medium Coronavirus Blog, Robert Redfield, PhD, director of the CDC, said: “Through the Advisory Committee on Immunization Practices, CDC will play a vital role in deciding, based on input from experts and stakeholders, how initial, limited vaccine doses will be allocated and distributed while reliably producing more than 100 million doses by January 2021.” McKesson shared its public statement about its CDC partnership with the Blog but did not answer questions.\n\nThere does seem to be a plan to determine where exactly McKesson will distribute vaccines, according to the HHS. A spokesperson for the agency tells the Blog that ensuring easy access for all Americans, notably minority communities and medically underserved populations, is a top priority. “Whether it’s at a doctor’s office, retail pharmacy, federally qualified health center, or hospital,” they said, “thousands of outlets will be available so no American must travel far to be vaccinated.”\n\nThe plan is that McKesson will deliver a specific amount of vaccine to a designated location once it’s allocated to a given jurisdiction or authorized partner. In many instances, says the spokesperson, these will be sites where the vaccine will actually be administered; in others, McKesson will deliver vaccines to sites where health departments will pick up the vaccine and further distribute it within their networks. National retail pharmacies will also use a similar system. “This system,” says the spokesperson, “will be scalable to meet demand.”\n\nUntil more is known about the vaccine to be distributed, it’s not clear how it will be transported. Some vaccines are more delicate than others, and sometimes they require refrigeration. According to HHS, if the vaccine has ultra-cold storage requirements, it may be shipped directly from the manufacturer to administration sites, but this too will be managed within McKesson’s centralized system. The contract the company has with the CDC covers the transportation of both refrigerated (2–8º Celsius) and frozen (-20ºC) vaccines.\n\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made. The HHS spokesperson says the U.S. government is “committed to working with other countries friendly to our national security to ensure safe and effective Covid-19 vaccines are developed as fast as possible, however, the vaccine and therapeutic candidates [Operation Warp Speed] has invested in are the candidates OWS believes to be the most promising, and all of those candidates are being manufactured in the U.S.”\n\nMcKesson’s performance during the H1N1 epidemic in 2009 bodes well for the Covid-19 pandemic: During that time, it distributed almost 81 million H1N1 vaccine doses to 90,000 sites. However, notes journalist Michele Cohen Marill in the medical publication Medscape this week, distribution ran into obstacles at the public health level: “Public health officials struggled with the mechanics of designating priority groups and reaching out to them for vaccination while asking others to wait.”\n\n“I’m not sure there’s much difference between 1976, 2009, and 2020–2021,” Rebecca Wurtz, MD, MPH, of the University of Minnesota School of Public Health in Minneapolis, told Medscape. “The issues around organizing a massive distribution of a new vaccine are pretty similar.”\n\nThe U.S. can’t afford to make administrative errors during the Covid-19 pandemic, especially as the fall surge continues and the death toll mounts. States ultimately shape the actual vaccination programs, notes Marill in Medscape, and it’s up to them to decide who can administer the vaccine, and where. The hope is that state governments authorize as many people as possible to safely administer the vaccine and make access to it widespread and equitable. Neighborhood pharmacies will likely play a key role, as the HHS spokesperson suggests: “For example, during H1N1, once vaccines became widely available pharmacies played an important role in the vaccine distribution,” they said, adding that pharmacies’ role “is even more critical to vaccinations today and will be fully integrated into the distribution plan.”",
    "keywords": [
      "role",
      "future",
      "company",
      "mckesson",
      "public",
      "set",
      "roll",
      "distribution",
      "vaccines",
      "vaccine",
      "health",
      "spokesperson",
      "americas",
      "covid19"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------f3f72abf_061e_444e_9694_8a5290bbad56-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------4-73--------------------f3f72abf_061e_444e_9694_8a5290bbad56-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------5-73--------------------f3f72abf_061e_444e_9694_8a5290bbad56-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------6-73--------------------f3f72abf_061e_444e_9694_8a5290bbad56-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/steve-jobss-definition-of-smart-will-make-you-rethink-your-actions-6b1d7873fd46?source=extreme_main_feed---------7-73--------------------f3f72abf_061e_444e_9694_8a5290bbad56-------",
    "title": "Steve Jobs’s Definition of “Smart” Will Reprogram Your Idea of Intelligence",
    "publish_date": "2020-09-10 17:51:04",
    "authors": [
      "Alan Trapulionis"
    ],
    "summary": "Steve Jobs: “You have to not have the same bag of experiences as everyone else does”Recently, I’ve come across a video where a young Steve Jobs explains a key characteristic of what he considers to be a smart person.\nHow do you increase your intelligence to become what Jobs considers to be a “smart” person?\nAccording to the visionary — it’s all about having unique life experiences.\nOn Ferriss’s podcast, Lütke went in-depth about the books that changed his life — carefully describing each one of them.\nBooks are the easiest way for introverts to gather unique insights that shape their own worldview.",
    "text": "Steve Jobs: “You have to not have the same bag of experiences as everyone else does”\n\nRecently, I’ve come across a video where a young Steve Jobs explains a key characteristic of what he considers to be a smart person.\n\nI expected to hear something among the lines of “thinking out of the box” and “unflinching dedication.” Instead, I discovered one of the most profound pieces of advice I’ve ever heard.\n\n“A lot of [what it means to be smart] is the ability to zoom out, like you’re in a city and you could look at the whole thing from the 80th floor down at the city. And while other people are trying to figure out how to get from point A to point B reading these stupid little maps, you could just see it in front of you. You can see the whole thing.”\n\nJobs masterfully notes that smart people often make connections that seem obvious to them, but perplexing to others — simply because they have developed the skill of “zooming out” to get a better view of the big picture.\n\nThis, of course, sounds great and we can all agree that in order to change the world you need to clearly see the world. But how do you do that? How do you increase your intelligence to become what Jobs considers to be a “smart” person?\n\nAccording to the visionary — it’s all about having unique life experiences.\n\n“You have to not have the same bag of experiences as everyone else does, or else you’re gonna make the same connections and you won’t be innovative. […] You might want to think about going to Paris and being a poet for a few years. Or you might want to go to a third-world country — I’d highly advise that. Falling in love with two people at once. Walt Disney took LSD, do you know that?”\n\nIt makes sense. A 2015 study has concluded that openness to experience was the best predictor for “job performance in situations requiring creativity,” which is every entrepreneur’s bread and butter. It’s also safe to say that any significant career step up will require a decisive innovative move.\n\nThe study also found that extraversion “played a key role in contexts involving social interactions,” which is hardly a surprise, but a healthy reminder nonetheless. These findings tie in nicely with what Jobs said — people who are open to experience and extroverted will seek out the most interesting, non-standard situations in life — and gain invaluable perspectives as a result.\n\nJobs’ idea also helps explain why so many successful entrepreneurs are avid readers. Divyank Turakhia, a 35-year old Indian tech billionaire, has once said that since the age of 15 he has read for 800 hours a year, every year. Tobias Lütke, Shopify’s billionaire founder, was described by Tim Ferriss as one of the most aggressive readers he’d ever met.\n\nIt’s probably not the information itself that these leaders value about books, but rather how they change their perspective. On Ferriss’s podcast, Lütke went in-depth about the books that changed his life — carefully describing each one of them.\n\nBooks are the easiest way for introverts to gather unique insights that shape their own worldview. They expand your mental horizons, so it makes sense that someone who’s read 100 classic business books can spot a rising trend or a missed opportunity before anyone else.",
    "keywords": [
      "life",
      "youre",
      "world",
      "situations",
      "jobss",
      "books",
      "study",
      "unique",
      "intelligence",
      "idea",
      "jobs",
      "reprogram",
      "steve",
      "smart",
      "definition"
    ]
  },
  {
    "url": "https://towardsdatascience.com/25-lesser-known-java-libraries-you-should-try-ff8abd354a94?source=extreme_main_feed---------8-73--------------------f3f72abf_061e_444e_9694_8a5290bbad56-------",
    "title": "25 lesser-known Java libraries you should try in 2020",
    "publish_date": "2020-10-07 22:09:24",
    "authors": [
      "Md Kamaruzzaman"
    ],
    "summary": "JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape.\nIn enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform.\nWiremockHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development.\nLink:ConclusionIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries.\nThere are many excellent Java libraries that I have not listed here but worth a try.",
    "text": "1. RxJava\n\nReactive Extensions (ReactiveX) is a popular software development paradigm to deal with asynchronous and event-driven programming. RxJava is the Java VM implementations of the Reactive Extensions by using Observables. It extends the Observer Pattern to support event-driven programming by adding composable operators on a sequence of events/data in a declarative way. It also hides the low-level complexities like threading, thread-safety, synchronization, and concurrent data structure.\n\nIf you want to do reactive programming in Java, it is a must-have library.\n\nLink:\n\n2. OkHttp\n\nHTTP is by far the most used Application layer protocol. There are many excellent Java-based HTTP client libraries out there. But OkHttp is the simplest yet powerful HTTP client library in the JVM. It offers fluent and clean API to develop HTTP client in Java.\n\nIt also supports some advanced features: Connection pooling, GZIP shrink, response caching, modern TLS features, and many more.\n\nLink:\n\n3. MyBatis\n\nIn most Software development projects, we need to store data. Although there are many types of data storage, SQL is still the most used data storage type. As a Java developer, we need to match our Java object to the SQL table. One way to achieve the mapping is to use ORM (e.g., Hibernate). But there are many use cases when you want to have full control over the Object-Table mapping (e.g., Performance). In those cases, you can directly use JDBC and write the SQL query. The other way is to use MyBatis to map Java Object to Stored Procedure or SQL statements. It offers both annotation-based or XML descriptor based mapping.\n\nI prefer MyBatis over plain JDBC, especially in larger projects, as it improves the separation of concerns.\n\nLink:\n\n4. HikariCP\n\nHikariCP is the second library in this list related to Database. Establishing a JDBC connection is resource expensive. If you create a new connection every time you access the Database and close it once you are done, it can severely impact your application performance. Not to mention that failure to close the connection properly or allowing limitless database connection can crash your application.\n\nUsing Connection Pooling means connections are reused rather than created each time a connection is requested. HikariCP is a very fast yet lightweight Database connection pooling in JVM. It is also very reliable and a “zero-overhead” JDBC connection pool.\n\nLink:\n\n5. Lombok\n\nIn modern days, Java is often criticized as a verbose and bloated programming language. Compared to other popular languages (JavaScript, Python, Scala, Kotlin), a developer needs to write lots of boilerplate code in Java. Although Java has introduced Records in JDK 15 to reduce boilerplate code in Java, it is not an LTS release. Fortunately, a library can already reduce your boilerplate code in Java significantly: Project Lombok. You can generate getters, setters, hashcode, equals, toString, Builder classes by adding a few annotations. Additionally, it offers null pointer check, logger, and many more.\n\nLink:\n\n6. VAVR\n\nJava finally released the much-awaited functional programming via Lambda and Streaming in version 8. If you are used to functional programming or want to dive deep into functional programming, you may find Java’s functional programming wanting. Compared to many other functional programming languages (Haskell, Scala), Java is pale. VAVR is a library that can fill the gap of the functional programming features in Java. It provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nLink:\n\n7. Gson\n\nOver the years, JSON has become the de-facto data exchange format. In Java, there also exist several excellent libraries to deal with JSON. One of them is Jackson, which I have covered in my previous article. The other excellent library is Google’s Gson. Unlike Jackson, it is a minimalistic library and only supports JSON. It offers Data Binding, extensive Generic support, flexible customization. One of the major advantage (or disadvantage depending on your liking) of Gson is that it does not need annotation.\n\nLink:\n\n8. jsoup\n\nIf you are developing your application in Java and need to deal with HTML, you should use jsoup. It is a Java library to work with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data. It implements the WHATWG HTML5 specification and parses HTML using the best of HTML5 DOM methods. It supports parsing HTML from URL/string, find and extract data, manipulate the HTML elements, clean HTML, output HTML.\n\nLink:\n\n9. JIB\n\nIf you are working on an enterprise-grade application, it should be at least Cloud-ready. The first step to make your application cloud-ready is to containerize your application, i.e., put your artifactory binary into Docker image. Dockerizing a Java application is a bit tedious work: you need to have deep knowledge of Docker, you need to create a Dockerfile, and you will need Docker Daemon. Fortunately for the Java developers, Google has created an Open-source Java containerizer using already existing tools. You can use JIB as a Java library to build an optimized Docker and OCI image.\n\nLink\n\n10. Tink\n\nTink is yet another handy Java library in this list from Google. Cryptography and security are becoming increasingly more important in Software Development. Cryptographic techniques are used to secure user data. Implementing cryptography correctly requires a lot of expertise and effort. A group of Cryptographers and security engineers in Google has written the multi-language cryptographic library Tink. It offers easy-to-use but hard to misuse security API. Tink offers cryptographic functionalities via different primitives. It provides symmetric key encryption, streaming symmetric key encryption, deterministic symmetric key encryption, digital signature, hybrid encryption, and many other encryption functionalities.\n\nLink:\n\n11. Webmagic\n\nIf you work on Web crawling, you can write your own crawler, which is time-consuming and tedious. In Java, Webmagic is an excellent Web crawler library that covers the complete life-cycle of crawler: downloading, URL management, content extraction, persistence. It offers a simple yet flexible core, Annotation support, multi-threaded, and easy-to-use API.\n\nLink:\n\n12. ANTLR 4\n\nIf you work on parsing and processing data, then the ANTLR library could be handy. It is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It does this by giving us access to language processing primitives like lexers, grammars, parsers, and the runtime to process text against them.\n\nIt’s often used to build tools and frameworks.\n\nLink:\n\n13. Caffeine\n\nIf your application is read-heavy, then caching can dramatically improve your application’s data access performance. Java has many great caching libraries. Caffeine is the best among the lot. It is a high-performance, near-optimal caching library based on Java. It offers a fluent caching API and some advanced features like asynchronous loading of entries, asynchronous refresh, weak referenced keys, etc.\n\nLink:\n\n14. Metrics\n\nOnce your Java application runs into production, you will want to have insight into your application's critical components. Metrics from the Dropwizard framework is a simple yet compelling Java library that provides insight into your application and JVMs KPI, e.g., rate of events, pending jobs, service health check, and more. It is modular and offers modules for other libraries/frameworks.\n\nLink:\n\n15. gRPC-Java\n\nGoogle has created gRPC as a modern Remote Procedure Call system in 2015. Since then, gRPC became extremely popular and one of the most used RPC system in modern software development. The library gRPC-Java is the Java implementation of the gRPC client. If you want to use gRPC in Java, then this library can be handy for you.\n\nLink:\n\n16. Java WebSocket\n\nTraditional Client-Server communications unidirectional. WebSocket is a bi-directional communication protocol over a single TCP connection. Java WebSocket is a barebone WebSocket server and client implementation in Java. If you are a Java developer and want to work with WebSocket, this library is highly recommended.\n\nLink:\n\n17. JJWT\n\nJSON Web Token (JWT) is the de-facto Authorization and secure Information exchange format in modern software development. Whether you are using a simple session-based Authorization or highly advanced OAuth2 based Authorization, you will probably use JWT. JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape. It is fully RFC specification compliant on all implemented functionality. It supports readable and convenient fluent API.\n\nLink:\n\n18. Swagger-Core\n\nOpenAPI is the specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. Swagger-Core is the Java implementation of the OpenAPI specification. If you are exposing REST API in your Java/JavaEE application, you can automatically provide and expose your API definitions using Swagger-Core.\n\nLink:\n\n19. Async Http Client\n\nAsynchronous programming is becoming increasingly popular of late because of its non-blocking nature. Most of the popular Java HTTP client libraries offer limited to no asynchronous HTTP response processing. Async Http Client is a popular Java library that offers asynchronous HTTP response processing. As a bonus feature, this library also supports the WebSocket protocol.\n\nLink:\n\n20. Liquibase\n\nAs a software developer, we all know the importance of version control, DevOps, and CI/CD of our code. In a blog post: Evolutionary Database Design, the great Martin Fowler argued that we also need version control and CI/CD of our code. Liquibase is a tool that supports tracking, version controlling, and deployment of SQL database changes in Java Applications. If you are working with an SQL database where the database is evolving, this tool can greatly simplify your database migration.\n\nLink:\n\n21. Springfox\n\nI have already listed Swagger-Core in this list, which can automatically generate REST API documentation for vanilla Java or Java EE application. In enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform. In Spring-based Java applications, the Springfox library can automatically generate REST API documentation from the source code.\n\nLink:\n\n22. JavaCV\n\nOpenCV is a computer vision and machine learning software library. It is open-source and was built to provide a common infrastructure for computer vision applications. JavaCV is a wrapper on OpenCV and many other popular libraries (FFmpeg, libdc 1394, PGR FlyCapture) in the field of computer vision. JavaCV also comes with hardware accelerated full-screen image display, easy-to-use methods to execute code in parallel on multiple cores, user-friendly geometric and the color calibration of cameras and projectors, detection and matching of feature points, and many other features.\n\nLink:\n\n23. Joda Time\n\nJava had a poor date and time functionalities in the pre-Java8 core library. Java8 released much needed advanced date and time functionalities in its java.time package. If you are working with an older version of Java (pre Java8), Joda time can provide you the advanced date and time functionalities. However, if you are working in a newer version of Java, you may not need this library.\n\nLink:\n\n24. Wiremock\n\nHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development. During the writing Unit test, it is best to focus on SUT (System Under Test) and mock the services used in the SUT. Wiremock is a simulator for REST API and enables developers to write code against an API that does not exist or incomplete. In microservice-based software development, Wiremock can significantly boost development velocity.\n\nLink:\n\n25. MapStruct\n\nIn Java application development, you often need to convert one type of POJO to another type of POJO. One way to achieve this POJO or Bean conversion is to explicitly code the transformation, which is tedious. The smart way is to use a library that is specifically developed to transform POJO/Bean. MapStruct is a code generator that implements mapping between POJO/Bean on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe, and easy to understand.\n\nLink:\n\nConclusion\n\nIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries. These libraries are not domain-specific and can help you whether you are developing Software for Business applications, Robotics, Android Apps or Personal projects. Please note that for a large and wide eco-system like Java, this list is not conclusive. There are many excellent Java libraries that I have not listed here but worth a try. But this list of libraries can provide a quick peek into the world of the Java eco-system.",
    "keywords": [
      "2020",
      "development",
      "lesserknown",
      "libraries",
      "try",
      "library",
      "25",
      "application",
      "java",
      "need",
      "offers",
      "programming",
      "software",
      "data"
    ]
  },
  {
    "url": "https://towardsdatascience.com/fastapi-has-ruined-flask-forever-for-me-73916127da?source=extreme_main_feed---------9-73--------------------f3f72abf_061e_444e_9694_8a5290bbad56-------",
    "title": "FastAPI has Ruined Flask Forever for Me",
    "publish_date": "2020-10-11 09:01:22",
    "authors": [
      "Fahmi Nurfikri"
    ],
    "summary": "FastAPI has Ruined Flask Forever for MeWhy I prefer using FastAPI instead of FlaskFastAPI Logo — https://fastapi.tiangolo.comWhat do you like best about being a data scientist?\nIf you need to look for something about FastAPI, you usually don’t need to look anywhere else.\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running.\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords.\nFastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.",
    "text": "FastAPI has Ruined Flask Forever for Me\n\nWhy I prefer using FastAPI instead of Flask\n\nFastAPI Logo — https://fastapi.tiangolo.com\n\nWhat do you like best about being a data scientist? It’s definitely modeling and fine-tuning for optimal results. But what does it mean to be a good model if it’s never used or never deployed?\n\nTo produce a machine learning model, the typical approach is to wrap it in a REST API and use it as a microservice. One of the most widely used frameworks for creating APIs is Flask.\n\nThe main reason Flask is widely used is its simplicity. In general, we only use the API to model predictions, so we don’t need a complex architecture (example: Django). Another reason is that Flask is written in Python, which is the language used to do machine learning modeling in general, so we are familiar with it.\n\nHowever, if you want to create a REST API with clear, static, inputs that are validated, you must include several different packages from several third parties that do not cooperate with each other. And you have to create custom code to get everything running.\n\nThis is what caused me to look for alternatives for my needs, where finally I found a framework called FastAPI and it became my new favorite framework. Here are the reasons why I like to use FastAPI.\n\nDocumentation\n\nThe first thing I notice from FastAPI is the documentation. FastAPI has very extensive documentation and rich examples, which makes things easier. If you need to look for something about FastAPI, you usually don’t need to look anywhere else.\n\nIn addition, FastAPI will automatically generate interactive API documentation from the program we are running. So that we don’t need to write the API documentation that we created ourselves. As we all know, writing API documentation is annoying, not only because there is a lot of detail to go into, but also nothing more frustrating when the end-users are implementing but not match up the documentation. So that with the automatic generation of API documentation it will be very helpful\n\nBelow is a display example of the API documentation (provided by Swagger UI)\n\nAlternative automatic documentation is also provided (provided by ReDoc)\n\nTo define the created schema, it uses Pydantic, which is another awesome Python library, used for data validation. Its purpose is to validate the input that goes to FastAPI. If the input/request is incorrect then the appropriate error code will be returned.\n\nPerformance\n\nAs the name implies, this is indeed FastAPI. Based on data from techempower benchmarks, FastAPI beats every framework when it comes to performance. Where the most commonly used frameworks like Flask and Django lag behind.\n\nFramework performance — techempower\n\nYeah, it blazingly fast.\n\nAsynchronous\n\nOne of the drawbacks of Flask is the lack of asynchronous I/O support. Asynchronous is pretty important for HTTP endpoints, which tend to do a lot of waiting for I/O and network chat, making it a good one candidate for concurrency using async.\n\nUnlike Flask, FastAPI supports asynchronous code out of the box using the async / await Python keywords. FastAPI supports asynchronous by default, which means we don’t need to use a third-party framework to do asynchronous.\n\nAll you have to do is declare the endpoints with the async keyword like this:",
    "keywords": [
      "api",
      "dont",
      "using",
      "forever",
      "framework",
      "documentation",
      "flask",
      "need",
      "used",
      "ruined",
      "asynchronous",
      "fastapi"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------65ef75ff_02d3_417f_ab60_ca15991804d1-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------65ef75ff_02d3_417f_ab60_ca15991804d1-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------65ef75ff_02d3_417f_ab60_ca15991804d1-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------65ef75ff_02d3_417f_ab60_ca15991804d1-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------65ef75ff_02d3_417f_ab60_ca15991804d1-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://gen.medium.com/2020-has-been-bad-but-things-are-going-to-get-worse-2e083903b0f4?source=extreme_main_feed---------0-74--------------------f04b3c4a_ec2f_48a8_9bdb_defe53628397-------",
    "title": "2020 Has Been Bad. But Things Are Going to Get Worse.",
    "publish_date": "2020-10-15 16:16:45",
    "authors": [
      "Colin Horgan"
    ],
    "summary": "2020 Has Been Bad.\nBut Things Are Going to Get Worse.\nThe pandemic revealed our society’s failings.\nPhoto: Markus Spiske/UnsplashEarlier in 2020, as the lockdowns arrived, time started to feel warped.\nDisparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.",
    "text": "2020 Has Been Bad. But Things Are Going to Get Worse.\n\nThe pandemic revealed our society’s failings. We’re running out of time to fix them.\n\nPhoto: Markus Spiske/Unsplash\n\nEarlier in 2020, as the lockdowns arrived, time started to feel warped. We began to ask ourselves whether we were living in the past or the present or whether we were caught somewhere in between. This feeling of inertia was a function of recognizing a time lag between when the virus arrived and when we realized it was here.\n\nThe coronavirus case counts we saw updated every morning were already history — reality as it was two weeks prior. What was happening had already happened but also had not happened yet. Gradually, as the weeks and months followed, we learned more about the virus, including how long it had actually been around us — as well as how unprepared our society and our systems were for its arrival.\n\nThe pandemic has proven to be a clarifying force. While it will likely change some aspects of our society, before it does, it is first revealing what kind of a society we already had: one that is teetering on decaying foundations that have either gone unseen or have been deliberately ignored for decades.\n\nIn nearly every Western democracy it has hit, the pandemic has disproportionately affected people of color, the poor, and the elderly. Sometimes, like in the U.S., it’s hit them all. In short, the virus has shown us where our most egregious inequalities lie. Disparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.\n\nWe are living on a neglected structure, poorly constructed decades ago and then left largely unchecked. Even when we had the chance, after its near-collapse in 2008, to reassess the system, we didn’t bother and instead were steered for another decade in an ideological vacuum, maybe the last true product of late capitalist boredom. This long-standing failure to account for the obvious disparities at the heart of our society is probably why the pandemic will likely create a so-called K-shaped recession — one wherein “big companies and rich families have largely recovered, whereas mom-and-pops and the moms and pops who run them are living through a second Great Depression,” as Annie Lowrey wrote recently at The Atlantic.\n\nWe live every day under a looming sense of delayed inevitability. How long can it go on?\n\nThe mechanisms we have that ought to help us address those disparities, like politics, law, or journalism, have also been revealed to be heavily damaged. Our democracies are stressed, not from external enemies as much as from internal rot. Rebuilding them would require us to inhabit a shared reality. Thanks somewhat to our current acoustic information sphere dominated by platforms of fantasy, we don’t have one.\n\nThat lag time we noticed in the spring now feels more familiar, if not constant. We live every day under a looming sense of delayed inevitability. How long can it go on?",
    "keywords": [
      "bad",
      "2020",
      "long",
      "revealed",
      "disparities",
      "pandemic",
      "living",
      "going",
      "worse",
      "weeks",
      "virus",
      "society",
      "things",
      "sense"
    ]
  },
  {
    "url": "https://gen.medium.com/amy-coney-barretts-confirmation-could-cause-a-right-to-privacy-domino-effect-e0e721c2c36a?source=extreme_main_feed---------1-74--------------------f04b3c4a_ec2f_48a8_9bdb_defe53628397-------",
    "title": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect",
    "publish_date": "2020-10-15 18:07:16",
    "authors": [
      "Jill Filipovic"
    ],
    "summary": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino EffectIf there’s no right to privacy, a whole line of rulings goes out the windowAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation.\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion.\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\nIf Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it.",
    "text": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect\n\nIf there’s no right to privacy, a whole line of rulings goes out the window\n\nAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation. Photo: Pool/Getty Images\n\nIf there is one stunningly clear takeaway from the hearings to confirm Amy Coney Barrett to the Supreme Court, it’s this: Enjoy your rights to bodily sovereignty and sexual privacy while you have them. Because if Barrett is confirmed to the Supreme Court, they may not last long.\n\nSupreme Court confirmation hearings are often farcical displays. A nominee, chosen from among the finest legal minds in the land and auditioning for a job to write legal opinions that have the power to profoundly shape Americans’ lives, sits before the Senate Judiciary Committee and purports to have few opinions at all on the cases and issues that are the most controversial and oft-discussed inside the legal academy and out of it. But Barrett brings the dissembling and disingenuous refusal to answer direct questions to a new level. No Supreme Court nominee in memory has been so evasive. And where Barrett hedges the most are the biggest tells: on the Affordable Care Act, on presidential powers in elections, and on reproductive rights and sexual privacy.\n\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion. She has said so herself, joining the “pro-life” faculty group at Notre Dame Law School, and signing an ad that said, “It’s time to put an end to the barbaric legacy of Roe v. Wade and restore laws that protect the lives of unborn children.” That isn’t a statement of a personal view; that’s a demand for the courts to act. And if confirmed, Barrett will be one of the nine people in the country with the power to do what the letter she signed demands.\n\nShe has already shown us her intentions. President Donald Trump believes her. Senate Republicans believe her. We should believe her, too.\n\nDiscerning what Barrett will do if she is elevated to the court is made a little more complicated by the fact that Barrett suddenly refuses to speak about her views at all. Neither she nor the president nor her Republican proponents in the Senate want her to be too transparent on the abortion question. Roe v. Wade is, after all, the law of the land, and most Americans do not want it overturned. The election concludes in just 20 days — a clear argument against holding these hearings now, but one Republicans have disregarded. If Barrett answers honestly in the confirmation hearings — if she says that she believes Roe was wrongly decided — then Republicans are going to face a lot of demands to vote no on her confirmation, and have a lot of angry voters on their hands.\n\nAnd so instead, we are treated to this joke of a hearing, where we all pretend that Barrett doesn’t believe exactly what she has repeatedly said she believes.\n\nBarrett is not the first Supreme Court nominee to dodge the abortion question. But she is even less committal than most. Ruth Bader Ginsburg answered clearly in her confirmation hearings that she believes Roe was rightly decided; Sonia Sotomayor agreed that Roe was settled law. Barrett won’t do that.\n\nTo add insult to injury, Senate Republicans (and a few Democrats) have spent precious minutes fawning over Barrett’s family and her ability to have both a career and a large family, something men have done for centuries without much comment. Over and over, conservative senators called Barrett a role model or an inspiration for girls and women (as if boys and men can’t look up to a woman). There is something particularly pernicious about demanding that women laud Barrett, a woman more in the mold of anti-feminist Phyllis Schlafly than women’s rights trailblazer Ruth Bader Ginsburg, as an icon of female accomplishment and professional possibility. It’s no coincidence that in the wake of Roe v. Wade and earlier cases establishing a right to contraception access, American women surged toward greater independence, going to college and into the workforce in record numbers. The lessons of safe abortion and readily available contraception reverberate around the world: When women can plan their families, women thrive. We live longer. We are far less likely to die in childbirth, and our children are less likely to die, too. We are more likely to go to school; so are our daughters. We are less likely to be trapped in abusive relationships, and less likely to be stuck in poverty. Our families are more prosperous. Our communities are healthier.\n\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\n\nFeminists have fought long and hard for these rights — including for the right of women to choose to have large families, as Barrett has, even if they are not worth nearly $2.6 million, as Barrett is, but are instead struggling to keep their children safe and secure. Republicans and conservatives like Barrett have cheered on large (white) families, while refusing to do much of anything to help out when families struggle. Feminists have tried to clear the way for women to make their own reproductive choices — to have children or not, without state interference or professional discrimination. Barrett has benefited from that feminist work, which is why she is now in a position to undermine it. Being told that feminists and women generally should appreciate that and admire her is a hard pill to swallow.\n\nBarrett won’t be the first anti-abortion judge on the court (although if Republicans are looking for firsts, she would be the first staunchly anti-abortion woman). But her hostility to reproductive rights extends far beyond Roe and the right to abortion. In the hearings, Barrett couldn’t answer whether she believed Griswold v. Connecticut, the case that extended contraception access to married women, was rightly decided. We know that her mentor, Antonin Scalia, believed Griswold was indeed decided wrongly, and given the chance, would likely have overturned it. We know Barrett has said that, while she is her own woman, she believes Scalia got most of his decisions right. While Roe gets a lot of press, Griswold is at the heart of many of the court’s most significant decisions — it was the first case that fully laid out the right to sexual privacy, which has been understood since then to include the right of any woman to use contraception and have an abortion; the right of people of the same sex to have consensual intercourse; and the right of individuals to marry someone of the same sex. If Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\n\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it. And she’s right that it’s been a while since states have criminalized contraception. But they haven’t done that because abortion rights and Roe have taken the bulk of the focus of the anti-abortion movement. It’s worth noting, though, that most mainstream anti-abortion groups do not support contraception access; some are publicly opposed to it, and some falsely characterize common contraceptive methods as “abortifacients.” These same groups have pushed legislation that establishes personhood at the moment of conception, something at odds with the medical definition of pregnancy, but that could outlaw several of the most common and effective forms of birth control and even criminalize in-vitro fertilization. That’s all very far from an academic exercise. It is not “unthinkable.” It is, in fact, part of a well-thought-out plan. If Roe is overturned, there’s little to stop conservative groups from pressing forward and coming for contraception next — or marriage equality, or the right to have consensual intercourse with an adult of the same sex.\n\nThe message from Barrett’s confirmation hearing was clear: This is all on the line. She does not believe there is a constitutional right to sexual privacy. The question is whether the weight of the precedent — dozens of cases over five decades, millions of Americans who rely on what they believe to be their right to use contraception, end unwanted or dangerous pregnancies, have sex, and get married — will be enough to tip Barrett’s originalist scales toward upholding the law as it stands.\n\nBarrett showed us who she is: a woman who will not affirm even the least contested rights to sexual privacy and family planning. Which means even the least contested of those rights could be up for grabs with Barrett on the Supreme Court.",
    "keywords": [
      "barretts",
      "women",
      "confirmation",
      "effect",
      "cause",
      "barrett",
      "court",
      "griswold",
      "domino",
      "privacy",
      "rights",
      "amy",
      "coney",
      "hearings",
      "contraception",
      "right",
      "roe"
    ]
  },
  {
    "url": "https://elemental.medium.com/my-therapist-says-all-relationships-are-impossible-d4c61f7df249?source=extreme_main_feed---------2-74--------------------f04b3c4a_ec2f_48a8_9bdb_defe53628397-------",
    "title": "My Therapist Says All Relationships Are Impossible",
    "publish_date": "2020-10-14 05:32:29",
    "authors": [
      "Naveen Kumar"
    ],
    "summary": "My Therapist Says All Relationships Are ImpossibleIt’s okay to lose a friendshipThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement.\nMy therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!).\nMy therapist put it bluntly: “All relationships are impossible.”All relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\nLabels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\nThis type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences.",
    "text": "My Therapist Says All Relationships Are Impossible\n\nIt’s okay to lose a friendship\n\nThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement. In the decade we’ve known each other, I had always felt comfortable talking to him about my own experience of otherness as an Indian American. But when I pointed to his whiteness as a privilege he ought to examine, he grew defensive, blew up, and ghosted.\n\nI’m not someone who falls out with friends easily or often. The few times it has happened, my instinct is to ask, “How did I get myself into this?” or “Why didn’t I see this coming?”\n\nWhen any situation in my life goes awry, I tend to perseverate, fixating on how I might have caused it to fly off the rails. “Am I a bad judge of character?” I think. My therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!). But when it comes to the shock of a breakup, whether with a friend or a romantic partner, it’s the fantasy that we can ever fully know someone, or achieve a kind of perfect unity that’s to blame.\n\nMy therapist put it bluntly: “All relationships are impossible.”\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\nHis statement was one of those breakthrough moments when my jaw dropped and I felt an immediate sense of relief. The existentialism of it thrilled me, and its practical application made perfect sense. In every relationship, there will always come a conflict (likely many over time) that indicates an unbridgeable distance between two people. Labels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\n“A lot of the things that the world tells us about what a relationship is supposed to be present an ideal that everyone feels they’re failing to live up to,” says Jamieson Webster, PhD, a psychoanalyst in New York City and author of Conversion Disorder: Listening to the Body in Psychoanalysis. It’s not just that the messages we get from pop culture, about fairy tale romance and lifelong BFFs, are unrealistic. The very idea that any relationship, no matter how close, can make us less alone or separate from each other is perhaps the ultimate human fantasy.\n\n“Separation and difference are very hard, including the capacity to understand being alone,” Webster says. “There is so much fantasy that tries to cover over ‘aloneness,’ which is simply a factual reality.”\n\nWhen we’re able to more clearly understand our innate separateness, we can also more readily accept that personal differences are bound to arise in every relationship. The question then becomes how two people acknowledge the essential distance between them, communicate their feelings about it, and reach a mutual resolution that doesn’t attempt to paper over it. Sometimes it’s possible to bridge the gap and continue forward together; in other cases, it may be time to move on. “Whether with a friend or a partner, it’s about what you build on the basis of your differences,” Webster says. “Because you are two unique people with different histories and different pleasures and pains.”\n\nRecognizing the impossibility of a “perfect” relationship is also useful when we seek to build new ones. While swiping through dating profiles, for example, it’s easy to point to a picture you don’t particularly like or the fact that someone prefers cats over dogs as reasons why it would never work out. This type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences. How many potential connections have we cut off at the pass due to preconceived notions of compatibility?\n\nBreakups are hard, even and especially with close friends. But they’re also the surest way to recognize, and even honor, the truth of our individuality. “Breakups really propel people forward in terms of their development,” Webster says. “Whether it’s with friends or partners, a breakup is a time to recover yourself and find your separateness,” something you may have been struggling to find inside the relationship. That doesn’t mean we shouldn’t allow ourselves to feel hurt and disappointed, or take responsibility for our role in the process. But rather than frame a breakup as a personal failure, we can acknowledge it as a reflection of one of life’s most essential truths.",
    "keywords": [
      "differences",
      "partner",
      "therapist",
      "fantasy",
      "impossible",
      "friend",
      "relationship",
      "webster",
      "friends",
      "relationships",
      "perfect"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------f04b3c4a_ec2f_48a8_9bdb_defe53628397-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------4-73--------------------f04b3c4a_ec2f_48a8_9bdb_defe53628397-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------5-73--------------------f04b3c4a_ec2f_48a8_9bdb_defe53628397-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/better-marketing/why-is-linkedin-such-a-cringefest-b2b29ca60833?source=extreme_main_feed---------6-73--------------------f04b3c4a_ec2f_48a8_9bdb_defe53628397-------",
    "title": "Why Is LinkedIn Such a Cringefest?",
    "publish_date": "2020-09-01 18:54:04",
    "authors": [
      "Sean Kernan"
    ],
    "summary": "For example, Rule #1 of getting internet points (be hot), applies to LinkedIn, even if the post has no relation to the purpose of the platform.\nJust as an FYI, if you leave a comment on a LinkedIn post, it’s automatically going to show that post, with your comment highlighted, to a number of your connections.\nHe emailed me something to the effect of, “How’d you know that about that wolf post?” Then I explained it to him (I consume a lot of wildlife documentaries), and also explained my harsh tone.\nAuthor via LinkedinLove it or hate it, Linkedin is full of lurkers.\nLinkedIn has become a meme.",
    "text": "Why Do Such Trash Posts Go Viral?\n\nThere’s a couple of reasons.\n\nYes, short attention spans are a part of it. But, by far, the biggest contributor is that lots of users aren’t good at English. And I say that with no malice.\n\nMany non-native speakers see these posts and can’t see the nuance of why it’s terrible writing. But they recognize the simple verbs and nouns. They put the puzzle together and hail praise to the mighty turd.\n\nI can't blame them. I’d probably upvote a Spanish shitpost without knowing it.\n\nHere’s a tone-deaf example. This went super-viral:\n\nSource: author via linkedin\n\nNote on the above: they said they don’t want money but then later in the post say they want a salary increase.\n\nQuick side tip: don’t capitalize words unless there is a very specific reason. The tone can be interpreted as a bit hostile. Also, don’t ever write a post like that.\n\nMy theory is that any algorithm-based platform, including Medium, will eventually devolve into Facebook without some sort of intervention. Human beings don't know how to optimize for quality on their own.\n\nFor example, Rule #1 of getting internet points (be hot), applies to LinkedIn, even if the post has no relation to the purpose of the platform.\n\nCase in point:\n\nAuthor via Linkedin\n\nTheir English might be bad. But all men are fluent in thirst. Just as an FYI, if you leave a comment on a LinkedIn post, it’s automatically going to show that post, with your comment highlighted, to a number of your connections.\n\nIt won’t be great personal branding. I learned this first hand.\n\nI was messaged by my CEO after I left a frustrated comment on a post. You may recognize the post. It goes viral at least once a year.\n\nAuthor via ipinimig\n\nThere will always be thousands of comments about how amazing this meme is and how companies should be just like wolf packs.\n\nThe problem? That isn’t how wolf packs operate.\n\nThe alpha doesn’t just sit at the back and it’s ridiculous that this meme keeps getting recirculated. No, this fake-story isn’t a world-changing issue. It’s just annoying that people just make up science to fit a clicky narrative.\n\nI left a comment correcting it, perhaps a bit bluntly. My comment got buried in the cluttered sludge of fanboys. Unexpectedly, my CEO saw the comment.\n\nHe emailed me something to the effect of, “How’d you know that about that wolf post?” Then I explained it to him (I consume a lot of wildlife documentaries), and also explained my harsh tone.\n\nI’ll give you one last example. It is constantly going viral.\n\nSource: author via factcheck\n\nThis isn’t what happened. The baby on the right isn’t even the same baby. The girl on the right is the sister of the girl on the left.\n\nThe bigger point: we need to be careful about how we engage on these platforms. It’s super easy to look like a dumb-dumb because of all the blatantly false content that floats around.\n\nAdditionally, we need to be mindful of our ego. Resist the urge to flex post.\n\nAuthor via Linkedin\n\nLove it or hate it, Linkedin is full of lurkers. They are quick to judge. And many of those judgemental lurkers scan resumes for a living. Don’t be a cringe bot.\n\nLinkedIn has become a meme. But you don’t have to be part of it. Lest you join the annals of bad marketing.\n\nAnd men, enough with the thirst comments. It’s super weird. In the history of man, I don’t think they’ve ever led to anything good, particularly when your supervisor sees it.",
    "keywords": [
      "dont",
      "isnt",
      "cringefest",
      "thirst",
      "example",
      "linkedin",
      "comment",
      "post",
      "meme",
      "super",
      "wolf"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/top-4-dying-programming-languages-of-2020-1a4149753e92?source=extreme_main_feed---------8-73--------------------f04b3c4a_ec2f_48a8_9bdb_defe53628397-------",
    "title": "Top 4 Dying Programming Languages of 2020",
    "publish_date": "2020-09-29 12:15:03",
    "authors": [
      "Shubham Dixit"
    ],
    "summary": "Perl programming languagePerl programming language has seen a sharp decline.\nSource: Google trends (screenshot by author)Also, the red line in the picture above nearly touches the ground, they are from Google trends results.\nHaskell programming languageHaskell programming language is actually getting better.\nObjective-C programming languageThe Objective-C programming language is actually gaining popularity according to the PYPL index, and is in a 0.2% increase in trend.\nThe Google trends are of this type for Visual Basic programming language.",
    "text": "1. Perl programming language\n\nPerl programming language has seen a sharp decline. It was active in 2004 till 2009, and after that, it had seen a decline. Now, it is not dead, but also not active anymore.\n\nThere are fewer searches on YouTube, Google. Look, a video uploaded 4 years ago, and garnered only 240K views.\n\nAlso, the PYPL index tells the percentage of its decline in this year.\n\nPerl is experiencing a downward trend, so I shifted to another language for more insights.\n\nSource: Google trends (screenshot by author)\n\nAlso, the red line in the picture above nearly touches the ground, they are from Google trends results.\n\n2. Haskell programming language\n\nHaskell programming language is actually getting better. It is used by most companies namely Facebook, IBM.\n\nSource: YouTube\n\nAlso, youtube video shows that a video uploaded 5 years ago, and garnered 535K views.\n\nSource: Google Trends\n\nAlso, google trends results show a consistent trend (in blue line). It nearly touches the line below.\n\nIn comparison to it, the red line (Python) shows an upward trend and is in popularity as well.\n\n3. Objective-C programming language\n\nThe Objective-C programming language is actually gaining popularity according to the PYPL index, and is in a 0.2% increase in trend.\n\nSource: Google Trends\n\nThere are still plenty of people using Objective-C, of course, but they are programming.\n\nIf you are looking for work, or ever plan to in the future, then Swift is the only game in town.\n\nSource: YouTube\n\nAlso, the video uploaded 5 years ago has garnered 250K views till now.\n\nThere are jobs available for Objective-C, and people are actually paying well in the industry.\n\n4. Visual Basic for Applications programming language\n\nVisual Basic goes all the way from being at the top trends in 2004, and after 2009 it came straightway towards its decline. Though I had worked with visual basic, in school.\n\nThe Google trends are of this type for Visual Basic programming language.\n\nSource: Google trends (screenshot by author)\n\nAnd it’s hard to see this language going down in popularity.\n\nMoreover, the numbers from the PYPL index depicts a decline of 0.2%.\n\nI have not seen any video in my YouTube feed that relates to visual basic. So, it might have gone down there as well.\n\nI came across a video on YouTube, that’s uploaded 9 months ago, and garnered 810K views.",
    "keywords": [
      "2020",
      "basic",
      "uploaded",
      "visual",
      "languages",
      "decline",
      "youtube",
      "video",
      "language",
      "programming",
      "google",
      "trends",
      "dying"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------9-73--------------------f04b3c4a_ec2f_48a8_9bdb_defe53628397-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------7a8f0101_06b6_4a26_8e65_854196592966-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------7a8f0101_06b6_4a26_8e65_854196592966-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------7a8f0101_06b6_4a26_8e65_854196592966-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------7a8f0101_06b6_4a26_8e65_854196592966-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------7a8f0101_06b6_4a26_8e65_854196592966-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://williamfleitch.medium.com/there-will-be-no-laughing-on-election-night-3d1d498afc38?source=extreme_main_feed---------1-74--------------------1f7dca5e_2e4c_4716_a5dd_cbba52b6b129-------",
    "title": "There Will Be No Laughing on Election Night",
    "publish_date": "2020-10-13 20:34:19",
    "authors": [
      "Will Leitch"
    ],
    "summary": "But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off.\nBut one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000.\nAlready cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious.\nThere is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified.\nBut I damn sure know it won’t be funny.",
    "text": "NBC\n\nIn November 2000, I fell asleep to Al Gore being declared the next president, woke up to George W. Bush having won, and by lunchtime no one had any idea who had won or what was going on. What I remember the most is finding the whole thing very funny. And it was funny.\n\nI know now that being able to find such chaos amusing was a privilege, and an ugly one, of being an aimless but mostly comfortable white kid in his early 20s. One can argue about the specific differences of how the world would have turned out had Al Gore become president instead of George W. Bush, but there’s no question there were definite differences. But if you followed the race in 2000, this was not what everybody thought. I covered protests at the Democratic National Convention in Los Angeles that year — the same one Barack Obama couldn’t even get into — and the one thing every protestor believed, along with most young Gen Xers like myself, was that it didn’t matter whether the next president was Bush or Gore: They were two variations of the same flavor. That the race ended up so close sure didn’t feel like an accident. If you ask 300 million people whether they’d prefer two nickels or a dime, you shouldn’t be surprised when the results are 50–50. The madness that followed the close vote felt not like a moment of democratic peril. It felt like the logical conclusion to an incredibly stupid process. You just had to laugh.\n\nWhile watching 537 Votes, a new documentary about the 2000 Florida recount (and specifically the Miami-Dade county non-recount) that airs on HBO on October 21, I was reminded that it wasn’t just snarky former grunge kids who thought all this was ridiculous. The documentary itself is mediocre, more interested in cheap nostalgia and sight gags than the psychology of the era (director Billy Corben of Cocaine Cowboys has a persistent habit of dressing up his films with gimmicks rather than trusting his story to tell itself), but its ability to mine cultural artifacts of that time is remarkable. There’s a ton of clips from The Daily Show, and they each make a strong argument that the smugness that ultimately drove us all away from Jon Stewart was there from the get-go. There’s a reminder that Craig Kilborn used to host a late-night talk show. And there is a Wanda Sykes riff on Florida that is even rawer and more cutting 20 years later. But what’s most amazing is the news footage of election night, with all the anchors and analysts sitting in their studios, watching the increasingly confusing returns come in and … laughing their asses off. Seriously, they found all of this hilarious. The most famous voice that night was Dan Rather and all his goofy homespun sayings—“If a frog had side pockets, he’d carry a hand gun”—but everyone was yucking it up. Second place was Tim Russert, the evening’s breakout star, with his whiteboards and his red states and blue states, with a big giddy grin on his face throughout, even at 3:17 a.m., like this was the most fun he’s ever had in his life. Isn’t this a blast? You hear the crew cackling off stage. What a night!\n\nIt sure seems less funny now.\n\nThere are many, many ways that 2020 is worse than 2000. (Sheesh, in 2000, Joe Rogan was just that guy from “NewsRadio.”) As Clare Malone pointed out in a fantastic piece for FiveThirtyEight, we’re a lot more polarized and a lot less likely to just give up and accept it if our preferred candidate loses in a tightly contested election. But one thing is for sure: The election night telecasts will be a lot more serious than they were in 2000. Already cable and network news broadcasts are preparing for a close election, readying their audiences for an Election Week (or Month) rather than an Election Night, cautioning that with all the late arriving mail-in ballots, every word they say must be measured and cautious. There is a clear understanding that the entire nation is on edge and will be watching the whole night shaking and terrified. There is an awareness that if we are not careful about this democratic process, the whole thing could collapse.\n\nThere was none of that in 2000. It was all just a wacky story—this election is crazy close!—that was covered as if the stakes were a lot lower than they were. (Within three years, the NASDAQ collapsed, 9/11 happened and we were in multiple wars. The stakes turned out to be pretty freaking high.) What has changed, of course, is that we now know what a difference it can make when one candidate wins and one loses, that the entire nation is a fire just waiting for kindling, and that there are bad actors eager to pounce at the first sign of uncertainty. History will be made, and our anchors and analysts, by all accounts, understand how precise and meticulous they will need to be. And they understand, mostly, just how ungodly serious this is. And that’s where we’ve changed the most. In 2000, it felt like America would be around, and strong, forever, no matter who won, that the democratic process would do its job and we’d all be fine. Twenty years later, we’ve had 9/11 and endless wars and economic collapses and pandemics and Donald Trump. There are no illusions that America will just automatically land on its feet anymore. I don’t know how the networks, or the public, will react to what happens on November 3. But I damn sure know it won’t be funny.\n\nWill Leitch will be writing multiple pieces a week for Medium. He lives in Athens, Georgia, with his family, and is the author of five books, including the upcoming novel “How Lucky,” released by Harper next May. He also writes a free weekly newsletter that you might enjoy.",
    "keywords": [
      "sure",
      "2000",
      "lot",
      "night",
      "laughing",
      "democratic",
      "know",
      "thing",
      "election",
      "watching",
      "won"
    ]
  },
  {
    "url": "https://marquisele.medium.com/we-do-not-deserve-hospitals-abd8756d7bbf?source=extreme_main_feed---------2-74--------------------1f7dca5e_2e4c_4716_a5dd_cbba52b6b129-------",
    "title": "We Do Not Deserve Hospitals",
    "publish_date": "2020-10-15 03:05:18",
    "authors": [
      "Marquisele Mercedes"
    ],
    "summary": "We Do Not Deserve HospitalsMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\nAt one point, I was sent to another room nearby that was a little larger and had no extra chairs.\nMy mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy.\nHave you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum?\nHas a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?",
    "text": "We Do Not Deserve Hospitals\n\nMy radical imagination for the future does not include the violence that occurs within a hospital’s walls — or the hospital at all.\n\nSource: Unsplash\n\nOn a night in my early teens, I went to the Pediatric Emergency Department at Montefiore’s Children’s Hospital for intense cramps. I was expecting my period in a few days, but had never felt that way before — like a heat lamp was burning into the meat of my pelvis.\n\nMy mother and I spent the better part of 9 hours in a tiny room with speckled vinyl floors and too-bright fluorescents. At one point, I was sent to another room nearby that was a little larger and had no extra chairs. My mother was told to stand outside the room and wait because the doctor would be asking me about matters that required privacy. A nurse told me to undress from the waist down and wait for the doctor.\n\nMy doctor came in and asked me — in a few different ways — if I’d ever been “penetrated”. I had not and said so — repeatedly. She referenced the development of my body, implied the crudeness of the boys around me. It was an unsaid question, but one that still required an answer. “No,” I said, “I’ve never put anything in there.” She said “if you say so”, before telling me to lay down, scoot my butt towards the end of the examination table, and spread my legs so she could “take a look.”\n\nI didn’t know what that meant, but she was the doctor, so I did what she told me to do.\n\nHave you ever screamed “no!” and “stop!” at the top of your lungs while being penetrated by an unidentified object that scraped at your most intimate insides? Have you ever been told to “be still” and “hold on” like your pain was the most mundane thing that had ever happened? Have you ever heard a doctor say “wow, you really weren’t lying!” as your “please, stop” got swallowed by the sharp snapping of a speculum? Have you ever redressed yourself afterwards with shaky hands and legs and raucously laughed about it to your mom who was just a few feet away getting a cup of water when she heard the tail-end of your screams? Has a nurse ever asked “what did you think was gonna happen?” while you bled onto a nondescript menstrual pad from the hospital’s supplies?\n\nI was sent home with instructions to take Motrin and “stay out of trouble”. My mother and I rode the bus while she angrily pondered on whether I was still a virgin. I wrapped my arms around my middle and tried to protect something that felt like pierced cellophane. The tests for STIs came back clean.",
    "keywords": [
      "sent",
      "doctor",
      "mother",
      "required",
      "penetrated",
      "hospitals",
      "stop",
      "wait",
      "told",
      "deserve",
      "room",
      "say"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------1f7dca5e_2e4c_4716_a5dd_cbba52b6b129-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/javascript-in-plain-english/11-frontend-tricks-that-most-frontend-developers-dont-know-about-68dc48199ed6?source=extreme_main_feed---------4-73--------------------1f7dca5e_2e4c_4716_a5dd_cbba52b6b129-------",
    "title": "11 Frontend tricks that most Frontend Developers don’t know about",
    "publish_date": "2020-10-14 19:17:01",
    "authors": [
      "Daniel Anderson"
    ],
    "summary": "Datalist elementOne HTML element that you don’t see used much at all and for no reason!\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements.\nYou will see a drop-down list of pre-defined options as you type.\n<datalist>Example:<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\"><option value=\"Cat\"><option value=\"Dog\"><option value=\"Chicken\"><option value=\"Cow\"><option value=\"Pig\"></datalist>",
    "text": "1. Datalist element\n\nOne HTML element that you don’t see used much at all and for no reason!\n\nThe <datalist> tag is used to provide an \"autocomplete\" feature for <input> elements. You will see a drop-down list of pre-defined options as you type.\n\n<datalist>\n\nExample:\n\n<input list=\"animals\" name=\"animal\" id=\"animal\"> <datalist id=\"animals\">\n\n<option value=\"Cat\">\n\n<option value=\"Dog\">\n\n<option value=\"Chicken\">\n\n<option value=\"Cow\">\n\n<option value=\"Pig\">\n\n</datalist>",
    "keywords": [
      "dont",
      "tag",
      "11",
      "datalist",
      "valuecatoption",
      "valuepigdatalist",
      "reasonthe",
      "frontend",
      "know",
      "valuedogoption",
      "valuecowoption",
      "developers",
      "typedatalistexampleinput",
      "tricks",
      "valuechickenoption",
      "used"
    ]
  },
  {
    "url": "https://medium.com/better-marketing/10-websites-that-pay-you-for-your-writing-241e455ac262?source=extreme_main_feed---------6-73--------------------1f7dca5e_2e4c_4716_a5dd_cbba52b6b129-------",
    "title": "10 Websites That Pay You for Your Writing",
    "publish_date": "2020-10-13 20:26:49",
    "authors": [
      "Maryam Merchant"
    ],
    "summary": "10 Websites That Pay You for Your WritingWrite articles and get paid for your writingPhoto by Daria Shevtsova from PexelsAs a writer, we can’t always rely on one platform.\nAs every article I read about writing from top writers of Medium says, don’t put all eggs in one basket.\nIt means we need to look for other freelance writing platforms as well.\nSo if you want writing as a career or as a side hustle, then you need to mold yourself and, side by side, start looking at other freelance writing gigs that pay you.\nBut I still want to try something outside of this platform, so I found these ten websites that pay a writer for writing articles.",
    "text": "10 Websites That Pay You for Your Writing\n\nWrite articles and get paid for your writing\n\nPhoto by Daria Shevtsova from Pexels\n\nAs a writer, we can’t always rely on one platform. We all want to surf and get used to the competitive world. As every article I read about writing from top writers of Medium says, don’t put all eggs in one basket.\n\nIt means we need to look for other freelance writing platforms as well. So if you want writing as a career or as a side hustle, then you need to mold yourself and, side by side, start looking at other freelance writing gigs that pay you.\n\nAs a newbie, I found Medium two months back, and it’s one of the best platforms, which I am in love with. But I still want to try something outside of this platform, so I found these ten websites that pay a writer for writing articles. I just want to help you with that.",
    "keywords": [
      "articles",
      "platforms",
      "medium",
      "platform",
      "writing",
      "need",
      "freelance",
      "pay",
      "writer",
      "websites"
    ]
  },
  {
    "url": "https://medium.com/in-fitness-and-in-health/why-you-should-eat-oatmeal-at-least-once-a-week-9e6c1feadad9?source=extreme_main_feed---------9-73--------------------1f7dca5e_2e4c_4716_a5dd_cbba52b6b129-------",
    "title": "Why You Should Eat Oatmeal at Least Once a Week",
    "publish_date": "2020-10-12 14:55:31",
    "authors": [
      "Alyssa Atkinson"
    ],
    "summary": "Why You Should Eat Oatmeal at Least Once a WeekAnd how to make it taste incrediblePhoto by Ellieelien on UnsplashIf there’s one controversial statement about food, it’s this: breakfast is superior to all other meals.\nAfter all, the options are endless — pancakes, waffles, cereal, peanut butter toast, bagels, cinnamon rolls, and of course, oatmeal.\nIn fact, when I was in college, one of my campus dining halls served breakfast all day every single day.\nYet, I felt it was worth it to make the trek so I could eat my favorite breakfast foods whenever I wanted.\nAnd despite the wide variety of breakfast foods I consume every single week, there is one that I consume almost every morning, and it’s a staple that you should be eating as well.",
    "text": "Why You Should Eat Oatmeal at Least Once a Week\n\nAnd how to make it taste incredible\n\nPhoto by Ellieelien on Unsplash\n\nIf there’s one controversial statement about food, it’s this: breakfast is superior to all other meals.\n\nWe’ve heard time and time again that breakfast is the most important meal of the day, and that it’s absolutely crucial if you want to maintain a healthy weight. However, evidence such as the following cited in Time Magazine:\n\n“has found no strong connection between breakfast and weight loss.”\n\nEven so, I can confidently say that breakfast is indeed my favorite meal, and I’m not one to skip it. After all, the options are endless — pancakes, waffles, cereal, peanut butter toast, bagels, cinnamon rolls, and of course, oatmeal.\n\nIn fact, when I was in college, one of my campus dining halls served breakfast all day every single day. The walk to that building from my dorm room was 15 minutes further than the other dining hall which was practically right outside my door. Yet, I felt it was worth it to make the trek so I could eat my favorite breakfast foods whenever I wanted.\n\nAnd despite the wide variety of breakfast foods I consume every single week, there is one that I consume almost every morning, and it’s a staple that you should be eating as well.\n\nThe powerhouse I’m referring to is oatmeal. It’s the meal I’ve been eating for years that’s inexpensive, offers a number of mindblowing health benefits, and is incredibly delicious if you know how to make it right.\n\nHere’s why you should add it to your meal plan, and how to dress it up for optimal flavor.",
    "keywords": [
      "week",
      "day",
      "eating",
      "im",
      "meal",
      "favorite",
      "single",
      "foods",
      "oatmeal",
      "breakfast",
      "weight",
      "eat"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------41cf9030_62e9_4573_a8e0_ecf077e169c3-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------41cf9030_62e9_4573_a8e0_ecf077e169c3-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------41cf9030_62e9_4573_a8e0_ecf077e169c3-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------41cf9030_62e9_4573_a8e0_ecf077e169c3-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------41cf9030_62e9_4573_a8e0_ecf077e169c3-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/swlh/how-stealing-your-childrens-crayons-can-solve-your-ios-stackview-problems-c2aa5b707b02?source=extreme_main_feed---------0-74--------------------76361fd3_9390_4c11_8e6a_9ada442ea361-------",
    "title": "How Stealing Your Children’s Crayons Can Solve Your iOS StackView Problems",
    "publish_date": "2020-10-16 02:34:06",
    "authors": [
      "Austin Ramsdale"
    ],
    "summary": "Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other.\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here.\nLuckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\nWe can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view.\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons.",
    "text": "Designing responsive and performant iOS apps can be a frustrating chore for new developers. Conventional constraints can easily get confusing, or act erratically as you link and constrain elements against each other. Alternatively, designing user interfaces programmatically may be preferred, but can take years of mastery and an in-depth understanding of the underlying display engine; and we haven’t even considered the varying sizes and layouts!\n\nIf you’re having issues laying out your interface and getting it to play nicely with the various sizes and orientations, here are some quick tips using nested StackViews that may be able to help you organize and speed up your development process!\n\nFor this article, I am using a Swift recreation of the simple calculator, but you’ll notice that there are two key buttons that differ in size and orientation from the others — creating a complication with traditional stack views, and can be really problematic when using conventional constraints and expecting them to orient properly.\n\nSo how did I tackle this quickly and easily? As the title might suggest, grab any markers, pens, or crayons you may have at your disposal, and start by printing out a copy of the Storyboard. You can also design it on-screen, but for many (myself included), putting pen-to-paper helps to unlock that creative critical thinking that is sometimes needed to crack the visual code.\n\nTo start, I need to outline the largest “block” of interactive elements that I want to organize and manipulate. I’ve marked the corners in red, but instead of working from the outside in, I’m now going to look for the elements that need specific handling, focusing on fitting them into a balanced container, called a Stack View, and then working outwards.\n\nIf you’re unfamiliar with stack views and want to learn more, check out Apple’s official documentation here. Additional information can be found in Apple’s “App Development with Swift” in section 2.1.\n\nAs you can see, the two elements we need to work with are the “0” button, which spans 2x the conventional button width (below button “1” and “2”), and the “=“ button, which inconveniently spans 2x the conventional button height. Luckily, this example helps to illustrate perfectly how we can nest stack views for a near pixel-perfect responsive design.\n\nNow that I’ve identified the unique elements, we can see that the buttons fit into a larger chunk of blocks, outlined in green below. We can now isolate the “0” and set a 0-constraint on all sides in a horizontal stack view, and set the “1” and “2” button inside of a nested vertical stack view. Lastly, we need to distribute the “1” and “2” buttons evenly, so they share the space inside of the block.\n\nSimilarly, the “=“ , “3”, and “.” button share the lower right block. We create a vertical stack view and put the “=“ button on the right side, and we’ll nest an additional horizontal stack view on the left, putting the “3” in the top, and “.” In the bottom, with “Fill equally” as the distribution method here as well.\n\nFrom here, all of the other elements that we need to incorporate as we “zoom out” are conventional square buttons. This makes it a little easier, but it helps to create “balanced” or even blocks where possible.\n\nConveniently, the buttons fit in a 3x4 grid for both top and bottom, so I drew two larger encompassing blocks in blue around those segments, and labeled them “Upper Stackview” and “Lower Stackview”, respectively. You’ll notice that I’ve also started to fill-in other attributes in the margins, marking both the top and bottom blocks as “Fill equally” also (however, the bottom is wrong — it’s actually Fill proportionally, but more on that in a bit).\n\nNow, I simply need to group and space the remaining buttons, starting with drawing a box around the “4”, “5”, “6”, and “-“ buttons, placing them in a vertical stack view, and doing the same with the “Upper Stackview” (highlighted in orange).",
    "keywords": [
      "blocks",
      "stealing",
      "buttons",
      "view",
      "problems",
      "childrens",
      "crayons",
      "button",
      "elements",
      "views",
      "stackview",
      "need",
      "vertical",
      "solve",
      "ios",
      "conventional",
      "stack"
    ]
  },
  {
    "url": "https://medium.com/square-root/adapting-maslows-hierarchy-for-a-remote-world-4d78c544fcf3?source=extreme_main_feed---------1-74--------------------76361fd3_9390_4c11_8e6a_9ada442ea361-------",
    "title": "Adapting Maslow’s Hierarchy for a Remote World",
    "publish_date": "2020-10-14 15:51:16",
    "authors": [
      "Jaime Brown"
    ],
    "summary": "On the flip side, when remote work overstayed its welcome, spilled over into May, and then into the dog days of summer, we found our patience being tested.\nDuring a weekly all-hands meeting in late March, we talked about our remote culture and the importance of oversharing.\nWe saw an obvious trend in our remote culture survey results — folks really seem to miss whiteboarding as a collaborative tool.\nThis was a timely revamp as many of the meeting culture values we held in office translated very well to remote culture.\nRegardless of what our future remote culture looks like, the flexibility we’ve always had at Square Root will continue to exist.",
    "text": "BUILDING THE FOUNDATION OF OUR HIERARCHY\n\nTo start, we quickly realized we can’t begin to build our hierarchy without a solid foundation — one of empathy, patience, and grace. These words keep coming up in our internal discussions because this was already built into Square Root culture. Now we’re just seeing it in a new context. Giving each other, and ourselves, room to navigate the complexities of our newfound work from home life is so key to our success and happiness as a team. Suddenly many of us were grappling with becoming homeschool teachers and entertaining our pets, all while we sat at our dining room tables (or beds!) trying to work our usual nine-to-five. Should I even mention the added stress and worry from a global pandemic?\n\nHaving the support of co-workers eases the burden as we all share similar adjustments, but it can still be hard to give ourselves the same pass that we may extend to our team members. On the flip side, when remote work overstayed its welcome, spilled over into May, and then into the dog days of summer, we found our patience being tested.\n\nLevel 1 — COMMUNICATION + CONNECTION\n\nKeeping channels of communication open with one another is necessary to avoid the breakdown of our foundation. For us, informal communication between Radicals is essential. Like many tech startups, we use Slack for internal messaging and announcements. It’s easy to lack formal rules around Slack use when you can just as easily go down the hall or take a quick walk to another house on campus to chat with someone. When that option wasn’t available it became obvious we needed to make adjustments to our messaging habits.\n\nDuring a weekly all-hands meeting in late March, we talked about our remote culture and the importance of oversharing. We agreed we wanted our Slack habits to be more inclusive, but what does this look like?\n\nHaving conversations in public channels, so that entire teams can see the topics being discussed. This allows folks who may have nothing to contribute to the active conversation to still see the outcome. A decision is made and any Radical who reads the thread now has this information at their disposal. “Withholding info” is in our anti-bucket list; habitually making conversations public keeps it at bay over the long term!\n\nso that entire teams can see the topics being discussed. This allows folks who may have nothing to contribute to the active conversation to still see the outcome. A decision is made and any Radical who reads the thread now has this information at their disposal. “Withholding info” is in our anti-bucket list; habitually making conversations public keeps it at bay over the long term! Encouraging individuals to share their schedules openly — schedules that may very well be messy and unpredictable at times — and also a little vulnerability can go a long way to keeping the foundation strong. The Culture + People team started sharing in a public-facing channel what our schedules would look like, when we needed a break for a snack or a walk, or even when a child really just needed a hug and some attention from Mom or Dad. This encourages others that it’s ok to express needs for breaks and that it’s normal to have interruptions.\n\nConnection may be the hardest item in our hierarchy to achieve. We have 44 employees who have 44 individual needs. Finding ways to make everyone feel connected can be challenging, but we’ve hosted virtual happy hours, mid-day coffee chats, sent care packages, and posted questions of the day to encourage Radicals to share fun facts about themselves. One of our most successful experiments has been Radical Connections.\n\nKelsey, our HR + Recruiting Coordinator, created a dedicated Slack channel, #radicalconnections, for folks to be paired with another random Radical for a fun, get-to-know-you chat, no work talk necessary. Starting in August, the Culture + People team helped coordinate and schedule weekly group chats of 4–5 people as well as 1-on-1 chats for everyone at Square Root. This made it easy for the team to share moments of connection, joy, and whimsy — something most of us have been lacking for months. Not only that, but new and deep bonds were formed by folks who don’t often work together or connect. Next, we’ll follow-up by getting more Radical feedback on how the chats went so we can find ways to make this a better experience for all.\n\nLevel 2 — CLEAR PRIORITIES + EXPECTATIONS\n\nWe have always valued clear expectations and priorities, and have achieved these through a mix of all-hands and 1-on-1 meetings, but now we’ve added a 15-minute Monday kick-off. These kick-offs are concise and set clear expectations for each week so every Radical knows how to contribute to our company goals.\n\nWe also open all meetings with time devoted to sharing Happy News. From small stuff, like a hike over the weekend, to the big things, like adding a puppy to the family or an engagement, we make room for joy! We even end the meetings with a crowd favorite — jazz hands! Our Monday kick-off allows us to align and connect. Win-win.\n\nLevel 3 — COLLABORATION + DOCUMENTATION\n\nOnce priorities and expectations are set we need to have ways of working together to achieve our goals. We saw an obvious trend in our remote culture survey results — folks really seem to miss whiteboarding as a collaborative tool. We’ve used the Jamboard app, and we even bought a Kaptivo whiteboard camera for the conference room (still available for individual reservations if someone needs a Work from Work day.)\n\nWe’re still experimenting with virtual whiteboarding, but even without tools, collaboration can work well in a remote setting if we follow good documentation procedures. This brings us to our meeting philosophy: Meeting Magic! This was the result of a previous Hackathon project by a former member of the Culture + People team. Just before the pandemic started to become a serious threat in the U.S., Meeting Magic was going through an update to version 2.0. This was a timely revamp as many of the meeting culture values we held in office translated very well to remote culture. Since we already had a great meeting mindset, the main takeaway for us was to make sure we were being consistent, inclusive, and productive across all meetings, from Herd retrospectives to our weekly kick-off. To do that, we suggested new additions to Meeting Magic:\n\nGet in the habit of using shared docs for each standing meeting. There, ideas and actions are documented for anyone who missed the meeting, and there’s a record for anyone who needs to reference back, or a new Radical who joins the team and needs to catch up on tribal knowledge.\n\nfor each standing meeting. There, ideas and actions are documented for anyone who missed the meeting, and there’s a record for anyone who needs to reference back, or a new Radical who joins the team and needs to catch up on tribal knowledge. Embrace notation rotation, the idea that regular attendees of standing meetings take turns being the note taker. This nurtures empathy and compassion. Each Radical knows what it’s like to take notes during a meeting, and note-takers get a break so they can focus on the discussion and not just note-taking.\n\nSharpening our documentation process in meetings is an easy, but high-impact adjustment with long-term benefits.\n\nCollaboration was easier when we didn’t need to schedule a Zoom call first (photo by Hannah Minkmade)\n\nLevel 4 — FLEXIBILITY + ASYNCHRONOUS WORK\n\nThis level of our hierarchy is still a work in progress, and we’re coming up with experiments to make asynchronous work a possibility for our team, in a way that works for everyone. Our hypothesis is that as we perfect the other levels of the hierarchy, this level will naturally become easier to make a reality.\n\nThe legwork of achieving asynchronicity will be each Radical having realistic expectations about what async-work looks like in practice, and having respect for one another. Some questions we need to sit with:\n\nWhat will happen if our teams are on varied schedules?\n\nHow does your preferred schedule impact your team?\n\nHow can more typical 9–5 hours (in our home base Central time zone) be accommodating to those outside of this schedule?\n\nWill all managers be ok with having their team on different schedules?\n\nAre you comfortable with and accepting of async communication?\n\nWe have a great deal to think about if this is a path we choose to take. Regardless of what our future remote culture looks like, the flexibility we’ve always had at Square Root will continue to exist. Our goal is to enhance this flexibility with tweaks and experiments now. We want to make sure our flexible policy is strengthened after work from home and continues to be supportive of family needs, health needs, and mental health needs.\n\nLevel 5 — ACCOMPLISHMENT + HIGH PRODUCTIVITY\n\nThis is where we’ll be when we reach our Nirvana of remote culture, and where we want to see some of the other hierarchy items level-up, like connectedness.\n\nHaving all or most of the team working at highly productive levels, feeling good about it, and having a sense of accomplishment is peak remote culture for Square Root.\n\nOne way we will start nurturing this idea now is to hold our bi-annual Hackathon virtually! What better way to get a sense of accomplishment and collaboration than to host our most innovative event of the year in a remote setting? Hackathons get our creative juices flowing and energizes us well into the holiday season, just in time to reflect on our year and start thinking about all of the possibilities that lie ahead in the new year. Even during this funereal year, we believe we can help our team feel productive and hopeful, one level at a time.",
    "keywords": [
      "world",
      "needs",
      "culture",
      "meetings",
      "radical",
      "folks",
      "maslows",
      "remote",
      "meeting",
      "team",
      "work",
      "adapting",
      "hierarchy"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------76361fd3_9390_4c11_8e6a_9ada442ea361-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/@OfcrACab/confessions-of-a-former-bastard-cop-bb14d17bc759?source=extreme_main_feed---------4-73--------------------76361fd3_9390_4c11_8e6a_9ada442ea361-------",
    "title": "Confessions of a Former Bastard Cop",
    "publish_date": "2020-06-11 00:21:39",
    "authors": [
      "Officer A. Cab"
    ],
    "summary": "So, before I give some suggestions, let me tell you what probably won’t solve the problem of bastard cops:Increased “bias” training.\nPolice officers do not protect and serve people, they protect and serve the status quo, “polite society”, and private property.\nVery frequently, the officers sent to “protect the community” escalate this crisis and ultimately wound or kill the person.\nInstead of letting Fox News fill your head with nightmares about Hispanic gangs, ask the Hispanic community what they need to thrive.\nIf you truly desire safety, ask not what your most vulnerable can do for the community, ask what the community can do for the most vulnerable.",
    "text": "HOW DO YOU SOLVE A PROBLEM LIKE A BASTARD?\n\nSo what do we do about it? Even though I’m an expert on bastardism, I am not a public policy expert nor an expert in organizing a post-police society. So, before I give some suggestions, let me tell you what probably won’t solve the problem of bastard cops:\n\nIncreased “bias” training. A quarterly or even monthly training session is not capable of covering over years of trauma-based camaraderie in police forces. I can tell you from experience, we don’t take it seriously, the proctors let us cheat on whatever “tests” there are, and we all made fun of it later over coffee.\n\nTougher laws. I hope you understand by now, cops do not follow the law and will not hold each other accountable to the law. Tougher laws are all the more reason to circle the wagons and protect your brothers and sisters.\n\nTougher laws are all the more reason to circle the wagons and protect your brothers and sisters. More community policing programs. Yes, there is a marginal effect when a few cops get to know members of the community, but look at the protests of 2020: many of the cops pepper-spraying journalists were probably the nice school cop a month ago.\n\nPolice officers do not protect and serve people, they protect and serve the status quo, “polite society”, and private property. Using the incremental mechanisms of the status quo will never reform the police because the status quo relies on police violence to exist. Capitalism requires a permanent underclass to exploit for cheap labor and it requires the cops to bring that underclass to heel.\n\nInstead of wasting time with minor tweaks, I recommend exploring the following ideas:\n\nNo more qualified immunity. Police officers should be personally liable for all decisions they make in the line of duty.\n\nNo more civil asset forfeiture. Did you know that every year, citizens like you lose more cash and property to unaccountable civil asset forfeiture than to all burglaries combined? The police can steal your stuff without charging you with a crime and it makes some police departments very rich.\n\nBreak the power of police unions. Police unions make it nearly impossible to fire bad cops and incentivize protecting them to protect the power of the union. A police union is not a labor union; police officers are powerful state agents, not exploited workers.\n\nRequire malpractice insurance. Doctors must pay for insurance in case they botch a surgery, police officers should do the same for botching a police raid or other use of force. If human decency won’t motivate police to respect human life, perhaps hitting their wallet might.\n\nDefund, demilitarize, and disarm cops. Thousands of police departments own assault rifles, armored personnel carriers, and stuff you’d see in a warzone. Police officers have grants and huge budgets to spend on guns, ammo, body armor, and combat training. 99% of calls for service require no armed response, yet when all you have is a gun, every problem feels like target practice. Cities are not safer when unaccountable bullies have a monopoly on state violence and the equipment to execute that monopoly.\n\nOne final idea: consider abolishing the police.\n\nI know what you’re thinking, “What? We need the police! They protect us!” As someone who did it for nearly a decade, I need you to understand that by and large, police protection is marginal, incidental. It’s an illusion created by decades of copaganda designed to fool you into thinking these brave men and women are holding back the barbarians at the gates.\n\nI alluded to this above: the vast majority of calls for service I handled were theft reports, burglary reports, domestic arguments that hadn’t escalated into violence, loud parties, (houseless) people loitering, traffic collisions, very minor drug possession, and arguments between neighbors. Mostly the mundane ups and downs of life in the community, with little inherent danger. And, like I mentioned, the vast majority of crimes I responded to (even violent ones) had already happened; my unaccountable license to kill was irrelevant.\n\nWhat I mainly provided was an “objective” third party with the authority to document property damage, ask people to chill out or disperse, or counsel people not to beat each other up. A trained counselor or conflict resolution specialist would be ten times more effective than someone with a gun strapped to his hip wondering if anyone would try to kill him when he showed up. There are many models for community safety that can be explored if we get away from the idea that the only way to be safe is to have a man with a M4 rifle prowling your neighborhood ready at a moment’s notice to write down your name and birthday after you’ve been robbed and beaten.\n\nYou might be asking, “What about the armed robbers, the gangsters, the drug dealers, the serial killers?” And yes, in the city I worked, I regularly broke up gang parties, found gang members carrying guns, and handled homicides. I’ve seen some tragic things, from a reformed gangster shot in the head with his brains oozing out to a fifteen year old boy taking his last breath in his screaming mother’s arms thanks to a gang member’s bullet. I know the wages of violence.\n\nThis is where we have to have the courage to ask: why do people rob? Why do they join gangs? Why do they get addicted to drugs or sell them? It’s not because they are inherently evil. I submit to you that these are the results of living in a capitalist system that grinds people down and denies them housing, medical care, human dignity, and a say in their government. These are the results of white supremacy pushing people to the margins, excluding them, disrespecting them, and treating their bodies as disposable.\n\nEqually important to remember: disabled and mentally ill people are frequently killed by police officers not trained to recognize and react to disabilities or mental health crises. Some of the people we picture as “violent offenders” are often people struggling with untreated mental illness, often due to economic hardships. Very frequently, the officers sent to “protect the community” escalate this crisis and ultimately wound or kill the person. Your community was not made safer by police violence; a sick member of your community was killed because it was cheaper than treating them. Are you extremely confident you’ll never get sick one day too?\n\nWrestle with this for a minute: if all of someone’s material needs were met and all the members of their community were fed, clothed, housed, and dignified, why would they need to join a gang? Why would they need to risk their lives selling drugs or breaking into buildings? If mental healthcare was free and was not stigmatized, how many lives would that save?\n\nWould there still be a few bad actors in the world? Sure, probably. What’s my solution for them, you’re no doubt asking. I’ll tell you what: generational poverty, food insecurity, houselessness, and for-profit medical care are all problems that can be solved in our lifetimes by rejecting the dehumanizing meat grinder of capitalism and white supremacy. Once that’s done, we can work on the edge cases together, with clearer hearts not clouded by a corrupt system.\n\nPolice abolition is closely related to the idea of prison abolition and the entire concept of banishing the carceral state, meaning, creating a society focused on reconciliation and restorative justice instead of punishment, pain, and suffering — a system that sees people in crisis as humans, not monsters. People who want to abolish the police typically also want to abolish prisons, and the same questions get asked: “What about the bad guys? Where do we put them?” I bring this up because abolitionists don’t want to simply replace cops with armed social workers or prisons with casual detention centers full of puffy leather couches and Playstations. We imagine a world not divided into good guys and bad guys, but rather a world where people’s needs are met and those in crisis receive care, not dehumanization.\n\nHere’s legendary activist and thinker Angela Y. Davis putting it better than I ever could:\n\n“An abolitionist approach that seeks to answer questions such as these would require us to imagine a constellation of alternative strategies and institutions, with the ultimate aim of removing the prison from the social and ideological landscapes of our society. In other words, we would not be looking for prisonlike substitutes for the prison, such as house arrest safeguarded by electronic surveillance bracelets. Rather, positing decarceration as our overarching strategy, we would try to envision a continuum of alternatives to imprisonment-demilitarization of schools, revitalization of education at all levels, a health system that provides free physical and mental care to all, and a justice system based on reparation and reconciliation rather than retribution and vengeance.” (Are Prisons Obsolete, pg. 107)\n\nI’m not telling you I have the blueprint for a beautiful new world. What I’m telling you is that the system we have right now is broken beyond repair and that it’s time to consider new ways of doing community together. Those new ways need to be negotiated by members of those communities, particularly Black, indigenous, disabled, houseless, and citizens of color historically shoved into the margins of society. Instead of letting Fox News fill your head with nightmares about Hispanic gangs, ask the Hispanic community what they need to thrive. Instead of letting racist politicians scaremonger about pro-Black demonstrators, ask the Black community what they need to meet the needs of the most vulnerable. If you truly desire safety, ask not what your most vulnerable can do for the community, ask what the community can do for the most vulnerable.",
    "keywords": [
      "world",
      "officers",
      "members",
      "community",
      "protect",
      "confessions",
      "need",
      "cops",
      "society",
      "bastard",
      "system",
      "cop",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/lessons-from-history/536-ad-the-worst-year-in-history-472a32797e46?source=extreme_main_feed---------5-73--------------------76361fd3_9390_4c11_8e6a_9ada442ea361-------",
    "title": "536 AD — the worst year in history",
    "publish_date": "2020-07-14 22:13:02",
    "authors": [
      "Saamir Ansari"
    ],
    "summary": "However, when speaking of the worst year recorded in human history there are many to choose from:The year 1349 saw the Black Death kill half the population of Europe.\nThe title of the worst year in history is easily held by the year 536 AD.\nUnfortunately, 536 AD seemed to only be a prelude to further misery.\nLabeling each new year as ‘the worst year in history’ has become something of a fad these days.\nWe should look back to the year 536 A.D. and cherish how fortunate we are not to have lived in a time when the world was truly in darkness.",
    "text": "2020 has already been immortalised. It is a year that nobody will forget. However, when speaking of the worst year recorded in human history there are many to choose from:\n\nThe year 1349 saw the Black Death kill half the population of Europe.\n\nIn 1520 smallpox ravaged the Americas and killed between 60 and 90 per cent of the continents’ original inhabitants.\n\nIn 1918 the Spanish Flu led to the deaths of over 50 million people.\n\nThe rise of Hitler in 1933 is often claimed to be the turning point in modern history.\n\nHowever, historians are unanimous in their choice. The title of the worst year in history is easily held by the year 536 AD.\n\nMedieval historian, Michael McCormick has stated that “it was the beginning of one of the worst periods to be alive, if not the worst year.” (Science Magazine, Ann Gibbons, 2018).\n\nThe year began with an inexplicable, dense fog that stretched across the world which plunged Europe, the Middle East and parts of Asia into darkness 24 hours a day, for nearly 2 years.\n\nConsequently, global temperatures plummeted which resulted in the coldest decade in over 2,000 years. Famine was rampant and crops failed all across Europe, Africa and Asia. Unfortunately, 536 AD seemed to only be a prelude to further misery. This period of extreme cold and starvation caused economic disaster in Europe and in 541 A.D. an outbreak of bubonic plague further led to the death of nearly 100 million people and almost half of the Byzantine Empire.\n\nThis part of the sixth century has a widely been referred to as the Dark Ages, but the true source of this darkness had previously been unknown to scholars. Recently, researchers led by McCormick and glaciologist Paul Mayewski, have discovered that a volcanic eruption in Iceland in early 536 led to incredibly large quantities of ash being spread across much of the globe, creating the fog that cast the world into darkness. This eruption was so immense that it altered the global climate and adversely affected weather patterns and crop cultivation for years to come (Antiquity).\n\nLabeling each new year as ‘the worst year in history’ has become something of a fad these days. We should look back to the year 536 A.D. and cherish how fortunate we are not to have lived in a time when the world was truly in darkness.",
    "keywords": [
      "darkness",
      "world",
      "europe",
      "worst",
      "ad",
      "led",
      "nearly",
      "536",
      "million",
      "history"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------6-73--------------------76361fd3_9390_4c11_8e6a_9ada442ea361-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------7-73--------------------76361fd3_9390_4c11_8e6a_9ada442ea361-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------8-73--------------------76361fd3_9390_4c11_8e6a_9ada442ea361-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------17838236_21fd_4cce_bafd_89dbd1b8654e-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------17838236_21fd_4cce_bafd_89dbd1b8654e-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------17838236_21fd_4cce_bafd_89dbd1b8654e-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------17838236_21fd_4cce_bafd_89dbd1b8654e-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------17838236_21fd_4cce_bafd_89dbd1b8654e-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://medium.com/artfullyautistic/im-an-autistic-adult-and-i-hate-halloween-5cc29190407e?source=extreme_main_feed---------0-74--------------------9d6ee962_482c_4c7c_bbd5_20194801a120-------",
    "title": "I’m An Autistic Adult, And I Hate Halloween",
    "publish_date": "2020-10-16 19:08:55",
    "authors": [],
    "summary": "I’m An Autistic Adult, And I Hate HalloweenSimple hacks for inclusive and autism-friendly work, community and family Halloween partiesPhoto by Jakob Owens on UnsplashCostumes.\nPranks...For most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays.\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year.\nI thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\nBy making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "text": "I’m An Autistic Adult, And I Hate Halloween\n\nSimple hacks for inclusive and autism-friendly work, community and family Halloween parties\n\nPhoto by Jakob Owens on Unsplash\n\nCostumes. Parties. Treats. Pranks...\n\nFor most kids and adults, Halloween is a fun holdover holiday between Labor Day and the December holidays. But for autistics, people with ADHD and other neurodivergent folks, the spooky season can increase anxiety and peer pressure, which can overtax our coping skills and interfere with mood and executive function.\n\nAuthor Chaanda Bishop Weber wrote a lovely and illuminating Medium piece about her ten-year-old autistic son Jackson’s choice to opt out of donning a costume and trick-or-treating this year. I thank Bishop Weber for her honoring her child’s needs and self-advocacy even while acknowledging her own disappointment.\n\nAs they likely did as children, autistic and ADHD adults experience challenges with sensory processing as well as social and nonverbal communication -- social exclusion and financial instability are all too frequent outcomes. By making a few small modifications to your workplace, community or family Halloween celebration, you can be part of the change that helps kids like Jackson feel safe and supported so everyone can have fun.",
    "keywords": [
      "adult",
      "kids",
      "im",
      "weber",
      "fun",
      "social",
      "family",
      "community",
      "adults",
      "bishop",
      "hate",
      "halloween",
      "autistic"
    ]
  },
  {
    "url": "https://humanparts.medium.com/how-well-get-over-going-to-the-upper-room-with-donald-j-trump-4d63f2e9741a?source=extreme_main_feed---------1-74--------------------9d6ee962_482c_4c7c_bbd5_20194801a120-------",
    "title": "How We’ll Get Over: Going to the Upper Room With Donald J. Trump",
    "publish_date": "2020-10-15 21:12:55",
    "authors": [
      "Max S. Gordon"
    ],
    "summary": "What we are facing is bigger than Donald Trump.\nOr maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose.\nPolitically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved.\nIf, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.",
    "text": "We’ve been here before. Our ancestors knew, when you can’t control the evil of the world, you must become the weather. A howling wind through the trees, a blistering sun, an irresistible force. Our democracy is on a respirator now, and we must defend it.\n\nJustice and nonviolent resistance became an electrifying force in 1955 when working-class Blacks who relied on the buses in Montgomery, Alabama, shut down the discriminatory system for an entire year, permanently changing the laws in that city. We need the spirit of transcendence that led these heroic women and men, many of them maids and laborers, to walk to work each day and say, “I can’t feel the hurt in my feet when there is a balm for my soul. And I will walk five more miles to work if it means a better life for my children.”\n\nWe need the Holy Ghost power that stopped Eugene “Bull” O’Connor, the commissioner of public safety in Birmingham, Alabama, when he ordered a battalion of firefighters to turn hoses on a crowd of protesters, including children, on May 5, 1963, often called “Miracle Sunday.” The firefighters not only resisted the order—it was reported that some of them cried.\n\nThe power of the crowd, who had walked from a local church, was both vulnerable and authoritative — a compelling, mystical combination. Whatever racist trance had possessed those firefighters when they’d hosed the same crowds only days before, it was broken, perhaps when they looked at the children and thought, “The little girl I am aiming this hose at could be mine.” Rev. Martin Luther King, Jr. later wrote, “I felt there, for the first time, the pride and the power of nonviolence.”\n\nThe alchemy of grace and conviction works. It has worked. I know because I am alive. I write these words with the knowledge that once upon a time someone who belonged to my family would have been whipped or worse for even trying to learn the alphabet. Yet I read, I write. Something they did to survive must have worked — because I’m here.\n\nNo matter how much they try to distort the truth on Fox News or make us feel like fools for believing, the sacrifices of earlier generations matter. How many women had to die on kitchen floors and back alleys for just one woman to walk into a care facility, protected by Roe v. Wade, and make an appointment for her health — legally and safely? We will not go back. Their sacrifices matter. And we owe them our determination to see that Roe v. Wade is not overturned. A persuasive river of courage flows through history, from Harriet Tubman to the suffragettes to the rioters at Stonewall. We’ll never know all the names, but we know that river exists — because we’re here.\n\nHistory has always had rogues, scoundrels, reprobates, damn fools, men who have acted as children. Bullies. Dictators. As a human family, we’ve seen astounding acts of evil. But the thing about evil is not to make it personal or to take it personally. We have to look beyond the actors. The only way to combat evil is not to respond with evil, but to invest in a more compelling vision. Because of someone’s vision, I am married to the man I love.\n\n7\n\nWelcome to Niggerland. A place on the outskirts of town where there has been crime and poverty and drugs and lack of health care and denied educational opportunities. My white friends, you were once untouched by the pain of the people who live there. But please know, those divisions no longer exist the way they once did. Perhaps Donald Trump’s greatest achievement is that he’s turned every American into a nigger, black or white (including a few people who are convinced they hate niggers). One way or another, we’re all in the soup now.\n\nNigger. It’s an unpleasant word, and forgive me for using it, but it’s the right word. It’s not a Black person’s shame, but a white society’s shame for its ugliness. It’s a word meant to terrorize a group of people within a system of oppression and make them feel powerless so they won’t act and try to change it. In other words, in Donald Trump’s eyes, we’re all niggers now. There isn’t a single person or institution he doesn’t have contempt for.\n\nWhat we are facing is bigger than Donald Trump. Perhaps he is the fulfillment of America’s karma in the world, our political shadow finally come to life. Or maybe he is the manifestation of our sins, the elections around the world we’ve interfered with, the leaders we’ve helped depose. He is the personification of the Ugly American trope, vulgarity incarnate, an ambling Frankenstein monster ripping the village apart with his bare hands. Politically moderate racists, who see themselves as vastly different from white supremacists, are horrified when they look in the mirror and see Donald Trump staring back at them.\n\nDonald Trump is the walking embodiment of American pathology, the white male version of Toni Morrison’s ghost-child in Beloved. His message isn’t really new—it’s his malevolence that’s profound. Maybe one day we will perceive his legacy as an opportunity that afforded fundamental change. If, as a country, we’d had an honest conversation about slavery and seriously considered reparations years ago, Donald Trump would probably never have happened.\n\nWe may not change his heart, but we need to alter ourselves so we are different when and if the next monster arrives. In the aftermath of what happens, assessments will be made, and we will have to acknowledge that while solidarity eventually came from unexpected sources — Republicans willing to abandon their tribe — this went on for far too long, and too many lives were lost.\n\n8\n\nThere is a Black teenage girl who studies her lipstick one more time in the mirror before cutting off the bathroom light. She is going to a demonstration. There may be violence. But she believes in that preacher, Dr. King, and the sermon he preached on racial equality last Sunday. She knows it is dangerous; they’ve unleashed dogs on protestors; they turned hoses on families, pinning them against buildings and cars. People have been jailed, students have been clubbed, just for having the audacity to want to go to school with whites, to vote without retaliation.\n\nIt is 1957, and only a girl herself, she has no way of knowing that one day her daughter will look back at her through history. Her daughter will move into her dorm at a public university, buy her books, and although every battle won’t have been won, she will walk into the classroom her mother envisioned for her, without having to be escorted by the National Guard. She will claim the seat her mother earned.\n\nWe have a legacy to uphold; we have ancestors to honor. We’ve been here before. The names are always different. But whenever justice is threatened anywhere, there are always brave ones.\n\n9\n\nRevolution begins with a flower. Hold it your hand. And know that the man who owns real estate and golf courses all over world, in all his presumed omnipotence, doesn’t have the power to make a single flower.\n\nAnd if he chooses to destroy that flower, there’s another flower next to it in the field. There will always be flowers. Legions of them, as there are legions of us.\n\nAnd when your hope is restored and you remember who you are and what is possible to achieve with fortitude and grace, step out the door with that flower in your hair.\n\nAnd act.",
    "keywords": [
      "trump",
      "world",
      "way",
      "weve",
      "upper",
      "evil",
      "j",
      "going",
      "know",
      "power",
      "walk",
      "white",
      "room",
      "donald"
    ]
  },
  {
    "url": "https://coronavirus.medium.com/the-company-set-to-roll-out-americas-future-vaccine-cb56ea9691fa?source=extreme_main_feed---------2-74--------------------9d6ee962_482c_4c7c_bbd5_20194801a120-------",
    "title": "The Company Set to Roll Out America’s Future Vaccine",
    "publish_date": "2020-10-15 20:44:45",
    "authors": [
      "Yasmin Tayag"
    ],
    "summary": "The Company Set to Roll Out America’s Future VaccineThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccinesMario Tama / Getty ImagesWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages.\nIt’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history.\nIn August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\nAt the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention.\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made.",
    "text": "The Company Set to Roll Out America’s Future Vaccine\n\nThe scoop on McKesson Corporation, the company contracted by the White House to make sure Americans get Covid-19 vaccines\n\nMario Tama / Getty Images\n\nWhen the U.S. approves a Covid-19 vaccine, millions of doses will need to be transported and distributed across the country in stages. It’ll be a huge effort — likely the biggest vaccine distribution effort in U.S. history. To do the job, the White House has contracted a company called McKesson Corporation. In August, the Department of Health and Human Services (HHS) stated McKesson Corporation’s role in documents outlining the White House’s vaccine distribution strategy.\n\nThis isn’t McKesson Corporation’s first vaccine-distribution rodeo. The company, founded 187 years ago and the seventh-largest U.S. company in terms of revenue in 2019, was also responsible for managing the distribution of the H1N1 vaccine to as many as 90,000 sites across the U.S. during the 2009 swine flu outbreak. At the time it was the biggest public health initiative in the history of the Centers for Disease Control and Prevention. The company has also had an existing contract with the CDC to distribute childrens’ vaccines since 2016, and its role in distributing vaccines during the pandemic is based on that contract. Its success during the H1N1 epidemic bodes well for Covid-19 rollout, but U.S. public health infrastructure may continue to pose problems.\n\nAs I wrote previously, the specifics of how a vaccine will be distributed by McKesson — and who will get it first — are not yet clear. In an email to the Medium Coronavirus Blog, Robert Redfield, PhD, director of the CDC, said: “Through the Advisory Committee on Immunization Practices, CDC will play a vital role in deciding, based on input from experts and stakeholders, how initial, limited vaccine doses will be allocated and distributed while reliably producing more than 100 million doses by January 2021.” McKesson shared its public statement about its CDC partnership with the Blog but did not answer questions.\n\nThere does seem to be a plan to determine where exactly McKesson will distribute vaccines, according to the HHS. A spokesperson for the agency tells the Blog that ensuring easy access for all Americans, notably minority communities and medically underserved populations, is a top priority. “Whether it’s at a doctor’s office, retail pharmacy, federally qualified health center, or hospital,” they said, “thousands of outlets will be available so no American must travel far to be vaccinated.”\n\nThe plan is that McKesson will deliver a specific amount of vaccine to a designated location once it’s allocated to a given jurisdiction or authorized partner. In many instances, says the spokesperson, these will be sites where the vaccine will actually be administered; in others, McKesson will deliver vaccines to sites where health departments will pick up the vaccine and further distribute it within their networks. National retail pharmacies will also use a similar system. “This system,” says the spokesperson, “will be scalable to meet demand.”\n\nUntil more is known about the vaccine to be distributed, it’s not clear how it will be transported. Some vaccines are more delicate than others, and sometimes they require refrigeration. According to HHS, if the vaccine has ultra-cold storage requirements, it may be shipped directly from the manufacturer to administration sites, but this too will be managed within McKesson’s centralized system. The contract the company has with the CDC covers the transportation of both refrigerated (2–8º Celsius) and frozen (-20ºC) vaccines.\n\nIf the Covid-19 vaccine is not made in the U.S., distribution could be a little murky, depending on where the vaccine is actually made. The HHS spokesperson says the U.S. government is “committed to working with other countries friendly to our national security to ensure safe and effective Covid-19 vaccines are developed as fast as possible, however, the vaccine and therapeutic candidates [Operation Warp Speed] has invested in are the candidates OWS believes to be the most promising, and all of those candidates are being manufactured in the U.S.”\n\nMcKesson’s performance during the H1N1 epidemic in 2009 bodes well for the Covid-19 pandemic: During that time, it distributed almost 81 million H1N1 vaccine doses to 90,000 sites. However, notes journalist Michele Cohen Marill in the medical publication Medscape this week, distribution ran into obstacles at the public health level: “Public health officials struggled with the mechanics of designating priority groups and reaching out to them for vaccination while asking others to wait.”\n\n“I’m not sure there’s much difference between 1976, 2009, and 2020–2021,” Rebecca Wurtz, MD, MPH, of the University of Minnesota School of Public Health in Minneapolis, told Medscape. “The issues around organizing a massive distribution of a new vaccine are pretty similar.”\n\nThe U.S. can’t afford to make administrative errors during the Covid-19 pandemic, especially as the fall surge continues and the death toll mounts. States ultimately shape the actual vaccination programs, notes Marill in Medscape, and it’s up to them to decide who can administer the vaccine, and where. The hope is that state governments authorize as many people as possible to safely administer the vaccine and make access to it widespread and equitable. Neighborhood pharmacies will likely play a key role, as the HHS spokesperson suggests: “For example, during H1N1, once vaccines became widely available pharmacies played an important role in the vaccine distribution,” they said, adding that pharmacies’ role “is even more critical to vaccinations today and will be fully integrated into the distribution plan.”",
    "keywords": [
      "role",
      "future",
      "company",
      "mckesson",
      "public",
      "set",
      "roll",
      "distribution",
      "vaccines",
      "vaccine",
      "health",
      "spokesperson",
      "americas",
      "covid19"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------9d6ee962_482c_4c7c_bbd5_20194801a120-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------4-73--------------------9d6ee962_482c_4c7c_bbd5_20194801a120-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------5-73--------------------9d6ee962_482c_4c7c_bbd5_20194801a120-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------6-73--------------------9d6ee962_482c_4c7c_bbd5_20194801a120-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/steve-jobss-definition-of-smart-will-make-you-rethink-your-actions-6b1d7873fd46?source=extreme_main_feed---------7-73--------------------9d6ee962_482c_4c7c_bbd5_20194801a120-------",
    "title": "Steve Jobs’s Definition of “Smart” Will Reprogram Your Idea of Intelligence",
    "publish_date": "2020-09-10 17:51:04",
    "authors": [
      "Alan Trapulionis"
    ],
    "summary": "Steve Jobs: “You have to not have the same bag of experiences as everyone else does”Recently, I’ve come across a video where a young Steve Jobs explains a key characteristic of what he considers to be a smart person.\nHow do you increase your intelligence to become what Jobs considers to be a “smart” person?\nAccording to the visionary — it’s all about having unique life experiences.\nOn Ferriss’s podcast, Lütke went in-depth about the books that changed his life — carefully describing each one of them.\nBooks are the easiest way for introverts to gather unique insights that shape their own worldview.",
    "text": "Steve Jobs: “You have to not have the same bag of experiences as everyone else does”\n\nRecently, I’ve come across a video where a young Steve Jobs explains a key characteristic of what he considers to be a smart person.\n\nI expected to hear something among the lines of “thinking out of the box” and “unflinching dedication.” Instead, I discovered one of the most profound pieces of advice I’ve ever heard.\n\n“A lot of [what it means to be smart] is the ability to zoom out, like you’re in a city and you could look at the whole thing from the 80th floor down at the city. And while other people are trying to figure out how to get from point A to point B reading these stupid little maps, you could just see it in front of you. You can see the whole thing.”\n\nJobs masterfully notes that smart people often make connections that seem obvious to them, but perplexing to others — simply because they have developed the skill of “zooming out” to get a better view of the big picture.\n\nThis, of course, sounds great and we can all agree that in order to change the world you need to clearly see the world. But how do you do that? How do you increase your intelligence to become what Jobs considers to be a “smart” person?\n\nAccording to the visionary — it’s all about having unique life experiences.\n\n“You have to not have the same bag of experiences as everyone else does, or else you’re gonna make the same connections and you won’t be innovative. […] You might want to think about going to Paris and being a poet for a few years. Or you might want to go to a third-world country — I’d highly advise that. Falling in love with two people at once. Walt Disney took LSD, do you know that?”\n\nIt makes sense. A 2015 study has concluded that openness to experience was the best predictor for “job performance in situations requiring creativity,” which is every entrepreneur’s bread and butter. It’s also safe to say that any significant career step up will require a decisive innovative move.\n\nThe study also found that extraversion “played a key role in contexts involving social interactions,” which is hardly a surprise, but a healthy reminder nonetheless. These findings tie in nicely with what Jobs said — people who are open to experience and extroverted will seek out the most interesting, non-standard situations in life — and gain invaluable perspectives as a result.\n\nJobs’ idea also helps explain why so many successful entrepreneurs are avid readers. Divyank Turakhia, a 35-year old Indian tech billionaire, has once said that since the age of 15 he has read for 800 hours a year, every year. Tobias Lütke, Shopify’s billionaire founder, was described by Tim Ferriss as one of the most aggressive readers he’d ever met.\n\nIt’s probably not the information itself that these leaders value about books, but rather how they change their perspective. On Ferriss’s podcast, Lütke went in-depth about the books that changed his life — carefully describing each one of them.\n\nBooks are the easiest way for introverts to gather unique insights that shape their own worldview. They expand your mental horizons, so it makes sense that someone who’s read 100 classic business books can spot a rising trend or a missed opportunity before anyone else.",
    "keywords": [
      "life",
      "youre",
      "world",
      "situations",
      "jobss",
      "books",
      "study",
      "unique",
      "intelligence",
      "idea",
      "jobs",
      "reprogram",
      "steve",
      "smart",
      "definition"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/26-year-old-coder-built-a-1-billion-app-in-2-years-after-following-his-girlfriends-advice-c6f378db1fd1?source=extreme_main_feed---------8-73--------------------9d6ee962_482c_4c7c_bbd5_20194801a120-------",
    "title": "26-Year-Old Programmer Built a $1 Billion App In 2 Years — After Following His Girlfriend’s Advice",
    "publish_date": "2020-10-07 08:45:21",
    "authors": [
      "Alan Trapulionis"
    ],
    "summary": "26-Year-Old Programmer Built a $1 Billion App In 2 Years — After Following His Girlfriend’s AdviceHow a failed passion project turned into one of the most iconic apps of our timeKevin Systrom at Techcrunch Disrupt 2011.\nHis next stop was NextStop, a location recommendation app startup.\nAfter a year of honing his coding skills at the startup, Kevin decided to create a check-in app of his own.\n“I didn’t have a specific idea in mind… I mean, the idea was basically to start a check-in app… Who wasn’t starting a check-in app at that time?\nThat second ticket would become the best investment Kevin Systrom ever made.",
    "text": "26-Year-Old Programmer Built a $1 Billion App In 2 Years — After Following His Girlfriend’s Advice\n\nHow a failed passion project turned into one of the most iconic apps of our time\n\nKevin Systrom at Techcrunch Disrupt 2011. JD Lasica’s image\n\nKevin Systrom left Google frustrated.\n\nHaving spent almost three years as a product manager at the company, Kevin was eager to take on more responsibility and apply his nuclear drive to something tangible. Instead, he was offered by his boss to take up golf.\n\nHis next stop was NextStop, a location recommendation app startup. With FourSquare leading the way, check-in apps were all the rage in the late 2000s, and a small team meant Kevin could get more responsibility and take initiative.\n\nHe did. After a year of honing his coding skills at the startup, Kevin decided to create a check-in app of his own.\n\n“I didn’t have a specific idea in mind… I mean, the idea was basically to start a check-in app… Who wasn’t starting a check-in app at that time? […] It was probably the worst idea we could’ve been working on at the time.”\n\nA hostel in Mexico seemed like the right place to pursue his terrible idea, so Kevin packed his flip-flops and bought two tickets out of California — one for himself, one for his girlfriend. That second ticket would become the best investment Kevin Systrom ever made.\n\nKevin’s life story and quotes taken from these four sources.",
    "keywords": [
      "checkin",
      "girlfriends",
      "worst",
      "working",
      "responsibility",
      "billion",
      "startup",
      "following",
      "built",
      "programmer",
      "26yearold",
      "advice",
      "idea",
      "systrom",
      "kevin",
      "apps",
      "app"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------8fcbc9cd_4f22_4d59_9067_948831eab35f-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------8fcbc9cd_4f22_4d59_9067_948831eab35f-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------8fcbc9cd_4f22_4d59_9067_948831eab35f-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------8fcbc9cd_4f22_4d59_9067_948831eab35f-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------8fcbc9cd_4f22_4d59_9067_948831eab35f-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://marker.medium.com/forget-shutdowns-its-demand-shock-that-s-killing-our-economy-3062e94c122e?source=extreme_main_feed---------0-74--------------------44c75dd7_b164_4803_9615_d8c359518a51-------",
    "title": "Forget Shutdowns. It’s ‘Demand Shock’ That’s Killing Our Economy.",
    "publish_date": "2020-10-15 12:24:29",
    "authors": [
      "James Surowiecki"
    ],
    "summary": "On July 11, the American economy hit a key milestone in its recovery from the coronavirus: the Magic Kingdom at Walt Disney World reopened.\nIn the three months that have followed, customer traffic has stayed well below where Disney hoped it would be.\nThe portion of visitors who are from out-of-state, who are the park’s most lucrative customers, has dropped below 50%.\nBut as lockdowns have been lifted in most of the country and businesses have been able to reopen, that supply shock has waned, only for a new problem to emerge: weak demand.\nIn other words, a supply shock has been replaced by a shock to demand.",
    "text": "On July 11, the American economy hit a key milestone in its recovery from the coronavirus: the Magic Kingdom at Walt Disney World reopened. The world’s most popular theme park had been shuttered since March 16, and the expectation was that Disney lovers from across the U.S., frustrated after months indoors, would flock to Orlando. And in the weeks leading up to the reopening, Disney had more than enough reservations to fill the park to its new, limited capacity. But as reopening day approached, the number of Covid-19 cases in Florida began to rise, and in response people started doing something Disney visitors almost never do: cancelling their reservations. In the three months that have followed, customer traffic has stayed well below where Disney hoped it would be. The portion of visitors who are from out-of-state, who are the park’s most lucrative customers, has dropped below 50%. In September, Disney reduced opening hours at all its parks, and in early October, it said it would be laying off 28,000 workers.\n\nDisney hasn’t been alone. Theme parks were allowed to open back up in most of this country this summer, and initially believed that pent-up demand would translate into a resurgence in traffic. Instead, attendance has been well below expectations — at Six Flags, for instance, it’s been around 25%–30% of capacity — and not by choice. Because of this, some park operators, like Hersheypark, have cut back hours, while others, like Cedar Fair, are just keeping some of their parks closed for the year. There’s no secret about why. As Six Flags CEO Michael Spanos said in a conference call with analysts: “What customers are telling us is when they see a flattening of the curve, they want to get out. We also see a chunk of guests that are saying that when they’re comfortable with the vaccine, they want to get out.”\n\nAs lockdowns have been lifted in most of the country and businesses have been able to reopen, that supply shock has waned, only for a new problem to emerge: weak demand.\n\nWhat Spanos was describing is the new reality now facing entire clusters of American businesses — restaurants, movie theaters, airlines, gyms — and the economy more generally: Consumer anxiety over the continued spread of the pandemic is holding back the recovery by making it impossible to get back to business as usual. In the spring, the economy was crushed in large part by the lockdowns and restrictions imposed by states, which created what economists call a supply shock: businesses literally could not supply goods and services, because they were shut down.\n\nBut as lockdowns have been lifted in most of the country and businesses have been able to reopen, that supply shock has waned, only for a new problem to emerge: weak demand. In other words, a supply shock has been replaced by a shock to demand.\n\nSome of the weakness in demand is because we’re on the verge of a classic recessionary cycle: Since the stimulus payments to unemployed workers ended in July, people either have less money to spend or are worried about spending it, which means businesses have less revenue, which makes them cut back on hiring and investment, which means less spending.\n\nHalf a dozen gym chains have filed for bankruptcy in recent months, including 24 Hour Fitness, the owner of New York Sports Club, and Gold’s Gym, with many of them permanently shuttering a majority of their locations.\n\nBut what makes this demand shock exceptional is that the U.S. still has 40,000 to 50,000 new Covid-19 cases and 600 to 700 deaths every day, and as a result lots of Americans are still leery of doing normal, not particularly indulgent things like eating out, going to the gym, or going to the movies. A recent survey by research firm Datassentials, for instance, found that 58% of those surveyed described themselves as “uncomfortable” with dining indoors, and 36% described themselves as “very uncomfortable.” Not surprisingly, then, no matter how creative restaurants get, traffic is still down sharply in most places, and 2.5 million restaurant workers who lost their jobs in April remain unemployed. Similarly, gyms have been open in most states for months now. But a recent survey of 5,000 gym-goers by RunRepeat found that 70% haven’t returned and 43% said they had no plans to go back. Half a dozen gym chains have filed for bankruptcy in recent months, including 24 Hour Fitness, the owner of New York Sports Club, and Gold’s Gym, with many of them permanently shuttering a majority of their locations.\n\nOr take movie theaters. By September, theaters were open in 44 of 50 states, and Warner Bros. decided to go ahead with plans to release Christopher Nolan’s Tenet, which had been one of the most highly-anticipated films of the year even before the pandemic hit. Even though theaters in New York City and Los Angeles remained closed, Tenet opened on almost 3,000 screens across the country. But even as Tenet did big box-office numbers overseas in countries where the virus has been contained, it made just $9.4 million on its opening weekend, despite facing essentially no competition. The hope had been that Tenet would prove people were ready to go back to the movies. Instead, it proved most weren’t. Hollywood studios concluded there was no point in trying to release big films for the rest of the year, and pulled their tentpole films from the fall schedule. And thanks to the combination of consumer anxiety and the lack of new content, Cineworld, owners of Regal Cinemas, shut down all 536 of its theaters in the U.S., while AMC, the largest U.S. theater chain, says it could run out of cash by the end of the year.\n\nThis shouldn’t be a revelation. In fact, myriad studies have now shown that in the early days of the pandemic, people began voluntarily socially distancing and avoiding places they perceived as risky even before lockdowns were put in place. And if you go further back in history, during the 1918 Spanish flu pandemic, businesses stayed open in most cities, yet economic activity still fell sharply, and contemporary accounts suggest that the economy only started to rebound when people became less afraid of catching the flu. The point is that lifting stay-at-home orders and opening restaurants isn’t enough: Until consumers feel safe, they’re going to stay away.\n\nIn the wake of the spring lockdowns, a popular narrative emerged that the only thing holding back the U.S. economy were busybody government officials who insisted on keeping stuff shut down. And, to be sure, government-imposed restrictions are still playing a role in holding back the economy, particularly in states like California — which has yet to allow Disneyland, or movie theaters, to open. But what the experience of restaurants and gyms and theme parks is telling us is that the problem now isn’t lockdowns. It’s something more basic: justifiable fear.",
    "keywords": [
      "disney",
      "thats",
      "killing",
      "forget",
      "lockdowns",
      "economy",
      "theaters",
      "shock",
      "businesses",
      "supply",
      "parks",
      "open",
      "shutdowns",
      "months",
      "demand"
    ]
  },
  {
    "url": "https://gen.medium.com/2020-has-been-bad-but-things-are-going-to-get-worse-2e083903b0f4?source=extreme_main_feed---------1-74--------------------44c75dd7_b164_4803_9615_d8c359518a51-------",
    "title": "2020 Has Been Bad. But Things Are Going to Get Worse.",
    "publish_date": "2020-10-15 16:16:45",
    "authors": [
      "Colin Horgan"
    ],
    "summary": "2020 Has Been Bad.\nBut Things Are Going to Get Worse.\nThe pandemic revealed our society’s failings.\nPhoto: Markus Spiske/UnsplashEarlier in 2020, as the lockdowns arrived, time started to feel warped.\nDisparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.",
    "text": "2020 Has Been Bad. But Things Are Going to Get Worse.\n\nThe pandemic revealed our society’s failings. We’re running out of time to fix them.\n\nPhoto: Markus Spiske/Unsplash\n\nEarlier in 2020, as the lockdowns arrived, time started to feel warped. We began to ask ourselves whether we were living in the past or the present or whether we were caught somewhere in between. This feeling of inertia was a function of recognizing a time lag between when the virus arrived and when we realized it was here.\n\nThe coronavirus case counts we saw updated every morning were already history — reality as it was two weeks prior. What was happening had already happened but also had not happened yet. Gradually, as the weeks and months followed, we learned more about the virus, including how long it had actually been around us — as well as how unprepared our society and our systems were for its arrival.\n\nThe pandemic has proven to be a clarifying force. While it will likely change some aspects of our society, before it does, it is first revealing what kind of a society we already had: one that is teetering on decaying foundations that have either gone unseen or have been deliberately ignored for decades.\n\nIn nearly every Western democracy it has hit, the pandemic has disproportionately affected people of color, the poor, and the elderly. Sometimes, like in the U.S., it’s hit them all. In short, the virus has shown us where our most egregious inequalities lie. Disparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.\n\nWe are living on a neglected structure, poorly constructed decades ago and then left largely unchecked. Even when we had the chance, after its near-collapse in 2008, to reassess the system, we didn’t bother and instead were steered for another decade in an ideological vacuum, maybe the last true product of late capitalist boredom. This long-standing failure to account for the obvious disparities at the heart of our society is probably why the pandemic will likely create a so-called K-shaped recession — one wherein “big companies and rich families have largely recovered, whereas mom-and-pops and the moms and pops who run them are living through a second Great Depression,” as Annie Lowrey wrote recently at The Atlantic.\n\nWe live every day under a looming sense of delayed inevitability. How long can it go on?\n\nThe mechanisms we have that ought to help us address those disparities, like politics, law, or journalism, have also been revealed to be heavily damaged. Our democracies are stressed, not from external enemies as much as from internal rot. Rebuilding them would require us to inhabit a shared reality. Thanks somewhat to our current acoustic information sphere dominated by platforms of fantasy, we don’t have one.\n\nThat lag time we noticed in the spring now feels more familiar, if not constant. We live every day under a looming sense of delayed inevitability. How long can it go on?",
    "keywords": [
      "bad",
      "2020",
      "long",
      "revealed",
      "disparities",
      "pandemic",
      "living",
      "going",
      "worse",
      "weeks",
      "virus",
      "society",
      "things",
      "sense"
    ]
  },
  {
    "url": "https://debugger.medium.com/your-entire-life-is-on-gmail-its-time-to-clean-that-up-c81106e099b4?source=extreme_main_feed---------2-74--------------------44c75dd7_b164_4803_9615_d8c359518a51-------",
    "title": "Your Entire Life Is on Gmail. It’s Time to Clean That Up.",
    "publish_date": "2020-10-16 05:32:59",
    "authors": [
      "Angela Lashbrook"
    ],
    "summary": "Your Entire Life Is on Gmail.\nDon’t suffer like I’ve sufferedPhoto: Jay Wennington/UnsplashWednesday, 2 p.m. Eastern Time: I am on hour 9,000 of deleting emails from my overloaded Gmail account.\nI did this first and then decided, whatever, I don’t need any of that junk.\nYou can find more helpful Gmail search terms here, though the above are the terms I found most effective for deleting swathes of email at once.\nOnce you’ve cleared out your Gmail, you don’t need to get complicated with folders and labels and such, which get cumbersome if you have too many.",
    "text": "Your Entire Life Is on Gmail. It’s Time to Clean That Up.\n\nDon’t suffer like I’ve suffered\n\nPhoto: Jay Wennington/Unsplash\n\nWednesday, 2 p.m. Eastern Time: I am on hour 9,000 of deleting emails from my overloaded Gmail account. My eyeballs are leaking out of my head and pooling in a sticky puddle on my laptop’s mouse pad.\n\nOr it feels like it, anyway.\n\nIn recent weeks, Google has sent me repeated warnings that I’m approaching my Google Drive storage limit. I had rarely considered that Google would limit my storage capacity; the company’s potential for data collection seems infinite, incapable of being incapacitated or overburdened. And yet my email account, which I’ve had since 2014, is finally tired of holding my endless stream of newsletters and press releases; the 15 gigabytes that Google allots free users is nearly full.\n\nI’d hoped to write this story with a title along the lines of “One Simple Trick To Clearing Out Your Google Drive Storage.” Deleting every last email in your inbox and starting fresh would be ideal, but there’s such a wild mix of correspondence stored there — chain emails from your second cousin, newsletters from companies you bought a sweater from once, love letters from the early days of a current relationship — that the nuke-and-run method isn’t recommended or possible for anyone but those who lack even a drop of sentimentality.\n\nFor everyone else, there’s no one trick to clearing out your Google Suite. There are strategies, which I will get into below, but the best thing you can do, I have unfortunately discovered, is keeping tidy as you go. And that means deleting all the emails you don’t need as you receive them so you don’t get caught up in the mess I spent the last several days cleaning up.\n\nOver the course of the past few days, I’ve been experimenting with various methods of deleting my emails and documents. It was a painful experience: Reading old emails that detailed difficult situations and brought up bitter memories was not how I would prefer to spend my workday (or my time off), and it wasn’t easy to figure out what I could justify deleting (emails with former bosses about banal topics) and what should stay (contracts, old emails from friends). My years of resistance toward deleting any of these emails — out of a sense of nostalgia or concerns that I might need them for whatever reason someday — like fall into the bucket of what researchers consider “digital hoarding.”\n\nDigital hoarding, which I’ve written about before, might sound somewhat hyperbolic — after all, it’s not like someone who compulsively splurges on Steam sales must then literally wade through piles of games on their way to the bathroom. Yet studies show digital hoarding can be stressful and even upsetting to those who experience it. In 2018, researchers interviewed 45 of these so-called digital hoarders and found that the impression that digital space is endless contributed significantly to peoples’ tendency to hoard. They were surprised at the volume of digital stuff they’d accumulated, but still struggled to come to terms with deleting much of it.\n\nMany people simply didn’t care about the pileup of documents, emails, photos, and music. “I can’t be bothered going through it all, there are too many,” said one 30-year-old participant. “I’ve left it so long now that going back and sorting through is not something I can be bothered with,” said another, age 25.\n\nFor many participants, the prospect of going through and deleting their digital crap was anxiety-inducing and stressful. This certainly aligns with my own experience: When I first faced the mess that was my Google Drive on the day I took this assignment, I felt panicked and overwhelmed by the sheer magnitude of the task in front of me.\n\nSimilar to the terror that might precede sitting down to scrub the baseboards with a stack of sponges, I was resistant and angry before I got started on my Google Suite cleaning. But once I got started, I kind of… couldn’t stop. Seeing that little percentage tick down as I went through my emails was immensely satisfying, like creating vacuum lines on a carpet. So, yes, there’s no real trick to this, and my guess is that this is intentional: If it’s a pain in the butt to organize and delete your emails and files, your only options are either to a) get a new email address (I legitimately considered this) or b) pay Google for more storage, which starts at $1.99 a month for 100 gigabytes and goes up to $10 a month for 2 terabytes. And the more emails you keep and accumulate, the more delicious, juicy data is available for Google to collect.\n\nWhat you need to do first is figure out where you’re storing most of the junk taking up the precious few 15 gigabytes Google allots you. To do this, go to One.Google.com and, on the left sidebar, click “Storage.” There, you’ll find a breakdown of how much space Google Drive, Gmail, and Google Photos are taking up, respectively.\n\nUnless you’re a photographer or a big fan of huge PDFs and weighty spreadsheets, most of the action is probably happening in your email. The best way to delete mass emails without regret — or sadness, as I found as I thumbed through those depressing messages from five years ago — is to temporarily sign up for Mailstrom.co.\n\nMailstrom analyzes your email and, theoretically, allows for quick and easy unsubscribe and delete options. (For those worried — with good reason — about their privacy, Mailstrom says it won’t share or sell your data for advertising purposes, and it deletes your data three months after you’ve canceled your account.) But after you’ve deleted 2,500 emails through Mailstrom, your free trial ends, and you need to pay between $9 and $30 a month to continue using the service. If I were going to pay, I’d probably just buy the Google storage, which is cheaper, than a streamlined method for deletion. Instead, I recommend using Mailstrom to show you which senders are pummeling you with the most garbage:\n\nI am my second-worst offender!\n\nOnce you’ve determined the worst sender offender, you can go into Gmail, search from:sciencedirect@notification.elsevier.com (or whoever is sending you tons of email), and mass delete from there. Once you’re looking at your search results, click the “Select All” box on the left side of your inbox, and then be sure to click “Select all conversations that match this search,” like so:\n\nThat way, you’ll delete all the messages sent by that particular sender, not just the most recent 50.\n\nThat should get rid of a pretty decent chunk of your email clutter in a minimal amount of time, but if you want to keep going, I’d recommend a few more courses of action:\n\nDelete everything in your Promotions and Social folders. Just go nuclear on those folders. Check the past few pages to ensure nothing important lands in there, and then select all and delete. That will likely be thousands, if not more, of the remaining marketing and newsletter stragglers you didn’t catch when you used the Mailstrom method. If you only want to delete Promotions or Social emails older than a specific date, use the following search term: category:promotions , older_than:2y. (That space between “promotions” and the comma is intentional — the search won’t work without it.) I did this first and then decided, whatever, I don’t need any of that junk. Bye! You can do the same with newsletters with category:updates , older_than:2y. Search for all your emails larger than a specified size, then go through and manually delete (or be bold and “select all” — “delete”). Enter larger:10mb for this option. This takes more time, so I only recommend this if you’ve already nuked your marketing emails and still have a good chunk of space to free up. It makes more sense to sort out and delete emails larger than a specific size than attachments larger than a specific size because plenty of emails are ginormous without the additional help of an attachment. But if you want to focus on attachments, type has:attachments larger:10MB (or however big) into the search bar and go wild.\n\nYou can find more helpful Gmail search terms here, though the above are the terms I found most effective for deleting swathes of email at once.\n\nBecause Google considers your Trash to be part of your allotted 15 gigabytes, you need to empty it before you know how much you’ve truly managed to delete. Once you empty your trash, those emails are gone forever, but I don’t really recommend clicking through and looking at what’s in there because you’ll find yourself three hours later red-eyed and extremely bored. Just hit delete — and admire your clean baseboards/organized closet/sparkling tile or whatever household cleaning analogy would give you the most satisfaction.\n\nNow, hopefully, you are down to the point where you can begin to accumulate email again without worrying about running out of space for the next couple of years. Here’s where I stand now:\n\nIt took me several days to get here, but only because I took the time to try every conceivable method in order to deliver to you, dear reader, those which I’ve found most effective. Still, you probably need to put at least an hour or two of work into this, I’m sorry to say.\n\nBut you never have to do this again if you follow two very simple rules from here on out:\n\nMark any and all press releases, marketing emails, et cetera that you don’t want to see as spam. If you want to be nice, you can email the marketing company or PR reps and respectfully ask to be removed from their mailing list, but if you’re lazy or simply receive too many of them to do this, just file them to spam. Gmail automatically clears out your spam folder after 30 days, so they’re as good as gone after a month. Do this consistently, as soon as you see them. Delete any other emails you don’t care about immediately. Don’t leave them there because maybe you’ll read them later. Don’t let them collect dust. Delete. Be ruthless, seriously. No time like the present to shed your indecisive, sentimental nature when it comes to messages from your alumni association or the rescue where you got your dog. Bye!\n\nWith this, you should stay ahead of the game, with minimal effort, for the next several years at least. Once you’ve cleared out your Gmail, you don’t need to get complicated with folders and labels and such, which get cumbersome if you have too many. (I only have two: one for random thoughts I send myself in the middle of the night about my novel, and one for press releases from book publicists since I often respond to those en masse at a later date).\n\nBy making the spam and delete buttons your best friends, you will avoid the disaster you have wrought upon yourself for a very, very long time.",
    "keywords": [
      "life",
      "dont",
      "search",
      "delete",
      "emails",
      "email",
      "entire",
      "gmail",
      "need",
      "youve",
      "google",
      "deleting",
      "clean"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------3-73--------------------44c75dd7_b164_4803_9615_d8c359518a51-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------4-73--------------------44c75dd7_b164_4803_9615_d8c359518a51-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------5-73--------------------44c75dd7_b164_4803_9615_d8c359518a51-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/the-ascent/how-to-make-enough-money-to-retire-in-the-next-5-years-6a7683ce5a16?source=extreme_main_feed---------6-73--------------------44c75dd7_b164_4803_9615_d8c359518a51-------",
    "title": "How To Make Enough Money to Retire in the Next 5 Years",
    "publish_date": "2020-09-22 13:02:22",
    "authors": [
      "Tim Denning"
    ],
    "summary": "Take the money from your online business and pour it into cars and free drinks for attractive people you want to sleep with.\nWatch yourself lose your mind from all the money and the thought of it been taken away from you.\nTrade in the luxury life for a simple life that is enforced by how much money you have in your back pocket.\nServe people who have money, and who don’t have money.\nHave money allow you to buy back your time, instead of spending money on things that create a never-ending trail of debt.",
    "text": "1. Invest your money rather than save.\n\nSaving your money is stupid. Inflation will eat away at your money. You make money when you invest what you have in real assets.\n\n2. Understand the idea of purchasing power.\n\nGovernments print money to fight recessions, and fund wars. When they do, they take away the purchasing power of the money you have earned. The only way to repay the huge debt the US Government has racked up is by either: 1) Raising taxes 2) Printing money out of thin air.\n\nIncreasing taxes won’t repay the debt. That leaves option two which we’ve been doing as a global economy since 2008. You can overcome the attack on your purchasing power when you learn about inflation hedge assets.\n\n3. Lose all of your money.\n\nLet money show you another side to life. Start a business with your family. Choose a marketplace to sell on. Import goods from China. Buy low and sell high. Let the business become huge. Bring on investors and see that they are like having a boss whip you with a whip.\n\nBelieve you were destined to be a hot shot entrepreneur. Take the money from your online business and pour it into cars and free drinks for attractive people you want to sleep with. Become a total ass in the process. Treat people like absolute dirt. Tell poor people to work harder. Abuse random charities and tell them to stop asking for donations. Let your ego run your life.\n\nStart a second business using your overconfidence from the first business. Park your car each morning in the reserved car space for BMWs and Mercs only. Get out of the car and slam the door like a boss. Keep your head up so you look confident. Walk into the office and give advice to people twice your age. Take the intersection of luck and the rise of the internet for granted. Tell yourself you’re amazing and you built this empire because you’re brilliant.\n\nGo out on the weekends and try and pickup using your money. Flash $100 bills. Talk down to the bar staff. Tip service workers like they’re your slaves and you’re the emperor. Wear loafers that cost twice the weekly minimum wage of a person you call a ‘worker.’\n\nWhile all of this is going on, get greedy. Not just a little bit greedy. Treat your family like they serve you now. Don’t visit your grandparents or repair broken relationships with aunties and uncles. You’re too busy hustling and making money. Keep making the money. Watch the problems enter your life. Watch those problems get out of control.\n\nSee, in a matter of months, your money-making machine almost crumble because of one bad decision. Realize the end is near. Find yourself out on the streets late at night talking to your employees and predicting conspiracies. Watch yourself lose your mind from all the money and the thought of it been taken away from you. Watch your self-worth become your net-worth.\n\nShow up to the office one day and realize it’s all over. Say goodbye to the employees while you hold back tears. Pretend to be strong when you know you’re weak. Offer to give them references for their next job, knowing you’ll be lucky to find a job yourself.\n\nGo home when it’s all over. Sell the luxury car. Catch trains to visit friends. Learn what it’s like to have nothing. Check your bank account and see your savings evaporate fast. Trade in the luxury life for a simple life that is enforced by how much money you have in your back pocket. Accept the gift of an old car from a kind family member you neglected when you had your business.\n\nDrive their car back to your empty home. Pick up the car cleaning accessories you had for your BMW. Take the car down to the local car wash and see if you can shine it into something that resembles the BMW. Watch your worst nightmare, a big spider, jump out from underneath the car. Scream at the top of your voice and then watch it crawl away.\n\nFinish cleaning the car and notice how it hasn’t morphed into anything you could imagine in your dreams. Feel slightly grateful you even have a car for a few brief moments.\n\nReturn home and look for a job. Apply for everything. Watch the phone never ring and the thought of moving in with distant family, to survive, become a reality. Keep trying. Pick up the phone one Monday morning and talk to a nice lady named Fiona on the other end. Say hi and pretend to be okay when you’re not okay. Say yes to the job interview knowing something is wrong… you feel sick.\n\nSee the doctor. Try and find out what is wrong with you. Try all of their suggestions: a change in diet, fructose tests, colon inspections. Roll up the following week for the job interview. Have the thought of presenting your failed business journey almost bring you to tears. Watch your hands shake and feel the sweat drip down your back and stink out the interview room.\n\nGet a call saying you made it. You got a job in a call center working for a bank. Notice the contrast between making loads of money and earning minimum wage. Work at the bank for eight years. Learn about how money works. Serve people who have money, and who don’t have money.\n\nSpend your time after work learning about different assets: stocks, real estate, gold, digital currencies, bonds, cash. Apply the knowledge and invest what you earn. Take the money you earn from being a part-time writer and invest it, too. Feel like you’re smart with money. Watch the money grow. Make enough money to cover all of your expenses for a year, in advance. Feel no different.\n\nSimultaneously, work on yourself. Face your inner demons. Get help. Face mental illness too. Be kind to yourself. Realize you’re doing the best you can. Forgive yourself for your messy past, where you acted like a dictator with too much money. Say sorry to the people you hurt. Forgive people who you banned for life because they violated one of your rules. Forgive people for no reason at all.\n\nLook at what makes you happy now: family, your partner, messages from readers, mending of broken relationships.\n\nFeel what it’s like not to run towards money. Notice how fancy cars, houses and luxury goods have zero appeal to you. Take the simple things in life and let them change your life.\n\nHave money allow you to buy back your time, instead of spending money on things that create a never-ending trail of debt. Make the acquisition of wealth secondary. Focus on how you can be helpful. Get excited by all the people you can meet and do life with.\n\nLearn to make a difference rather than a profit.\n\n4. Become a content creator.\n\nContent creators are part of one of the biggest wealth transfers in history. Everything is content. Storytelling through words, videos, audio, photography and illustrations is a booming business.",
    "keywords": [
      "life",
      "family",
      "job",
      "retire",
      "car",
      "money",
      "watch",
      "feel",
      "work",
      "business",
      "youre"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------7-73--------------------44c75dd7_b164_4803_9615_d8c359518a51-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://medium.com/the-ascent/15-ideas-you-can-steal-to-make-the-next-12-months-a-period-of-remarkable-growth-8aa91c2405bc?source=extreme_main_feed---------9-73--------------------44c75dd7_b164_4803_9615_d8c359518a51-------",
    "title": "15 Ideas You Can Steal to Make the Next 12 Months a Period of Remarkable Growth",
    "publish_date": "2020-10-02 20:25:05",
    "authors": [
      "Tim Denning"
    ],
    "summary": "You can achieve a lot in 12 months when you surround yourself with new ideas.\nYou write content in emails.\nBecome conscious of the content you’re creating.\nDo something you would never dare doIt’s what you’re afraid of that creates remarkable growth.\nI prefer to write my thoughts down in the form of unpublished drafts that could one day be published, but probably won’t be.",
    "text": "You can achieve a lot in 12 months when you surround yourself with new ideas. Ideas are the seeds of change.\n\nThe best ideas are the ones you don’t have to come up with. Let one of these ideas set off an aha moment in your head.\n\nTake one of these ideas and make it rain.\n\nBecome a content creator\n\nContent creation is part of your life. You create content for work in the form of slide decks. You write content in emails. You post parts of your life called content on social media. You write a lot of text in direct messaging apps.\n\nLife on the internet is a life full of content creation. Become aware of how much content you are creating. Become conscious of the content you’re creating. Then take a few pieces of content and release them into the world.\n\nIt sounds so tiny and obvious. I’m sure you’ve thought of it before. But have you done it yet? Could you do it more? The internet has democratized content. In simple terms, that means you can get paid to create content. You’re doing it anyway so why the heck not? Look at your social media profiles for clues about what direction you’re heading in.\n\nCreating content leaves a trail of bread crumbs behind that shows you what you care about and where you want to go in life.\n\nDo something you would never dare do\n\nIt’s what you’re afraid of that creates remarkable growth.\n\nAll you need is 60 seconds of courage to break your past beliefs and try something new. When you do, and you rip the bandaid off that’s protecting your life, everything changes.\n\nMake a list. What would you never dare do? Could you do it for 60 seconds?\n\nForgive someone who doesn’t deserve it\n\nYou grow when you forgive.\n\nForgiveness is not about the person you’re forgiving. Forgiveness is about setting yourself free from the B.S. reasons you’re angry at someone.\n\nIf you had 24 hours to live would you still care about staying firm and not forgiving that person who wronged you?\n\nForgiveness is hard. Forgiveness feels like you’re giving a piece of yourself away. But when you do it, you realize there is so much you achieve without all that built up hate inside you towards people who broke your rules for life and didn’t even know it.\n\nLearn about how money works\n\nIt’s not about how much money you earn.\n\nIt’s not about how much money you save.\n\nIt’s not about how much money you invest.\n\nIt’s not about how well you diversify your investments.\n\nHow much money you end up with is based on your financial education. I have read plenty of articles about how stocks always go up or how you can never go wrong with an index fund. Learning about money will force you to challenge some of these philosophies about finance.\n\nWhat’s the difference between buying stocks outright and buying stocks through an index fund? The ownership structure. Why does ownership matter? Because when everybody is running for the exits in a recession or a big event happens in the market, you want to know where you stand.\n\nWill one country always be the center of the financial universe? Will creating trillions and trillions of dollars out of thin air have a lasting effect? Nobody knows. It hasn’t been done at this scale before. Does the price of stocks have multiple meanings? Yes. Everything is relative which is where the truth lies.\n\nStocks, cash, and banking aren’t what you might think they are. It’s nothing to be fearful about. But in a recession, the financially educated increase their winnings, and the financially uneducated live in bliss and have money taken away from them for reasons they will never understand.\n\nYou can learn about how money works using google, Youtube, and blogs — no degree is required.\n\nYour financial future will change if you spend time educating yourself about how money really works, not how school said it works.\n\nTake an unconventional online course to learn a new skill\n\nYou get paid for your skills. You extract fulfillment from your skills. The skill that can improve your life may not be one you’ve ever considered before.\n\nOnline courses cost next to nothing to attend. You can find them on platforms like Udemy or Teachable.\n\nPro tip: choose digital skills. In the work-from-home world, digital skills will help you a lot. More and more of our lives happen online. One day you’ll sign in to an avatar that is placed inside a 3D space that resembles your office, without you ever leaving home.\n\nLife can become boring when the current skills you have no longer excite you. Upgrade your skills to level-up your life.\n\nWrite your thoughts down\n\nI don’t do journaling. The idea makes me feel like a kid. I prefer to write my thoughts down in the form of unpublished drafts that could one day be published, but probably won’t be.\n\nYou might think writing your thoughts down is a waste of time. You can just think them, right? You can, although thoughts in your head are easy to manipulate and turn into lies. When you write your thoughts down it’s hard to lie to yourself. Your thoughts become real when you write them down.\n\nWhen you notice your thoughts you have the power to change them.\n\nWriting helps you express yourself.\n\nNotice the story you tell yourself\n\nYou tell yourself a story every day about why you can’t have the things you want, whether you realize it or not. These stories drive your life. Once you identify your stories you can change them.\n\nMy story used to be “I feel sick every day and it’s everybody’s fault.” Ownership of my story changed everything.\n\nChange your story, improve your life.\n\nClear out all your junk\n\nAs consumers, we’re trained hoarders. Hoarding is part of the world we live in. You hold onto possessions because they have parts of your life trapped inside of them that you don’t want to let go. The junk inside your home creates unnecessary stress.\n\nLetting your stuff go is how you let go of what no longer serves you. The best way is to give your stuff away to someone who needs it so the purchase still has value, just for someone new.\n\nThrow a tantrum at your phone apps\n\nYou don’t need most of them. They are full of business models designed to help you part with your money for a need you think you have. What worked for me was deleting all my phone apps and then seeing which ones I had to install again. Most of them never got installed again because I didn’t really need them after all.\n\nThe more apps you have, the more software companies you are a servant to.\n\nMap out a career plan that excites you\n\nI like this recipe:\n\n1 part normal.\n\n1 part risky.\n\nThe normal part of my career is an office job. The risky part of my career is a side-business that could fail at any time. The plan that works for you will be different. The key is to add something in your career that excites you but perhaps makes you no money in the beginning.\n\nThe $0 projects often excite you more than you might think. That excitement leads to effort. Effort leads to outcomes. Outcomes create remarkable growth.\n\nSay no to huge asks without feeling guilty\n\nAnybody can ask you to do anything they want. People try stuff on all the time to see if they can get away with it. Don’t fall for “the ask.”\n\nYou can say no to huge asks of your time without feeling guilty. Building up calendar debt will give you less time to spend.\n\nBe more careful about the books you read\n\nMost books are junk.\n\nThey’re not worth the 2 MB they take up in your Kindle App. Plenty of people want to offer you a book to read. I took book recommendations from everybody. I wasted time reading books because I didn’t want to waste the time I had already invested. This is a flawed strategy. I ended up reading more books than I needed to and hating the process.\n\nThere are lots of books to read, and most of them aren’t for you. Read the introduction of the book and if you don’t feel excited to keep reading, hit the delete from kindle button and move on with your life. There is only a finite amount of books you can read in your life.\n\nBooks are where you find yourself… when you read the right ones.",
    "keywords": [
      "life",
      "youre",
      "dont",
      "12",
      "ideas",
      "skills",
      "steal",
      "read",
      "money",
      "thoughts",
      "books",
      "remarkable",
      "15",
      "write",
      "period",
      "months",
      "content",
      "growth"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------f9fea5dc_d888_494a_a345_3b3117fa812d-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------f9fea5dc_d888_494a_a345_3b3117fa812d-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------f9fea5dc_d888_494a_a345_3b3117fa812d-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------f9fea5dc_d888_494a_a345_3b3117fa812d-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------f9fea5dc_d888_494a_a345_3b3117fa812d-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://hjauquet.medium.com/i-am-a-pro-life-housewife-1ff2cf1b05ec?source=extreme_main_feed---------0-74--------------------6f9694cc_10ae_4a2d_bdf2_3d59c21df920-------",
    "title": "I am a Pro-Life Housewife",
    "publish_date": "2020-10-15 13:43:33",
    "authors": [
      "Heather Jauquet"
    ],
    "summary": "I am a Pro-Life HousewifeAnd I’m not voting for TrumpPicture by Maria Oswalt on UnsplashAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\nThey are seeing that while Trump is considered the pro-life candidate, he is not pro-life.\nBeing pro-life means having a consistent life ethic from womb to tomb.\nPro-life means honoring the sanctity of life at all stages.\nDon’t discount the vote of the pro-life housewife who is working towards change.",
    "text": "I am a Pro-Life Housewife\n\nAnd I’m not voting for Trump\n\nPicture by Maria Oswalt on Unsplash\n\nAugust 12, 2020 President Trump tweeted, “The suburban housewife will be voting for me,” and I, as a pro-life Catholic housewife, am here to say, “No, sir, I will not,” and I am not alone.\n\nI acknowledge that I hate discussing politics and often hesitate to share my views. On the rare occasions I do, it’s usually about my support for the sanctity of human life. I have been admonished by friends from both political parties telling me that I am not pro-life enough, or I’m anti-woman, or I’m not Christian enough, or that I’m too naive. One person, went even so far as to tell me about her “great disappointment” in me and suggested I shouldn’t share my views or should only share them with like-minded people. But if I do as she suggested, my views go in an echo chamber and I forgo the opportunity for rich discussion and to see another perspective. While I might not change someone’s mind, I hope we walk away with a different perspective and the willingness to view every story with grace and compassion.\n\nI grew up loving Jesus and loving my country And now, as a pro-life religious conservative, I’m feeling bereft, without a political party who represents me. To be honest, I felt that way at the last election and even more so now. I disagree with the democratic platform on the issue of abortion. But I abhor the ongoing lack of respect for human life as demonstrated by the current president.\n\nAs we get closer to the U.S. Presidential election there is a contingent of pro-life Catholics and evangelicals who are making their departure from supporting Trump known. They are seeing that while Trump is considered the pro-life candidate, he is not pro-life. His actions against the marginalized show the truth.\n\nBeing pro-life means having a consistent life ethic from womb to tomb. It means valuing human life at all stages, not just when it’s convenient. Often when a new election looms on the horizon the discussion of life becomes a heated topic of debate: When should life be valued? Who is valued?\n\nI cannot in good conscience vote for a man who doesn’t value human dignity and decency. I cannot embrace the politics of a man who is willing to put children in cages and has not, as of yet, addressed the allegations of forced hysterectomies on Immigration and Custom Enforcement (ICE) detainees.\n\nI cannot support a leader who refuses to face the pandemic head on in hopes that it will disappear. The leader of our country mocked his political opponent for wearing a mask and then came down with the very plague he tried to ignore. Then he exposed his staff to the virus. That is not pro-life. It’s a flagrant display of ego and of disrespect for the people who work for him and the 209,000 dead that preceded his diagnosis.\n\nI cannot support a man who is unwilling to denounce white supremacy. It is not pro-life when President Trump refused to denounce white supremacy, but instead told the Proud Boys to “Stand back and stand by.” Pope Francis said in a message to the people of the United States after the killing of George Floyd: “We cannot tolerate or turn a blind eye to racism and exclusion in any form and yet claim to defend the sacredness of every human life.”\n\nWhen then candidate Trump mocked a disabled journalist during the 2016 campaign some people laughed, more were disgusted. His mockery is not pro-life. It points fingers and makes fun of people who are not neurotypical. I have a neurodivergent son and to know that he would be mocked or have his disability used against him is infuriating and heart wrenching. I expect more out of a leader. I expect compassion and restraint.\n\nHow can we support a pro-life candidate who is anything but? His hypocrisy is blatant.\n\nI am ardently pro-life. I hold that position because I believe in the dignity and the sanctity of human life. I believe we are made in the image of God and when we love one another we share the love of Jesus. I believe life is sacred. All life. I believe it begins in the womb and ends at natural death. At a lecture at Fordham University, Cardinal Joseph Bernardin shared this consistent life ethic: “The spectrum of life cuts across the issues of genetics, abortion, capital punishment, modern warfare and the care of the terminally ill.” In short, it’s valuing all life: the infirm, the dying, the disabled, the ones in cages whether they be prisons or at the border, the mentally ill.\n\nWe should show empathy, compassion, and grace when we talk to people about their situations. If we refuse to acknowledge the humanity, do people’s stories simply become pawns in our political stances?\n\nI believe we are called to serve one another. I believe in grace. I believe we shouldn’t be reduced to our mistakes. I believe that we are all broken, and that in our brokenness we can learn to see the whole person and embrace grace. Bryan Stevenson beautifully articulates how brokenness brings about compassion in his book Just Mercy: A story of Justice and Redemption. In his book, Stevenson describes our broken judicial system where too many are given a death sentence for crimes that they did not commit or crimes that do not warrant it.\n\nThe most politically active part of the pro-life position seeks an end to abortion. I fervently wish for an end for abortion. We also need to put in resources to empower women. This means consistent and available health care. This means jobs and housing. This means education. It means giving women the ability to support themselves and their children. It means support. We cannot demonize women for their decisions if we turn a blind eye to their needs. There are religious organizations that help women in crisis pregnancies and one of my favorites is The Gabriel Network whose slogan is “Empower Women.” They not only provide housing, but also angel friends who take women to their appointments, spend time with them getting to know them, and help by anticipating their needs whether it be friendship, baby supplies, or a hand to hold. The Gabriel Network also provides scholarships to help women further their education and careers.\n\nMany people see a pro-life position as a religious one. It is for me, but, it doesn’t have to be. Pro-life means honoring the sanctity of life at all stages. There are other organizations not affiliated with any religion that support a consistent life ethic such as New Wave Feminists and Rehumanize International. New Wave Feminists recognizes the “…full humanity of both the unborn child and the mother and looks to rebuild a culture that embodies legitimate justice for all.” Rehumanize International is a “…human rights organization dedicated to creating a culture of peace and life, and in so doing…seek to bring an end to all aggressive violence against humans through education, discourse, and action.”\n\nWhat if we set aside the presuppositions that being pro-life means that it is only a religious issue or a political stance? What if we used our time and energy to support, encourage, and embrace the sanctity of human life? When we stop pitting pro-choice and pro-life advocates against one another, we could do beautiful work together and shelter the homeless, clothe the naked, and feed the hungry. We can empower women, provide adequate healthcare, end racism, and advocate for social justice.\n\nAs I continue to read, listen, and learn, I embrace the dignity and sanctity of all human life. I acknowledge that if we want to change minds and change hearts, we have to be willing to listen to one another. Don’t discount the vote of the pro-life housewife who is working towards change.",
    "keywords": [
      "life",
      "women",
      "trump",
      "housewife",
      "human",
      "prolife",
      "believe",
      "support",
      "means",
      "sanctity",
      "political"
    ]
  },
  {
    "url": "https://level.medium.com/what-spike-lees-get-on-the-bus-got-right-and-wrong-about-the-million-man-march-2add4af00fc0?source=extreme_main_feed---------2-74--------------------6f9694cc_10ae_4a2d_bdf2_3d59c21df920-------",
    "title": "25 Years After the Million Man March, the Same Struggles for Black Liberation Persist",
    "publish_date": "2020-10-16 15:15:53",
    "authors": [
      "Julian Kimble"
    ],
    "summary": "And while many Black men agree that they need to do better for the sake of Black people, there’s rarely agreement about the particulars.\nThe movie follows a group of Black men who trek from South Central Los Angeles to Washington, D.C., for the events of October 16, 1995.\nWhile the Million Man March looms large in the film, it’s simply as backdrop; instead, Get on the Bus focuses on the interactions between the travelers.\nWhile the Million Man March may have been established in the spirit of progress, it wasn’t a progressive effort.\nAnd you can’t claim to want what’s best for Black people unless you want it for all Black people.",
    "text": "What Spike Lee’s ‘Get on the Bus’ Got Right — and Wrong — About the Million Man March\n\nA revisiting of the film highlights hurdles Black Americans have yet to overcome\n\nOssie Davis, Isaiah Washington, Andre Braugher, Charles S. Dutton, and a group of men standing next to a bus in a scene from the film ‘Get on the Bus,’ 1996. Photo: Universal/Getty Images\n\nBlack liberation has long been hindered by Black masculinity. Too often, ideas about how Black people can improve their circumstances don’t benefit anyone who isn’t male and heterosexual. And while many Black men agree that they need to do better for the sake of Black people, there’s rarely agreement about the particulars. This reality is one of the driving themes of Spike Lee’s 1996 film, Get on the Bus, which dropped exactly one year after its source of inspiration: the Million Man March.\n\nThe movie follows a group of Black men who trek from South Central Los Angeles to Washington, D.C., for the events of October 16, 1995. Among them are Evan (Thomas Jefferson Byrd), who as part of a court order is literally shackled to the son he neglected (De’Aundre Bonds); Xavier (Hill Harper), an idealistic film student who’s documenting the trip; Flip (Andre Braugher), an obnoxious working actor; Gary (Roger Guenveur Smith), a self-righteous LAPD officer; Kyle (Isaiah Washington) and Randall (Harry Lennix), a couple whose relationship is in dire straits; and Jeremiah (Ossie Davis), the moral center who regrets not attending the March on Washington more than 30 years prior.\n\nBy the end of the film, it’s unclear whether the dial has moved for certain characters — but 24 years later, several of the societal issues those characters represent are still stuck in place.\n\nWhile the Million Man March looms large in the film, it’s simply as backdrop; instead, Get on the Bus focuses on the interactions between the travelers. “People from all different socioeconomic, political backgrounds — which is a combustible mix,” Lee told Charlie Rose of the characters in 1996. Lee and writer Reggie Rock Bythewood depict the trip as a spiritual and emotional journey for the group based on the inevitable conflicts while they’re on the road. The characters represent a variety of issues and perspectives, some of which reveal a lingering resistance to change. By the end of the film, it’s unclear whether the dial has moved for certain characters — but 24 years later, several of the societal issues those characters represent are still stuck in place.\n\nWhile the Million Man March may have been established in the spirit of progress, it wasn’t a progressive effort. Its organizer, Nation of Islam leader Louis Farrakhan, is notorious for his sexism, homophobia, and anti-Semitism. Yet, despite the conservatism at its core, the march stands as a significant display of unity. Given the circumstances at the time — the persistent fallout from the crack epidemic, the 1994 crime bill that led to a surge in mass incarceration, and the notion that Black men were “under attack” in general — many chose to overlook Farrakhan’s radioactive history in favor of the greater good for which he fought.\n\nSome of the characters in Get on the Bus are willing to follow Farrakhan’s lead due to desperation. When Craig (Albert Hall), the original bus driver, tells trip organizer George (Charles S. Dutton) about his teenage daughter’s pregnancy, he acknowledges that he’ll be “all ears” if Farrakhan has a way to deal with the situation. It’s a shortsighted consideration, but Farrakhan and the NOI have long appealed to Black people who feel they’re out of options for whatever reason, so his outlook might catch the ear of a father who feels his daughter has strayed from the values he’d attempted to instill in her.\n\nHowever, the idea that the overarching principle of the march was bigger than Farrakhan himself is also expressed in Get on the Bus. “I guess if the brothers are gettin’ together — you know, talkin’ about some things, tryin’ to work things out — I wanna be there,” Gary tells Xavier, who’s interviewing as many people as he can about their decision to attend the march. Gary is guided by the idea that anyone interested in the march is willing to put whatever differences they have aside, but that proves extremely difficult in an atmosphere of people with different backgrounds, lifestyles, and personality types.\n\nTensions arise within the group as its members get to know one another. Gary’s father, who was also a cop, was murdered by a gang member; when Jamal (Gabriel Casseus) reveals that he’s a reformed Crip who found Islam after committing several murders, Gary vows to put Jamal behind bars once they return to L.A. It doesn’t matter that Jamal works to prevent kids from making the mistakes he made — Gary only sees a murderer akin to his dad’s killer. Meanwhile, Flip serves as a consistently volatile presence throughout Get on the Bus. He craves attention, so when Flip isn’t questioning Gary’s Blackness (his mother is White), he’s name-dropping, overcompensating for his insecurity through misogyny, and being brazenly homophobic. He attacks Randall and Kyle, neither of whom back down. And when the confrontation turns physical, he falls victim to his own hubris.\n\nYou can’t call for empowerment without understanding that capitalism isn’t the solution. You can’t vow to do better by Black women, then not only fail to do so, but fail to understand why they don’t feel safe. And you can’t claim to want what’s best for Black people unless you want it for all Black people.\n\nAs reprehensible as Flip is at times, he’s far more tolerable than Wendell (Wendell Pierce), a car dealership owner who joins the bus in Memphis and then quickly draws the ire of the group. “Every brother ain’t righteous,” a skeptical George says of Wendell, a proud Black Republican who disparages HBCUs as “nigga schools” and rants about bootstrapping his way to success in between cigar puffs. Wendell, who sees the march as a massive networking opportunity, is an example of how capitalism can be a gateway drug to Republicanism, and his diatribe leads to him being forcefully removed from the bus.\n\nThe overall message isn’t subtle: On the way to atonement, these men confront several issues inhibiting progress for Black people as a whole. They don’t make it to the march, but the ordeal still provides a sense of fellowship. Before their journey home, George gives an impassioned speech about the real work beginning once they return. Alas, camaraderie doesn’t equate to evolution or progress. While attitudes on some issues presented in Get on the Bus have shifted slightly — especially across generational lines — many of the same conversations still take place regularly because of how deeply matters like capitalism, sexism, misogyny, and homophobia are embedded in society.\n\nYou can’t call for empowerment without understanding that capitalism isn’t the solution. You can’t vow to do better by Black women, then not only fail to do so, but fail to understand why they don’t feel safe. And you can’t claim to want what’s best for Black people unless you want it for all Black people. Some of these problems are structural and thus difficult to change in 25 years’ time — but others require more personal accountability, and genuine progress is impossible if accountability is treated like a prison.\n\nGet on the Bus leaves viewers with the image of Evan Sr. and Evan Jr.’s shackles lying in front of the Lincoln Memorial. It’s a callback to the shackles, chains, and handcuffs seen at the beginning of the film, which imply that the experience has brought forth liberation, or at least the foundation for it. But with some distance from both the film and the Million Man March that inspired it, the state of the world suggests that in certain instances, the shackles remain in place — locked by the very hands they bind.",
    "keywords": [
      "persist",
      "characters",
      "liberation",
      "men",
      "black",
      "25",
      "million",
      "bus",
      "man",
      "struggles",
      "film",
      "cant",
      "issues",
      "isnt"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------6f9694cc_10ae_4a2d_bdf2_3d59c21df920-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://medium.com/change-your-mind/life-lessons-learned-in-my-40s-that-i-wish-i-could-tell-my-20-year-old-self-4ead0fcc721f?source=extreme_main_feed---------4-73--------------------6f9694cc_10ae_4a2d_bdf2_3d59c21df920-------",
    "title": "Life Lessons Learned in My 40’s That I Wish I Could Tell My 20-Year Old Self",
    "publish_date": "2020-08-25 13:42:44",
    "authors": [
      "George J. Ziogas"
    ],
    "summary": "If I could advise my 20-year old self?\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football.\nI’d tell my 20-year old self to be patient when it comes to career progression.\nBut if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.",
    "text": "Debt Isn’t Normal\n\nLet me finish! Of course, there’s normal debt, like your monthly mortgage repayment, car payments, etc. However, excessive personal loans and credit cards are not the way forward.\n\nIf you can’t afford to buy it with cash, then you have to ask how badly you need it. A credit card will help you build your credit score, but if you don’t know what you’re doing it will destroy it just as easily.\n\nIf I could advise my 20-year old self? Well, I’d tell him to educate himself about debt, finances, and money management.\n\nFriends > Relationships\n\nWe’ve all been in relationships that absorbed us entirely. Suddenly, you have no time for friends or anyone other than this new romantic partner.\n\nBy the time you get to your 40s, you realize that you lose friends every time. You put them down, but when you try to pick them up again, they’ve already moved on. Then, it feels as though it’s worth it because you think you’re in love and you want to spend all of your time with that person.\n\nThe reality is that your romantic partner should want you to spend time with your friends because they should take time with their friends, too. If neither of you is doing this, then there’s a larger underlying issue.\n\nKnow What You Want\n\nYou can save yourself a lot of heartache if you take time to know what you want in a romantic partner, and don’t settle.\n\nMovies and television give us this idea that love will be enough to get any relationship through everything. Those niggling doubts don’t matter, the annoying habits will fade into the background. However, little things like that start to become major issues when you’re with the wrong person.\n\nWhat traits do you look for in someone else? Someone trustworthy, healthy, positive, and shares your core values?\n\nKnow what you want and don’t settle for less.\n\nFriendship\n\nIt’s been three months since you met up with your good friend, but you know they’re still your friend because you both try your best to keep in touch despite how busy life has become.\n\nI wish I’d realized that sooner. That despite the fact that you see friends less often as you reach peak adulthood, your bond remains regardless. A friend’s a friend forever if you’re willing to put the work in.\n\nAs we grow older, people move away, they get married, they have kids, and they immerse themselves in their lives. While your inner circle might shrink, the other people aren’t just gone. You’ll be able to pick up right where you left off as soon as you meet up.\n\nThe Overrated Big Wedding\n\nYes, you want a major celebration. Yes, you want to make memories that last a lifetime.\n\nBut weddings get really expensive and no one should start a marriage in debt. There’s also the stress that wedding planning creates, which isn’t a great way to start a life together.\n\nI’d tell my 20-year old self to curate the guest list to death and focus on a meaningful wedding and a great honeymoon.\n\nLess Stuff Is Better\n\nDo you hold onto old stuff just because you can’t bear to throw it out? Me, too. I’m guilty of collecting a lot of different things — shot glasses, ball caps, mugs from my travels… it doesn’t mean anything. It doesn’t add anything to my life.\n\nYou don’t need a closet packed with labels. You don’t need dozens of watches or a different pair of shoes for every day of the week.\n\nLess stuff is better. Life is more meaningful than the things you own.\n\nManage Health\n\nYour body is the only one you’ll have for life. It’s much easier to stay in shape when you were in shape to begin with. It’s much more difficult to get in shape when you’ve let yourself go a bit.\n\nIf I could, I’d tell my 20-year old self to be more careful weight training, kickboxing, playing soccer, and football. My body has taken a lot of hits over the years and because of that, I’m guilty of gaining more than a few extra pounds that I can’t shift.\n\nThis doesn’t mean I’m desperate to get ripped like The Rock. I’d just like to get up off the couch without every joint in my body crunching and cracking. If only I’d taken care of myself earlier.\n\nCareer Patience\n\nThis isn’t the best time to be starting a career. It wasn’t particularly great in my day either. I knew what I wanted to do, but my college career didn’t reflect that. That left me at a bit of a disadvantage.\n\nI did get to where I wanted to go, but it took a lot longer than I expected it to. I struggled with anxiety and depression trying to catch my big break, and that negatively affected my relationship with my partner.\n\nI’d tell my 20-year old self to be patient when it comes to career progression. Of course, I might also suggest studying something more appropriate at college, since I pursued what I wanted to do despite my degree.\n\nThere’s No Such Thing As Perfection\n\nPeople brag about being perfectionists, myself included. But if I could go back in time and advise my 20-year old self, I’d tell him to knock it off because there’s no such thing as perfection.\n\nIt creates an impossible goal. One you’ll never achieve because you’ll never achieve perfection.\n\nChasing perfection will only lead you to one end, and that’s burn out. It may also prevent you from taking risks, too, because the fear of failure is too great.",
    "keywords": [
      "old",
      "tell",
      "life",
      "dont",
      "youre",
      "self",
      "id",
      "friends",
      "wish",
      "youll",
      "learned",
      "lessons",
      "40s",
      "theres",
      "20year"
    ]
  },
  {
    "url": "https://medium.com/mind-cafe/the-only-four-books-bill-gates-has-rated-five-stars-4352c0db50ca?source=extreme_main_feed---------5-73--------------------6f9694cc_10ae_4a2d_bdf2_3d59c21df920-------",
    "title": "The Only Four Books Bill Gates Has Rated Five Stars",
    "publish_date": "2020-10-04 13:38:54",
    "authors": [
      "Amardeep Parmar"
    ],
    "summary": "But in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre.\nIf you want to think like Bill Gates, read more about the world and less about how to make money.\nI’ve read the exclusive books before and cannot question the inspiration and education they provide.\nIf you haven’t yet, I hope you read these books and expand your mind.",
    "text": "When checking out the reviews for Jared Diamond’s Upheaval, the last name I expected at the top was the $100 billion Microsoft founder. I assumed it was a spoof account, surely he is too busy saving the world to have time for this kind of thing.\n\nBut in reality, Bill Gates is providing fascinating insights in reviews himself on Goodreads.\n\nLet’s face it, there are a lot of books with catchy titles and interesting blurbs that are mediocre. I’ve fallen prey to many of them myself. It’s what makes the allure of curated lists so powerful. People want recommendations from those who are successful and we feel we can trust. You’ll find many lists of Bill Gates’s recommendations online.\n\nBut I stumbled on a goldmine. He’s tracked 233 books and of all these only four received top marks. He’s a harsh critic with Yuval Noah Hariri’s 21 Lessons For The 21st Century earning only 3 stars.\n\nThey are all about how to make this world a better place and align with his philanthropy through the Melinda Gates Foundation. If you want to think like Bill Gates, read more about the world and less about how to make money.\n\nI’ve read the exclusive books before and cannot question the inspiration and education they provide. If you haven’t yet, I hope you read these books and expand your mind.",
    "keywords": [
      "world",
      "lists",
      "hes",
      "bill",
      "gates",
      "stars",
      "books",
      "rated",
      "read",
      "reviews",
      "yuval",
      "recommendations"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------6-73--------------------6f9694cc_10ae_4a2d_bdf2_3d59c21df920-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/26-year-old-coder-built-a-1-billion-app-in-2-years-after-following-his-girlfriends-advice-c6f378db1fd1?source=extreme_main_feed---------7-73--------------------6f9694cc_10ae_4a2d_bdf2_3d59c21df920-------",
    "title": "26-Year-Old Programmer Built a $1 Billion App In 2 Years — After Following His Girlfriend’s Advice",
    "publish_date": "2020-10-07 08:45:21",
    "authors": [
      "Alan Trapulionis"
    ],
    "summary": "26-Year-Old Programmer Built a $1 Billion App In 2 Years — After Following His Girlfriend’s AdviceHow a failed passion project turned into one of the most iconic apps of our timeKevin Systrom at Techcrunch Disrupt 2011.\nHis next stop was NextStop, a location recommendation app startup.\nAfter a year of honing his coding skills at the startup, Kevin decided to create a check-in app of his own.\n“I didn’t have a specific idea in mind… I mean, the idea was basically to start a check-in app… Who wasn’t starting a check-in app at that time?\nThat second ticket would become the best investment Kevin Systrom ever made.",
    "text": "26-Year-Old Programmer Built a $1 Billion App In 2 Years — After Following His Girlfriend’s Advice\n\nHow a failed passion project turned into one of the most iconic apps of our time\n\nKevin Systrom at Techcrunch Disrupt 2011. JD Lasica’s image\n\nKevin Systrom left Google frustrated.\n\nHaving spent almost three years as a product manager at the company, Kevin was eager to take on more responsibility and apply his nuclear drive to something tangible. Instead, he was offered by his boss to take up golf.\n\nHis next stop was NextStop, a location recommendation app startup. With FourSquare leading the way, check-in apps were all the rage in the late 2000s, and a small team meant Kevin could get more responsibility and take initiative.\n\nHe did. After a year of honing his coding skills at the startup, Kevin decided to create a check-in app of his own.\n\n“I didn’t have a specific idea in mind… I mean, the idea was basically to start a check-in app… Who wasn’t starting a check-in app at that time? […] It was probably the worst idea we could’ve been working on at the time.”\n\nA hostel in Mexico seemed like the right place to pursue his terrible idea, so Kevin packed his flip-flops and bought two tickets out of California — one for himself, one for his girlfriend. That second ticket would become the best investment Kevin Systrom ever made.\n\nKevin’s life story and quotes taken from these four sources.",
    "keywords": [
      "checkin",
      "girlfriends",
      "worst",
      "working",
      "responsibility",
      "billion",
      "startup",
      "following",
      "built",
      "programmer",
      "26yearold",
      "advice",
      "idea",
      "systrom",
      "kevin",
      "apps",
      "app"
    ]
  },
  {
    "url": "https://medium.com/the-ascent/how-to-make-enough-money-to-retire-in-the-next-5-years-6a7683ce5a16?source=extreme_main_feed---------9-73--------------------6f9694cc_10ae_4a2d_bdf2_3d59c21df920-------",
    "title": "How To Make Enough Money to Retire in the Next 5 Years",
    "publish_date": "2020-09-22 13:02:22",
    "authors": [
      "Tim Denning"
    ],
    "summary": "Take the money from your online business and pour it into cars and free drinks for attractive people you want to sleep with.\nWatch yourself lose your mind from all the money and the thought of it been taken away from you.\nTrade in the luxury life for a simple life that is enforced by how much money you have in your back pocket.\nServe people who have money, and who don’t have money.\nHave money allow you to buy back your time, instead of spending money on things that create a never-ending trail of debt.",
    "text": "1. Invest your money rather than save.\n\nSaving your money is stupid. Inflation will eat away at your money. You make money when you invest what you have in real assets.\n\n2. Understand the idea of purchasing power.\n\nGovernments print money to fight recessions, and fund wars. When they do, they take away the purchasing power of the money you have earned. The only way to repay the huge debt the US Government has racked up is by either: 1) Raising taxes 2) Printing money out of thin air.\n\nIncreasing taxes won’t repay the debt. That leaves option two which we’ve been doing as a global economy since 2008. You can overcome the attack on your purchasing power when you learn about inflation hedge assets.\n\n3. Lose all of your money.\n\nLet money show you another side to life. Start a business with your family. Choose a marketplace to sell on. Import goods from China. Buy low and sell high. Let the business become huge. Bring on investors and see that they are like having a boss whip you with a whip.\n\nBelieve you were destined to be a hot shot entrepreneur. Take the money from your online business and pour it into cars and free drinks for attractive people you want to sleep with. Become a total ass in the process. Treat people like absolute dirt. Tell poor people to work harder. Abuse random charities and tell them to stop asking for donations. Let your ego run your life.\n\nStart a second business using your overconfidence from the first business. Park your car each morning in the reserved car space for BMWs and Mercs only. Get out of the car and slam the door like a boss. Keep your head up so you look confident. Walk into the office and give advice to people twice your age. Take the intersection of luck and the rise of the internet for granted. Tell yourself you’re amazing and you built this empire because you’re brilliant.\n\nGo out on the weekends and try and pickup using your money. Flash $100 bills. Talk down to the bar staff. Tip service workers like they’re your slaves and you’re the emperor. Wear loafers that cost twice the weekly minimum wage of a person you call a ‘worker.’\n\nWhile all of this is going on, get greedy. Not just a little bit greedy. Treat your family like they serve you now. Don’t visit your grandparents or repair broken relationships with aunties and uncles. You’re too busy hustling and making money. Keep making the money. Watch the problems enter your life. Watch those problems get out of control.\n\nSee, in a matter of months, your money-making machine almost crumble because of one bad decision. Realize the end is near. Find yourself out on the streets late at night talking to your employees and predicting conspiracies. Watch yourself lose your mind from all the money and the thought of it been taken away from you. Watch your self-worth become your net-worth.\n\nShow up to the office one day and realize it’s all over. Say goodbye to the employees while you hold back tears. Pretend to be strong when you know you’re weak. Offer to give them references for their next job, knowing you’ll be lucky to find a job yourself.\n\nGo home when it’s all over. Sell the luxury car. Catch trains to visit friends. Learn what it’s like to have nothing. Check your bank account and see your savings evaporate fast. Trade in the luxury life for a simple life that is enforced by how much money you have in your back pocket. Accept the gift of an old car from a kind family member you neglected when you had your business.\n\nDrive their car back to your empty home. Pick up the car cleaning accessories you had for your BMW. Take the car down to the local car wash and see if you can shine it into something that resembles the BMW. Watch your worst nightmare, a big spider, jump out from underneath the car. Scream at the top of your voice and then watch it crawl away.\n\nFinish cleaning the car and notice how it hasn’t morphed into anything you could imagine in your dreams. Feel slightly grateful you even have a car for a few brief moments.\n\nReturn home and look for a job. Apply for everything. Watch the phone never ring and the thought of moving in with distant family, to survive, become a reality. Keep trying. Pick up the phone one Monday morning and talk to a nice lady named Fiona on the other end. Say hi and pretend to be okay when you’re not okay. Say yes to the job interview knowing something is wrong… you feel sick.\n\nSee the doctor. Try and find out what is wrong with you. Try all of their suggestions: a change in diet, fructose tests, colon inspections. Roll up the following week for the job interview. Have the thought of presenting your failed business journey almost bring you to tears. Watch your hands shake and feel the sweat drip down your back and stink out the interview room.\n\nGet a call saying you made it. You got a job in a call center working for a bank. Notice the contrast between making loads of money and earning minimum wage. Work at the bank for eight years. Learn about how money works. Serve people who have money, and who don’t have money.\n\nSpend your time after work learning about different assets: stocks, real estate, gold, digital currencies, bonds, cash. Apply the knowledge and invest what you earn. Take the money you earn from being a part-time writer and invest it, too. Feel like you’re smart with money. Watch the money grow. Make enough money to cover all of your expenses for a year, in advance. Feel no different.\n\nSimultaneously, work on yourself. Face your inner demons. Get help. Face mental illness too. Be kind to yourself. Realize you’re doing the best you can. Forgive yourself for your messy past, where you acted like a dictator with too much money. Say sorry to the people you hurt. Forgive people who you banned for life because they violated one of your rules. Forgive people for no reason at all.\n\nLook at what makes you happy now: family, your partner, messages from readers, mending of broken relationships.\n\nFeel what it’s like not to run towards money. Notice how fancy cars, houses and luxury goods have zero appeal to you. Take the simple things in life and let them change your life.\n\nHave money allow you to buy back your time, instead of spending money on things that create a never-ending trail of debt. Make the acquisition of wealth secondary. Focus on how you can be helpful. Get excited by all the people you can meet and do life with.\n\nLearn to make a difference rather than a profit.\n\n4. Become a content creator.\n\nContent creators are part of one of the biggest wealth transfers in history. Everything is content. Storytelling through words, videos, audio, photography and illustrations is a booming business.",
    "keywords": [
      "life",
      "family",
      "job",
      "retire",
      "car",
      "money",
      "watch",
      "feel",
      "work",
      "business",
      "youre"
    ]
  },
  {
    "url": "https://levelup.gitconnected.com/how-i-used-python-and-selenium-to-get-a-lifetime-supply-of-garlic-pizza-sticks-94abb66b71e1?source=home---------0---------------------127b6c09_aef0_4bfd_8eae_68484e634bd2-------7",
    "title": "How I Used Python and Selenium To Get a Lifetime Supply of Garlic Pizza Sticks",
    "publish_date": "2020-10-15 13:48:17",
    "authors": [
      "Sanjeet Chatterjee"
    ],
    "summary": "Especially when that pizza comes with Papa John’s very own garlic pizza sticks.\nSo I was ecstatic when I got the following email from them, after finishing my recent takeout:Papa John’s © Survey Email HeaderFree food!\nI used Python as my language of choice and I decided to use Selenium to make the survey bot.\nAnd there you have it — a potentially endless supply of garlic pizza sticks.\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy.",
    "text": "I don’t know about you but I love pizza. Especially when that pizza comes with Papa John’s very own garlic pizza sticks. So I was ecstatic when I got the following email from them, after finishing my recent takeout:\n\nPapa John’s © Survey Email Header\n\nFree food! I definitely needed to complete the survey…\n\nThe Survey\n\nPapa John’s © Feedback Survey\n\nI completed the survey as a normal human being and sure enough, I got a validation code for free garlic pizza.\n\nBut, being curious, I took another look at the original link. It seemed like the GUID parameter was a customer identifier. Guess what happened when I changed it to something random? A brand new survey popped up, waiting to be completed for more pizza sticks.\n\nI could do this forever! However, it did not seem like an efficient use of my time — let’s bring in some Selenium magic.\n\nThe Bot\n\nSelenium Webdriver is a browser automation framework that is primarily used for testing purposes. I used Python as my language of choice and I decided to use Selenium to make the survey bot.\n\nSet up\n\nI ran pip install selenium & pip install fake_useragent to get started. What is a user-agent? The MDN Web docs defines it as:\n\nThe User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.\n\nIt seemed like a good idea to randomize this request header in order to bypass any filtering/blocking mechanism that may exist — that’s where fake_useragent comes in.\n\nI also needed to download ChromeDriver in order to interface with the Chrome browser.\n\nCode\n\nThe basic selenium setup is as follows (with initialization done using a randomized user-agent):\n\nAfter randomizing the GUID parameter, the bot opens the web page and starts clicking. I added a one-second delay between each action to allow for the page to load, as well as acting like a vaguely normal human being.\n\nPart of the bot script.\n\nXPath\n\nXPath is a query language for selecting nodes from an HTML or XML document. For each of the survey questions, I utilized a real-time XPath testing tool to select the correct node to be clicked on by the bot. Of course, I gave Papa John’s a 5-star rating for everything.\n\nXPath Testing\n\nYou’re Welcome!\n\nAnd, finally, we have the validation code.\n\nPapa John’s © Feedback Survey\n\nExtracting the validation code.\n\nCelebration\n\nAfter half an hour of programming, I had finished my Python bot. Here is a gist containing the code, and here it is in action:\n\nThanks Papa John’s\n\nI entered each of the generated codes at Papa John checkout. And there you have it — a potentially endless supply of garlic pizza sticks.\n\nFree garlic bread for me and great reviews for the Papa John’s marketing department. Seems like a win-win situation to me! I even got to learn XPath and flex my Selenium skills during the process.\n\nPapa John’s © Checkout\n\nBut of course, I did not order any. As a moral human being, I instead notified Papa John’s of this loophole along with the proof-of-concept video — as of writing, they have not responded. However, the survey does not work anymore so I guess they got the message.\n\nAs a side note, I could have programmatically ordered 1000 garlic pizzas from each of the Papa John’s stores throughout the UK and single-handedly thrown Papa John’s into a frenzy. Can you imagine the chaos that would have caused?\n\nI probably did that in a parallel universe.\n\nThanks for reading.",
    "keywords": [
      "selenium",
      "garlic",
      "bot",
      "order",
      "human",
      "validation",
      "johns",
      "papa",
      "supply",
      "sticks",
      "used",
      "lifetime",
      "survey",
      "pizza",
      "python"
    ]
  },
  {
    "url": "https://towardsdatascience.com/its-time-to-say-goodbye-to-docker-5cfec8eff833?source=home---------1---------------------127b6c09_aef0_4bfd_8eae_68484e634bd2-------7",
    "title": "You Don’t Have to Use Docker Anymore",
    "publish_date": "2020-10-16 15:49:33",
    "authors": [
      "Martin Heinz"
    ],
    "summary": "This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\nUnlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker.\nThe third contender here is buildkit, which could be also called the next-generation docker build .\nIt's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... .\nIf on the other hand, you just want to know what are the options, then here goes:runc is the most popular container runtime created based on OCI container runtime specification.",
    "text": "You Don’t Have to Use Docker Anymore\n\nDocker is not the only containerization tool out there and there might just be better alternatives…\n\nIn the ancient times of containers (really more like 4 years ago) Docker was the only player in the container game. That’s not the case anymore though and Docker is not the only, but rather just another container engine on the landscape. Docker allows us to build, run, pull, push or inspect container images, but for each of these tasks there are other alternative tools, which might just do better job at it than Docker. So, let’s explore the landscape and (just maybe) uninstall and forget about Docker altogether…\n\nPhoto by Matteo Miliddi on Unsplash\n\nWhy Not Use Docker, Though?\n\nIf you’ve been a docker user for long time, I think it will take some persuading for you to even consider to switch to different tooling. So, here goes:\n\nFirst of all, Docker is a monolithic tool. It’s a tool that tries to do everything, which generally is not the best approach. Most of the time it’s better to choose a specialized tool that does just one thing, but does it really well.\n\nIf you are scared of switching to different set of tools, because you would have to learn to work with different CLI, different API or in general different concepts, then that won’t be a problem. Choosing any of the tools shown in this article can be completely seamless as they all (including Docker) adhere to same specification under OCI, which is short for Open Container Initiative. This initiative contains specifications for container runtime, container distribution and container images, which covers all the features needed for working with containers.\n\nThanks to the OCI you can choose a set of tools that best suit your needs and at the same time you can still enjoy using the same APIs and same CLI commands as with Docker.\n\nSo, if you’re open to trying out new tools, then let’s compare the advantages, disadvantages and features of Docker and it’s competitors to see whether it actually makes sense to even consider ditching Docker for some new shiny tool.\n\nContainer Engines\n\nWhen comparing Docker with any other tool we need to break it down by its components and first thing we should talk about are container engines. Container engine is a tool that provides user interface for working with images and containers so that you don’t have to mess with things like SECCOMP rules or SELinux policies. Its job is also to pull images from remote repositories and expand them to your disk. It also seemingly runs the containers, but in reality its job is to create container manifest and directory with image layers. It then passes them to container runtime like runc or crun (which we will talk about little later).\n\nThere are many container engines available, but the most prominent competitor to Docker is Podman, developed by Red Hat. Unlike Docker, Podman doesn’t need daemon to run and also doesn’t need root privileges which has been long-standing concern with Docker. Based on the name, Podman can not only run containers, but also pods. In case you are not familiar with concept of pods, then pod is the smallest compute unit for Kubernetes. It consists of one or more containers — the main one and so-called sidecars — that perform supporting tasks. This makes it easier for Podman users to later migrate their workloads to Kubernetes. So, as a simple demonstration, this is how you would run 2 containers in a single pod:\n\nFinally, Podman provides the exact same CLI commands as Docker so you can just do alias docker=podman and pretend that nothing changed.\n\nThere are other container engines besides Docker and Podman, but I would consider all of them a dead-end tech or not a suitable option for local development and usage. But to have a complete picture, let’s at least mention what’s out there:\n\nLXD — LXD is container manager (daemon) for LXC (Linux Containers). This tool offers ability to run system containers that provide container environment that is more similar to VMs. It sits in very narrow space and doesn’t have many users, so unless you have very specific use case, then you’re probably better off using Docker or Podman.\n\nCRI-O — When you google what is cri-o, you might find it described as container engine. It really is container runtime, though. Apart from the fact that it isn’t actually an engine, it also is not suitable for “normal” use. And by that I mean that it was specifically built to be used as Kubernetes runtime (CRI) and not for an end-user usage.\n\nrkt — rkt (“rocket”) is container engine developed by CoreOS. This project is mentioned here really just for completeness, because the project ended and its development was halted — and therefore it should not be used.\n\nBuilding Images\n\nWith container engines there was really only one alternative to Docker. When it comes to building images though, we have many more options to choose from.\n\nFirst, let me introduce Buildah. Buildah is another tool developed by Red Hat and it plays very nicely with Podman. If you already installed Podman, you might have even noticed the podman build subcommand, which is really just Buildah in disguise, as its binary is included in Podman.\n\nAs for its features, it follows same route as Podman — it’s daemonless and rootless and produces OCI compliant images, so it’s guaranteed that your images will run the same way as the ones built with Docker. It’s also able to build images from Dockerfile or (more suitably named) Containerfile which is the same thing with different name. Apart from that, Buildah also provides finer control over image layers, allowing you to commit many changes into single layer. One unexpected but (in my opinion) nice difference from Docker is that images built by Buildah are user specific, so you will be able to list only images you built yourself.\n\nNow, considering that Buildah is already included in Podman CLI, you might be asking why even use the separate buildah CLI? Well, the buildah CLI is superset of commands included in podman build , so you might not need to ever touch the buildah CLI, but by using it you might also discover some extra useful features (For specifics about differences between podman build and buildah see following article).\n\nWith that said, let’s see a little demonstration:\n\nFrom the above script you can see that you can build images simply using buildah bud , where bud stands for build using Dockerfile, but you can also use more scripted approach using Buildahs from , run and copy , which are equivalent commands to the commands in Dockerfile ( FROM image , RUN ... , COPY ... ).\n\nNext up is Google’s Kaniko. Kaniko also builds container images from Dockerfile and similarly to Buildah, it also doesn’t need a daemon. The major difference from Buildah is that Kaniko is more focused on building images in Kubernetes.\n\nKaniko is meant to be run as an image, using gcr.io/kaniko-project/executor , which makes sense for Kubernetes, but isn't very convenient for local builds and kind of defeats the purpose as you would need to use Docker to run Kaniko image to build your images. That being said, if you are looking for tool for building images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might be a good option, considering that it's daemonless and (maybe) more secure.\n\nFrom my personal experience though — I used both Kaniko and Buildah to build images in Kubernetes/OpenShift clusters and I think both will do the job just fine, but with Kaniko I’ve seen some random build crashes and fails when pushing images to registry.\n\nThe third contender here is buildkit, which could be also called the next-generation docker build . It's part of Moby project (as is Docker) and can be enabled with Docker as an experimental feature using DOCKER_BUILDKIT=1 docker build ... . Well, but what exactly will this bring to you? It introduces bunch of improvements and cool features including parallel build steps, skipping unused stages, better incremental builds and rootless builds. On the other hand however, it still requires daemon to run ( buildkitd ). So, if you don't want to get rid of Docker, but want some new features and nice improvements, then using buildkit might be the way to go.\n\nAs in the previous section, here we also have a few “honorable mentions” which fill some very specific use cases and wouldn’t be one of my top choices:\n\nSource-To-Image (S2I) is a toolkit for building images directly from source code without Dockerfile. This tool works well for simple, expected scenarios and workflows but quickly becomes annoying and clumsy if you need little too much customization or if your project doesn’t have the expected layout. You might consider using S2I if you are not very confident with Docker yet or if you build your images on OpenShift cluster, as builds with S2I are a built-in feature.\n\nJib is another tool by Google, specifically for building Java images. It includes Maven and Gradle plugins, which can make it easy for you to build images without messing with Dockerfiles.\n\nLast but not least is Bazel, which is anoooother tool by Google. This one is not just for building container images, but rather a complete build system. If you just want to build an image, then diving into Bazel might be a bit of an overkill, but definitely a good learning experience, so if you’re up for it, then rules_docker section is a good starting point for you.\n\nContainer Runtime\n\nLast big piece of a puzzle is container runtime which is responsible for, well, running containers. Container runtime is one part of the whole container lifecycle/stack, which you will most likely not going to mess with, unless you have some very specific requirement for speed, security, etc. So, if you’re tired of me already, then you might want skip this one section. If on the other hand, you just want to know what are the options, then here goes:\n\nrunc is the most popular container runtime created based on OCI container runtime specification. It’s used by Docker (through containerd), Podman and CRI-O, so pretty much everything expect for LXD (which uses LXC). There’s not much else I can add. It’s default for (almost) everything, so even if you ditch Docker after reading this article, you will most likely still use runc.\n\nOne alternative to runc is similarly (and confusingly) named crun. This is tool developed by Red Hat and fully written in C (runc is written in Go). This makes it much faster and more memory efficient than runc. Considering that it’s also OCI compliant runtime, you should be able switch to it easily enough, if you want to check for yourself. Even though it’s not very popular right now, it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release and considering that it’s Red Hat product we might eventually see as default for Podman or CRI-O.\n\nSpeaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine, but rather container runtime. That’s because CRI-O doesn’t include features like pushing images, which is what you would expect from container engine. CRI-O as a runtime uses runc internally to run containers. This runtime is not the one you should try using on your machine, as it’s built to be used as runtime on Kubernetes nodes and you can see it described as “all the runtime Kubernetes needs and nothing more”. So, unless you are setting up Kubernetes cluster (or OpenShift cluster — CRI-O is default there already), then you probably should not touch this one.\n\nLast one for this section is containerd, which is a CNCF graduating project. It’s a daemon that acts as an API facade for various container runtimes and OS. In the background it relies on runc and it’s the default runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime Interface (same as CRI-O), therefore it’s a good candidate for runtime of your Kubernetes cluster.\n\nImage Inspection and Distribution\n\nLast part of container stack is image inspection and distribution. This effectively replaces docker inspect and also (optionally) adds ability to copy/mirror images between remote registries.\n\nThe only tool which I will mention here that can do these tasks is Skopeo. It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O. Apart from the basic skopeo inspect which we all know from Docker, Skopeo is also able to copy images using skopeo copy which allows you to mirror images between remote registries without first pulling them to local registry. This feature can also act as pull/push if you use local registry.\n\nAs a little bonus, I want to also mention Dive, which is a tool for inspecting, exploring and analyzing images. It’s little more user friendly, provides more readable output and can dig (or dive, I guess) a bit deeper into your image and analyze and measure its efficiency. It’s also suitable for use in CI pipelines, where it can measure whether your image is “efficient enough” or in other words — whether it wastes too much space or not.\n\nConclusion\n\nThis article wasn’t meant to persuade you to completely ditch Docker, rather its goal was to show you the whole landscape and all the options for building, running, managing and distributing containers and their images. Each of these tools including Docker, has its pros and cons and it’s important to evaluate what set of tools suits your workflow and use case the best and I hope this article will help you with that.\n\nResources",
    "keywords": [
      "dont",
      "using",
      "podman",
      "build",
      "runtime",
      "tool",
      "docker",
      "anymore",
      "images",
      "container",
      "buildah",
      "run"
    ]
  },
  {
    "url": "https://medium.com/swlh/why-i-switched-to-linux-after-using-windows-for-10-years-247de78058ef?source=home---------2---------------------127b6c09_aef0_4bfd_8eae_68484e634bd2-------7",
    "title": "I Switched to Linux After Using Windows for 10 Years",
    "publish_date": "2020-10-15 20:37:20",
    "authors": [
      "Shalitha Suranga"
    ],
    "summary": "Files manager on Ubuntu (GNOME).\nScreenshot by the authorDeveloper-friendly EnvironmentIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\nIt is true that Linux requires some technical knowledge compared to Windows to get started.\nMoreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does.\nEven a simple menu option on the context menu motivates developers amazingly.",
    "text": "Minimalist and Futuristic Design\n\nThe latest versions of Ubuntu include the GNOME desktop environment which is my favorite. GNOME has a minimalist and futuristic design with consistent UI elements in all the places. Importantly, desktop icons and the Dock like features come as extensions, and there are many extensions out there which can be installed according to your preference. GNOME basically gives us what is really needed rather than over-complicating everything.\n\nFor example, just compare the file manager application on both Ubuntu and Windows.\n\nFiles manager on Ubuntu (GNOME). Screenshot by the author\n\nFile Explorer on Windows. Screenshot by the author\n\nDeveloper-friendly Environment\n\nIf you can throw money use macOS, If you would like to learn try Linux, otherwise use Windows as yet another computer user.\n\nIt is true that Linux requires some technical knowledge compared to Windows to get started. Whereas, it seems like the Canonical team is putting more effort to improve Ubuntu to cover general computer users’ needs by offering things such as the Ubuntu software store. However, this developer-friendly environment was a major reason for me to switch to Ubuntu. Ubuntu has helpful built-in tools: GNU C/C++ compiler collection, make, etc. Moreover, it runs containerization tools like Docker more efficiently than Windows, because the Linux architecture supports the containerization concept better than Windows does. The Linux ecosystem motivates us to use command-line tools for various situations.\n\nEven a simple menu option on the context menu motivates developers amazingly.",
    "keywords": [
      "using",
      "motivates",
      "minimalist",
      "switched",
      "tools",
      "manager",
      "menu",
      "gnome",
      "screenshot",
      "windows",
      "ubuntu",
      "linux"
    ]
  },
  {
    "url": "https://andrecronje.medium.com/unpacking-my-involvement-in-defi-cdb6479e337d?source=home---------3---------------------127b6c09_aef0_4bfd_8eae_68484e634bd2-------7",
    "title": "Unpacking my involvement in DeFi",
    "publish_date": "2020-10-15 08:33:14",
    "authors": [
      "Andre Cronje"
    ],
    "summary": "I don’t build for speculators.\nstage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective.\nThere are over ~22 “yearns” on ETH mainnet.\nThere are over ~5 “YFIs” on ETH mainnet.\nThere are over ~9 “v1 y tokens” on ETH mainnet.",
    "text": "I don’t build for speculators.\n\nI wanted to start with a concise statement and the above is it. I’ve been in this space for awhile now, I’ve been wrong more times than I’ve been right, I’ve failed more times than I’ve succeeded. I’ve had conceptual ideas that failed in practice. I do not build to make a number go up.\n\nI build for developers. My core goal is tooling, to enable other developers to easily be able to use/inherit templates I design and create products out of that. I have, on numerous podcast, mentioned my concern with the misalignment of incentives when speculators are involved, those interviews will add more flavor, I will not delve into this for now.\n\nTokens are not stocks.\n\nPeople treat them like stocks, in defi, tokens are a coordination mechanism. If you have tokens, it is because you want to be a contributor, not a bystander. There is this concept of “community”, and I think that concept is causing friction, it should not be team and community, but instead contributors. There is no separation, they are one and the same.\n\nTokens, when designed for their specific system, don’t care about their price, it doesn’t matter, all they care about is that 1 = 1. It doesn’t matter if the token is being traded externally to the system at 1c or $1.\n\nDevelopment process.\n\n“Test in prod”, I have come to regret this statement, anyone that has listened to some of my interviews, will know I have this statement so that people use caution. It exists to deter people from just using systems without investigation. It does NOT mean that I don’t test. Let me explain my development cycle, stage 1 local tests, this is what makes sure everything is functional and works as planned. stage 2, interaction testing, this makes sure that everything functions from a 1 user interaction perspective. stage 3, composite testing, this compares interaction between multiple parties. stage 4, fake prod, this replicates ETH mainnet and fake deploys contracts and checks their interaction. stage 5, integration testing (deploy to mainnet), this allows real world testing, transactions, gas limits, volume, tooling interaction. stage 6, prod deployments (this coincides with UI’s, medium articles, and whatever other documentation I manage time for).\n\nThere are over ~22 “yearns” on ETH mainnet. There are over ~5 “YFIs” on ETH mainnet. There are over ~9 “v1 y tokens” on ETH mainnet. Testing is an iterative process. I have discovered issues on mainnet I never encountered locally, I have failed to replicate mainnet systems locally, and I have encountered errors locally that I can’t replicate on mainnet.\n\nEven when we launched YFI, I did not incentivize yswap, I found this system to still be too premature and didn’t want to expose users to the risk of providing liquidity to it. y tokens and y pool on the other hand have existed since March, and were well tested and proven. Even they went through multiple production cycles.\n\nProject value.\n\nEMN was an economic exploit, the code functioned as designed. The contracts went through my normal testing cycles and were at stage 5, on that day alone I had deployed ~2 different versions.\n\nLBI is working as intended, it still is, and I am still using it to create a real world example of how such templates function.\n\nPeople confuse price with functionality. LBI is a perfect example, people bought LBI off of uniswap, inflating the price, something that a rational actor that understood how the system worked should never have done, this caused a price decline, and this is seen as LBI being a “failed” project. It isn’t, I’m still actively working on it, and it will become the basis of a much bigger product that will be part of the yearn brand (if they wish to adopt it).\n\nI am not yearn.\n\nI am grateful to have been part of something amazing that had occurred, but in no way did I create yearn. Consider how big the ecosystem has become, consider all the websites, tooling, newsletters, forum, discord, telegram, and active development on github. None of these are done by myself. I am a rapid prototyper and I will continue to be one.\n\nThe yearn team is far more skilled and capable than I am, and anyone that thinks yearn is dictated, led, or in anyway dependent on me, is doing yearn a disservice. I am happy to be a contributor to something much bigger.\n\nResponsibility.\n\nThis is a nuanced topic. But I think it stems a lot from the first point I made in this article. It is a misalignment of target audience. As requested I had stopped using twitter, and I had stopped using my deployer account for deployments. However with LBI this did not seem to circumvent anything. I am still not sure how to proceed on this topic, I wish to develop, deploy, and share what I build with fellow developers so that we may collaborate and build more, I have stipulated that the deployments are for devs and researchers. I have added full disclaimers to even my deployments, but these still seem to fall short. I am torn how to proceed at this point.\n\nRational Actors.\n\nThis is a word that has been coming up a lot in my discussions. I accept I have been naïve on this point. EMN I attributed to certain social actors creating a story around it which caused rational actors to become involved. LBI showed me I was completely wrong. Logically I cannot conceive why people would engage with something they don’t understand, I am an actor that doesn’t skip the tutorial, because how else can I play the game correctly? I have however come to understand this is not true for a portion of defi. The open nature of these systems is a double edged sword. I have more thinking to do on this.\n\nWhat the future holds.\n\nI plan to continue building. I see more things to build today than I did 3 months ago, but I cannot do these alone, I need fellow builders to collaborate, I need teams to help pick up ideas and turn them into full fledged products. While I doubt what happened with yearn, seeing an entire team form around it, will happen again, that is truly my wish.\n\nThere is distinctly a conflict in the space at the moment, that I am struggling to concisely summarize, and as such, I have no idea how to actually address it.\n\nBut I do consider the conflict a human one, and not a technical one, I don’t foresee ETH disappearing, and I don’t foresee builders stopping, and I will continue to build. Some of it will be useful, some of it will end up failures. But I think there is more value in trying, even if it is a failure, than all the critics deeming it so.",
    "keywords": [
      "dont",
      "eth",
      "lbi",
      "interaction",
      "build",
      "unpacking",
      "yearn",
      "stage",
      "defi",
      "mainnet",
      "testing",
      "involvement",
      "ive"
    ]
  },
  {
    "url": "https://forge.medium.com/to-become-happier-ask-yourself-these-two-questions-every-night-ec4fb5e648ee?source=home---------5---------------------127b6c09_aef0_4bfd_8eae_68484e634bd2-------7",
    "title": "To Become Happier, Ask Yourself These Two Questions Every Night",
    "publish_date": "2020-10-14 05:32:33",
    "authors": [
      "Alexander M. Combstrong"
    ],
    "summary": "To Become Happier, Ask Yourself These Two Questions Every NightThe one-minute exercise can make a profound differencePhoto: skaman306/Getty ImagesWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living.\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day.\nI’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook.\nNow ask yourself another question:If your first answer was [your answer plus one], what would be different?\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work.",
    "text": "To Become Happier, Ask Yourself These Two Questions Every Night\n\nThe one-minute exercise can make a profound difference\n\nPhoto: skaman306/Getty Images\n\nWe often think the key to a happier life is to make big, sweeping changes to the one we’re currently living. But focusing only on grand moves — changing our careers or overhauling our personalities, for example — often just leaves us feeling overwhelmed. A better strategy is to make incremental improvements. Over time, small tweaks can lead to a profound difference.\n\nThrough solution-based therapy, I learned about a pair of questions that can help you identify exactly what you need to do to move forward each day. I’ve been asking myself these questions every night, right before bed — research shows that our brains can make creative connections while we sleep — and I’ve noticed an incredible difference in my mood and outlook. Try them yourself:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nDon’t dwell on the question too much. You don’t need to provide a list of reasons why — just give a number based on your gut feeling.\n\nIf your answer is 10, congratulations. There’s no need for you to be here.\n\nIf it’s anything less than 10, here comes the next part: Take whatever number you came up with and add one.\n\nNow ask yourself another question:\n\nIf your first answer was [your answer plus one], what would be different?\n\nHere’s an example of what it might sound like in your mind:\n\nOn a scale of 1–10, how happy are you with your life today?\n\nYour answer: 6\n\nIf that answer was 7, what would be different?\n\nThe wording is important. The question “What would be different?” sends your brain on a mission to search for small, achievable changes you can implement to make your life just a little bit better the next day. Maybe you’ll decide to get outdoors for 20 minutes, or call an old friend for a quick catch-up session. Do this consistently over the weeks and months and those changes will start to add up.\n\nWhy just add one? Because it’s achievable. If you add more than that — if you try to go from a 3 to a 9, for example — you’ll probably feel anxious about the huge undertaking and decide to put it off for later.\n\nThe great thing about these two questions is that they help you improve your life in a way that doesn’t feel like work. Asking them is a one-minute habit that you can start tonight — and eventually, you may find that your happiness number has gone up. If you once had a long streak of 7s, you may now find your days mostly 8s and 9s (you might even have a handful of 10s sprinkled in there). Without doing anything drastic, you’re now a happier version of you.",
    "keywords": [
      "life",
      "answer",
      "changes",
      "night",
      "example",
      "youll",
      "add",
      "happier",
      "need",
      "number",
      "questions",
      "ask"
    ]
  },
  {
    "url": "https://gen.medium.com/2020-has-been-bad-but-things-are-going-to-get-worse-2e083903b0f4?source=extreme_main_feed---------0-74--------------------38c4d0f0_ee2e_4a44_983a_c6e460073e85-------",
    "title": "2020 Has Been Bad. But Things Are Going to Get Worse.",
    "publish_date": "2020-10-15 16:16:45",
    "authors": [
      "Colin Horgan"
    ],
    "summary": "2020 Has Been Bad.\nBut Things Are Going to Get Worse.\nThe pandemic revealed our society’s failings.\nPhoto: Markus Spiske/UnsplashEarlier in 2020, as the lockdowns arrived, time started to feel warped.\nDisparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.",
    "text": "2020 Has Been Bad. But Things Are Going to Get Worse.\n\nThe pandemic revealed our society’s failings. We’re running out of time to fix them.\n\nPhoto: Markus Spiske/Unsplash\n\nEarlier in 2020, as the lockdowns arrived, time started to feel warped. We began to ask ourselves whether we were living in the past or the present or whether we were caught somewhere in between. This feeling of inertia was a function of recognizing a time lag between when the virus arrived and when we realized it was here.\n\nThe coronavirus case counts we saw updated every morning were already history — reality as it was two weeks prior. What was happening had already happened but also had not happened yet. Gradually, as the weeks and months followed, we learned more about the virus, including how long it had actually been around us — as well as how unprepared our society and our systems were for its arrival.\n\nThe pandemic has proven to be a clarifying force. While it will likely change some aspects of our society, before it does, it is first revealing what kind of a society we already had: one that is teetering on decaying foundations that have either gone unseen or have been deliberately ignored for decades.\n\nIn nearly every Western democracy it has hit, the pandemic has disproportionately affected people of color, the poor, and the elderly. Sometimes, like in the U.S., it’s hit them all. In short, the virus has shown us where our most egregious inequalities lie. Disparities of economics, education, health care, and justice have appeared in 2020 as more pronounced than ever before.\n\nWe are living on a neglected structure, poorly constructed decades ago and then left largely unchecked. Even when we had the chance, after its near-collapse in 2008, to reassess the system, we didn’t bother and instead were steered for another decade in an ideological vacuum, maybe the last true product of late capitalist boredom. This long-standing failure to account for the obvious disparities at the heart of our society is probably why the pandemic will likely create a so-called K-shaped recession — one wherein “big companies and rich families have largely recovered, whereas mom-and-pops and the moms and pops who run them are living through a second Great Depression,” as Annie Lowrey wrote recently at The Atlantic.\n\nWe live every day under a looming sense of delayed inevitability. How long can it go on?\n\nThe mechanisms we have that ought to help us address those disparities, like politics, law, or journalism, have also been revealed to be heavily damaged. Our democracies are stressed, not from external enemies as much as from internal rot. Rebuilding them would require us to inhabit a shared reality. Thanks somewhat to our current acoustic information sphere dominated by platforms of fantasy, we don’t have one.\n\nThat lag time we noticed in the spring now feels more familiar, if not constant. We live every day under a looming sense of delayed inevitability. How long can it go on?",
    "keywords": [
      "bad",
      "2020",
      "long",
      "revealed",
      "disparities",
      "pandemic",
      "living",
      "going",
      "worse",
      "weeks",
      "virus",
      "society",
      "things",
      "sense"
    ]
  },
  {
    "url": "https://gen.medium.com/amy-coney-barretts-confirmation-could-cause-a-right-to-privacy-domino-effect-e0e721c2c36a?source=extreme_main_feed---------1-74--------------------38c4d0f0_ee2e_4a44_983a_c6e460073e85-------",
    "title": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect",
    "publish_date": "2020-10-15 18:07:16",
    "authors": [
      "Jill Filipovic"
    ],
    "summary": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino EffectIf there’s no right to privacy, a whole line of rulings goes out the windowAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation.\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion.\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\nIf Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it.",
    "text": "Amy Coney Barrett’s Confirmation Could Cause a ‘Right to Privacy’ Domino Effect\n\nIf there’s no right to privacy, a whole line of rulings goes out the window\n\nAmy Coney Barrett speaks during the Senate Judiciary Committee confirmation. Photo: Pool/Getty Images\n\nIf there is one stunningly clear takeaway from the hearings to confirm Amy Coney Barrett to the Supreme Court, it’s this: Enjoy your rights to bodily sovereignty and sexual privacy while you have them. Because if Barrett is confirmed to the Supreme Court, they may not last long.\n\nSupreme Court confirmation hearings are often farcical displays. A nominee, chosen from among the finest legal minds in the land and auditioning for a job to write legal opinions that have the power to profoundly shape Americans’ lives, sits before the Senate Judiciary Committee and purports to have few opinions at all on the cases and issues that are the most controversial and oft-discussed inside the legal academy and out of it. But Barrett brings the dissembling and disingenuous refusal to answer direct questions to a new level. No Supreme Court nominee in memory has been so evasive. And where Barrett hedges the most are the biggest tells: on the Affordable Care Act, on presidential powers in elections, and on reproductive rights and sexual privacy.\n\nBarrett was hand-picked by conservative organizations because, among other things, she is against the right to abortion. She has said so herself, joining the “pro-life” faculty group at Notre Dame Law School, and signing an ad that said, “It’s time to put an end to the barbaric legacy of Roe v. Wade and restore laws that protect the lives of unborn children.” That isn’t a statement of a personal view; that’s a demand for the courts to act. And if confirmed, Barrett will be one of the nine people in the country with the power to do what the letter she signed demands.\n\nShe has already shown us her intentions. President Donald Trump believes her. Senate Republicans believe her. We should believe her, too.\n\nDiscerning what Barrett will do if she is elevated to the court is made a little more complicated by the fact that Barrett suddenly refuses to speak about her views at all. Neither she nor the president nor her Republican proponents in the Senate want her to be too transparent on the abortion question. Roe v. Wade is, after all, the law of the land, and most Americans do not want it overturned. The election concludes in just 20 days — a clear argument against holding these hearings now, but one Republicans have disregarded. If Barrett answers honestly in the confirmation hearings — if she says that she believes Roe was wrongly decided — then Republicans are going to face a lot of demands to vote no on her confirmation, and have a lot of angry voters on their hands.\n\nAnd so instead, we are treated to this joke of a hearing, where we all pretend that Barrett doesn’t believe exactly what she has repeatedly said she believes.\n\nBarrett is not the first Supreme Court nominee to dodge the abortion question. But she is even less committal than most. Ruth Bader Ginsburg answered clearly in her confirmation hearings that she believes Roe was rightly decided; Sonia Sotomayor agreed that Roe was settled law. Barrett won’t do that.\n\nTo add insult to injury, Senate Republicans (and a few Democrats) have spent precious minutes fawning over Barrett’s family and her ability to have both a career and a large family, something men have done for centuries without much comment. Over and over, conservative senators called Barrett a role model or an inspiration for girls and women (as if boys and men can’t look up to a woman). There is something particularly pernicious about demanding that women laud Barrett, a woman more in the mold of anti-feminist Phyllis Schlafly than women’s rights trailblazer Ruth Bader Ginsburg, as an icon of female accomplishment and professional possibility. It’s no coincidence that in the wake of Roe v. Wade and earlier cases establishing a right to contraception access, American women surged toward greater independence, going to college and into the workforce in record numbers. The lessons of safe abortion and readily available contraception reverberate around the world: When women can plan their families, women thrive. We live longer. We are far less likely to die in childbirth, and our children are less likely to die, too. We are more likely to go to school; so are our daughters. We are less likely to be trapped in abusive relationships, and less likely to be stuck in poverty. Our families are more prosperous. Our communities are healthier.\n\nIf Griswold goes–and Griswold is at risk the day Roe goes–the rest of the line of privacy rights jurisprudence could go with it.\n\nFeminists have fought long and hard for these rights — including for the right of women to choose to have large families, as Barrett has, even if they are not worth nearly $2.6 million, as Barrett is, but are instead struggling to keep their children safe and secure. Republicans and conservatives like Barrett have cheered on large (white) families, while refusing to do much of anything to help out when families struggle. Feminists have tried to clear the way for women to make their own reproductive choices — to have children or not, without state interference or professional discrimination. Barrett has benefited from that feminist work, which is why she is now in a position to undermine it. Being told that feminists and women generally should appreciate that and admire her is a hard pill to swallow.\n\nBarrett won’t be the first anti-abortion judge on the court (although if Republicans are looking for firsts, she would be the first staunchly anti-abortion woman). But her hostility to reproductive rights extends far beyond Roe and the right to abortion. In the hearings, Barrett couldn’t answer whether she believed Griswold v. Connecticut, the case that extended contraception access to married women, was rightly decided. We know that her mentor, Antonin Scalia, believed Griswold was indeed decided wrongly, and given the chance, would likely have overturned it. We know Barrett has said that, while she is her own woman, she believes Scalia got most of his decisions right. While Roe gets a lot of press, Griswold is at the heart of many of the court’s most significant decisions — it was the first case that fully laid out the right to sexual privacy, which has been understood since then to include the right of any woman to use contraception and have an abortion; the right of people of the same sex to have consensual intercourse; and the right of individuals to marry someone of the same sex. If Griswold goes — and Griswold is at risk the day Roe goes — the rest of the line of privacy rights jurisprudence could go with it.\n\nGriswold, Barrett said in the hearings, is not under threat; she said it was “unthinkable” that anyone would challenge it. And she’s right that it’s been a while since states have criminalized contraception. But they haven’t done that because abortion rights and Roe have taken the bulk of the focus of the anti-abortion movement. It’s worth noting, though, that most mainstream anti-abortion groups do not support contraception access; some are publicly opposed to it, and some falsely characterize common contraceptive methods as “abortifacients.” These same groups have pushed legislation that establishes personhood at the moment of conception, something at odds with the medical definition of pregnancy, but that could outlaw several of the most common and effective forms of birth control and even criminalize in-vitro fertilization. That’s all very far from an academic exercise. It is not “unthinkable.” It is, in fact, part of a well-thought-out plan. If Roe is overturned, there’s little to stop conservative groups from pressing forward and coming for contraception next — or marriage equality, or the right to have consensual intercourse with an adult of the same sex.\n\nThe message from Barrett’s confirmation hearing was clear: This is all on the line. She does not believe there is a constitutional right to sexual privacy. The question is whether the weight of the precedent — dozens of cases over five decades, millions of Americans who rely on what they believe to be their right to use contraception, end unwanted or dangerous pregnancies, have sex, and get married — will be enough to tip Barrett’s originalist scales toward upholding the law as it stands.\n\nBarrett showed us who she is: a woman who will not affirm even the least contested rights to sexual privacy and family planning. Which means even the least contested of those rights could be up for grabs with Barrett on the Supreme Court.",
    "keywords": [
      "barretts",
      "women",
      "confirmation",
      "effect",
      "cause",
      "barrett",
      "court",
      "griswold",
      "domino",
      "privacy",
      "rights",
      "amy",
      "coney",
      "hearings",
      "contraception",
      "right",
      "roe"
    ]
  },
  {
    "url": "https://elemental.medium.com/my-therapist-says-all-relationships-are-impossible-d4c61f7df249?source=extreme_main_feed---------2-74--------------------38c4d0f0_ee2e_4a44_983a_c6e460073e85-------",
    "title": "My Therapist Says All Relationships Are Impossible",
    "publish_date": "2020-10-14 05:32:29",
    "authors": [
      "Naveen Kumar"
    ],
    "summary": "My Therapist Says All Relationships Are ImpossibleIt’s okay to lose a friendshipThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement.\nMy therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!).\nMy therapist put it bluntly: “All relationships are impossible.”All relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\nLabels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\nThis type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences.",
    "text": "My Therapist Says All Relationships Are Impossible\n\nIt’s okay to lose a friendship\n\nThis summer I reached an impasse with a close friend, who is white, over the Black Lives Matter movement. In the decade we’ve known each other, I had always felt comfortable talking to him about my own experience of otherness as an Indian American. But when I pointed to his whiteness as a privilege he ought to examine, he grew defensive, blew up, and ghosted.\n\nI’m not someone who falls out with friends easily or often. The few times it has happened, my instinct is to ask, “How did I get myself into this?” or “Why didn’t I see this coming?”\n\nWhen any situation in my life goes awry, I tend to perseverate, fixating on how I might have caused it to fly off the rails. “Am I a bad judge of character?” I think. My therapist is used to me trying to locate responsibility within myself (and of course, sometimes we find it there!). But when it comes to the shock of a breakup, whether with a friend or a romantic partner, it’s the fantasy that we can ever fully know someone, or achieve a kind of perfect unity that’s to blame.\n\nMy therapist put it bluntly: “All relationships are impossible.”\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\nHis statement was one of those breakthrough moments when my jaw dropped and I felt an immediate sense of relief. The existentialism of it thrilled me, and its practical application made perfect sense. In every relationship, there will always come a conflict (likely many over time) that indicates an unbridgeable distance between two people. Labels like “best friend,” “partner,” and, of course, “parent” represent fantasies of unity and wholeness that are always, ultimately unattainable.\n\nAll relationships come with the inherent futility of achieving total communion, and understanding as much is key to sustaining them.\n\n“A lot of the things that the world tells us about what a relationship is supposed to be present an ideal that everyone feels they’re failing to live up to,” says Jamieson Webster, PhD, a psychoanalyst in New York City and author of Conversion Disorder: Listening to the Body in Psychoanalysis. It’s not just that the messages we get from pop culture, about fairy tale romance and lifelong BFFs, are unrealistic. The very idea that any relationship, no matter how close, can make us less alone or separate from each other is perhaps the ultimate human fantasy.\n\n“Separation and difference are very hard, including the capacity to understand being alone,” Webster says. “There is so much fantasy that tries to cover over ‘aloneness,’ which is simply a factual reality.”\n\nWhen we’re able to more clearly understand our innate separateness, we can also more readily accept that personal differences are bound to arise in every relationship. The question then becomes how two people acknowledge the essential distance between them, communicate their feelings about it, and reach a mutual resolution that doesn’t attempt to paper over it. Sometimes it’s possible to bridge the gap and continue forward together; in other cases, it may be time to move on. “Whether with a friend or a partner, it’s about what you build on the basis of your differences,” Webster says. “Because you are two unique people with different histories and different pleasures and pains.”\n\nRecognizing the impossibility of a “perfect” relationship is also useful when we seek to build new ones. While swiping through dating profiles, for example, it’s easy to point to a picture you don’t particularly like or the fact that someone prefers cats over dogs as reasons why it would never work out. This type of everyday sorting is also based on what my therapist calls that impossible fantasy: that any two people in a relationship can be perfectly aligned and without irreconcilable differences. How many potential connections have we cut off at the pass due to preconceived notions of compatibility?\n\nBreakups are hard, even and especially with close friends. But they’re also the surest way to recognize, and even honor, the truth of our individuality. “Breakups really propel people forward in terms of their development,” Webster says. “Whether it’s with friends or partners, a breakup is a time to recover yourself and find your separateness,” something you may have been struggling to find inside the relationship. That doesn’t mean we shouldn’t allow ourselves to feel hurt and disappointed, or take responsibility for our role in the process. But rather than frame a breakup as a personal failure, we can acknowledge it as a reflection of one of life’s most essential truths.",
    "keywords": [
      "differences",
      "partner",
      "therapist",
      "fantasy",
      "impossible",
      "friend",
      "relationship",
      "webster",
      "friends",
      "relationships",
      "perfect"
    ]
  },
  {
    "url": "https://entrepreneurshandbook.co/elon-musks-2-rules-for-learning-anything-faster-cf9a79fba35?source=extreme_main_feed---------3-73--------------------38c4d0f0_ee2e_4a44_983a_c6e460073e85-------",
    "title": "Elon Musk’s 2 Rules For Learning Anything Faster",
    "publish_date": "2020-09-02 14:12:37",
    "authors": [
      "Jake Daghe"
    ],
    "summary": "Elon Musk’s 2 Rules For Learning Anything FasterA structure to help you take over entire industriesLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\nHe and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\nHis learning methods aren’t that regal.\nIn fact, his two rules for how to learn anything faster can be implemented by anyone at any time.",
    "text": "Elon Musk’s 2 Rules For Learning Anything Faster\n\nA structure to help you take over entire industries\n\nLearning is one of the overcommunicated but underleveraged tools of the common entrepreneur.\n\nEveryone talks about methods of learning, but few people find realistic and authentic techniques that actually yield a net profit in the information and application categories.\n\nElon Musk has broken through that barrier with learning techniques that have proven successful not just once, but time and time again.\n\nA good argument could be made that Musk has leveraged his learning by becoming a disruptor. He and his companies have shifted entire industries, including the transportation sector, the energy sector, and the space sector.\n\nHe recently announced at a press conference that his plans for his biotech company Neuralink are progressing quite nicely, hinting at yet another sector which his hands will likely shift in the coming years.\n\nYes, Musk is a once-in-a-lifetime genius. Likely on the same levels as Nikola Tesla, Albert Einstein, Isaac Newton. He has a different way of viewing problems than the average entrepreneur.\n\nOf course, he reads hundreds of books. He works with top-level thinkers. He has astronomical levels of funding to put towards his every whim. But that’s not what makes him a great learner.\n\nHis learning methods aren’t that regal. In fact, his two rules for how to learn anything faster can be implemented by anyone at any time. Including you.\n\nYou, too, can be a rocket scientist, if you wanted. Here’s how.",
    "keywords": [
      "learning",
      "likely",
      "rules",
      "including",
      "sector",
      "musk",
      "entire",
      "levels",
      "methods",
      "techniques",
      "faster",
      "elon",
      "musks"
    ]
  },
  {
    "url": "https://towardsdatascience.com/real-time-time-series-anomaly-detection-981cf1e1ca13?source=extreme_main_feed---------5-73--------------------38c4d0f0_ee2e_4a44_983a_c6e460073e85-------",
    "title": "Real-Time Time Series Anomaly Detection",
    "publish_date": "2020-10-14 14:31:51",
    "authors": [
      "Marco Cerliani"
    ],
    "summary": "In this post, we explore different anomaly detection approaches that can scale on a big data source in real-time.\nTsmoothie is a python library for time series smoothing and outlier detection that can handle multiple series in a vectorized way.\nThe convolutional smoother uses weights generated using predefined windows function (linear, hanning, hamming, bartlett, blackman).\nThe exponential smoother uses weights generated with an exponential function.\nRespectively, two different data structures are taken into account: random walks series and seasonal series with no trend.",
    "text": "As much as it has become easier over the years to collect vast amounts of data across different sources, companies need to ensure that the data they’re gathering can bring value. To aid insight collection from the data, machine learning and analytics have become trending tools. Since these domains require real-time insights, an abundance of unwelcome data can create real issues.\n\nBefore decisions are made, and critically, before actions are taken, we must ask: are there anomalies in our data that could skew the results of the algorithmic analysis? If anomalies do exist, it is critical that we automatically detect and mitigate their influence. This ensures that we get the most accurate results possible before taking action.\n\nIn this post, we explore different anomaly detection approaches that can scale on a big data source in real-time. The tsmoothie package can help us to carry out this task. Tsmoothie is a python library for time series smoothing and outlier detection that can handle multiple series in a vectorized way. It’s useful because it can provide the techniques we needed to monitor sensors over time.\n\nTYPES OF ANOMALIES\n\nFirst, let’s define anomalies. They can be anything that is different or abnormal and deviates substantially from other data in the sample or historical data.\n\nAnomalies are often divided into point and pattern anomalies. Point anomalies are single instances of something abnormal, while pattern anomalies represent clusters of data that are abnormal.\n\nIn most of the case, some point anomalies may seem like a case of bad luck. With a pattern anomaly instead, the data creates a pattern that looks very different from normal. Pattern anomalies are more difficult to detect because we must first be able to define a normal pattern, and then we could need more data to be able to classify that this pattern is anomalous compared to historical activity.\n\nBelow we present different simulated scenarios, where we apply different techniques suitable for anomaly detection. Their adoption is domain-related and they are all based on simple assumptions. This simplicity is fundamental in all the tasks where we have a lack of information or in the presence of a little amount of data.\n\nPOINT ANOMALIES\n\nOur aim here is to detect data points that deviate so much from others. This arouses suspicions that the points were generated by a different mechanism.\n\nTwo different algorithms are used: a convolutional smoother and an exponential smoother. Both smooth the received signals using a sliding window approach. The convolution approach uses a discrete linear convolution while the exponential one uses an exponentially weighted convolution. Convolution is a mathematical operation that could be described as the integral of the product of two sequences: the raw signal and the weights. The convolutional smoother uses weights generated using predefined windows function (linear, hanning, hamming, bartlett, blackman). In the case of linear type, the weights are all the same and equal to one. This makes the operation equal to a moving average. The exponential smoother uses weights generated with an exponential function. As result, the most recent observations weight the most when computing the smoothing.\n\nRespectively, two different data structures are taken into account: random walks series and seasonal series with no trend.",
    "keywords": [
      "detection",
      "anomaly",
      "anomalies",
      "weights",
      "uses",
      "pattern",
      "convolution",
      "exponential",
      "smoother",
      "different",
      "realtime",
      "data",
      "series"
    ]
  },
  {
    "url": "https://medium.com/on-the-couch/7-things-a-loving-partner-doesnt-do-e2e4f1418d7?source=extreme_main_feed---------6-73--------------------38c4d0f0_ee2e_4a44_983a_c6e460073e85-------",
    "title": "7 Things a Loving Partner Doesn’t Do",
    "publish_date": "2020-10-07 11:07:50",
    "authors": [
      "Karen Nimmo"
    ],
    "summary": "Here are seven things loving partners strive not to do.\n7 Things a Loving Partner Doesn’t Do“Look, in my opinion, the best thing you can do is find a person who loves you for exactly what you are.\nA loving partner doesn’t go looking for trouble — they’ll address the issues that need sorting, but let the rest go.\nA loving partner will encourage and support you to work on the things YOU want to work on, but they’ll love you anyway.\nIndependence is important, and you both need lives/friends of your own, but a loving partner will keep you at no.",
    "text": "“The quality of your life ultimately depends on the quality of your relationships . . . which are basically a reflection of your sense of decency, your ability to think of others, your generosity.” ― Esther Perel\n\nAre you a loving partner?\n\nWe all like to think we’re on the money with this one. But the truth is most of us fall into the “could do better” category.\n\nPerfect doesn’t exist inside relationships — so that’s not the goal. The goal is to be as loving and supportive as you can, and to make an honest contribution to your relationship.\n\nObviously, that’s easier said than done. But the very first step is to rule out the things that will damage your relationship.\n\nHere are seven things loving partners strive not to do.\n\n7 Things a Loving Partner Doesn’t Do\n\n“Look, in my opinion, the best thing you can do is find a person who loves you for exactly what you are. Good mood, bad mood, ugly, pretty, handsome, what have you, the right person is still going to think the sun shines out your ass. That’s the kind of person that’s worth sticking with.” — Juno\n\n1. Pick fights unnecessarily.\n\nConflict is okay — even healthy — as a way of sorting out difficulties in a relationship. But some people pick fights for their own reasons —maybe they’ve been raised around conflict so they’re most comfortable on the “battle ground”; maybe they want to provoke a reaction from you; maybe they just hate their boss/job.\n\nBut someone who continually picks fights — and can’t enjoy the chill times — is hard to be with: they’ll end up making you anxious or causing you to shut down. A loving partner doesn’t go looking for trouble — they’ll address the issues that need sorting, but let the rest go.\n\n2. Flirt with others in front of you.\n\nIt’s entirely human to be attracted to other people. It’s how you show it that makes all the difference to your relationship. Some people flirt because it’s habitual, almost ingrained in their personality. That’s fine if you don’t mind. But, if you do mind (and you’ve told them so), it’s disrespectful. A loving partner respects you and your feelings — so leaves you in no doubt that, to them, you are the most important person in the room.\n\n3. Leave you guessing where they are.\n\nLoving partners are not secretive; they’re open about where they are and who they’re with. If their plans change, they’ll call you or flick you a text. Because, in their excitement of being with others and whatever they’re doing, they haven’t forgotten about you. They’re thoughtful. And you matter.\n\n4. Let you carry the load.\n\nRelationships should be like a job share. You each do the “stuff” you’re good at/like so you’re both contributing. A loving partner won’t lie on the couch with a giant bag of chips and the remote while you do all the chores, sort the kids, pay the bills, mow the lawns, cook the dinner, organise your lives. A loving partner will contribute — willingly.\n\n5. Overwhelm you with their struggles.\n\nSome couples operate a “rock” and “rolling stone” system where one person provides the steadiness, and most of the support, for their more emotional partner. That’s fine if you’re both happy with it. But a loving partner who is going through a hard time will realise when enough is enough — they won’t exhaust you with their problems — they’ll make room for your “stuff” too.\n\n6. Take aim at your vulnerabilities.\n\nThis is a low-blow and if you find yourself on the end of it your partner has gone beyond not being loving to being an asshole. Your partner shouldn’t take a crack at you where it really hurts — such as your body/physical appearance or personality. (But they are allowed to speak up for where something is hurting them, such as your untreated mental health issues or addictions). A loving partner will encourage and support you to work on the things YOU want to work on, but they’ll love you anyway.\n\n7. Don’t make you №1.\n\nYou should feel like the top priority in your relationship. If you rank behind your partner’s friends or work or Pinterest account or phone or mountain bike or golf clubs or latest fitness fad, you’re in trouble. Independence is important, and you both need lives/friends of your own, but a loving partner will keep you at no. 1 — even when temptation beckons.",
    "keywords": [
      "partner",
      "thats",
      "theyll",
      "think",
      "loving",
      "theyre",
      "things",
      "person",
      "work",
      "youre",
      "doesnt"
    ]
  },
  {
    "url": "https://towardsdatascience.com/25-lesser-known-java-libraries-you-should-try-ff8abd354a94?source=extreme_main_feed---------7-73--------------------38c4d0f0_ee2e_4a44_983a_c6e460073e85-------",
    "title": "25 lesser-known Java libraries you should try in 2020",
    "publish_date": "2020-10-07 22:09:24",
    "authors": [
      "Md Kamaruzzaman"
    ],
    "summary": "JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape.\nIn enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform.\nWiremockHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development.\nLink:ConclusionIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries.\nThere are many excellent Java libraries that I have not listed here but worth a try.",
    "text": "1. RxJava\n\nReactive Extensions (ReactiveX) is a popular software development paradigm to deal with asynchronous and event-driven programming. RxJava is the Java VM implementations of the Reactive Extensions by using Observables. It extends the Observer Pattern to support event-driven programming by adding composable operators on a sequence of events/data in a declarative way. It also hides the low-level complexities like threading, thread-safety, synchronization, and concurrent data structure.\n\nIf you want to do reactive programming in Java, it is a must-have library.\n\nLink:\n\n2. OkHttp\n\nHTTP is by far the most used Application layer protocol. There are many excellent Java-based HTTP client libraries out there. But OkHttp is the simplest yet powerful HTTP client library in the JVM. It offers fluent and clean API to develop HTTP client in Java.\n\nIt also supports some advanced features: Connection pooling, GZIP shrink, response caching, modern TLS features, and many more.\n\nLink:\n\n3. MyBatis\n\nIn most Software development projects, we need to store data. Although there are many types of data storage, SQL is still the most used data storage type. As a Java developer, we need to match our Java object to the SQL table. One way to achieve the mapping is to use ORM (e.g., Hibernate). But there are many use cases when you want to have full control over the Object-Table mapping (e.g., Performance). In those cases, you can directly use JDBC and write the SQL query. The other way is to use MyBatis to map Java Object to Stored Procedure or SQL statements. It offers both annotation-based or XML descriptor based mapping.\n\nI prefer MyBatis over plain JDBC, especially in larger projects, as it improves the separation of concerns.\n\nLink:\n\n4. HikariCP\n\nHikariCP is the second library in this list related to Database. Establishing a JDBC connection is resource expensive. If you create a new connection every time you access the Database and close it once you are done, it can severely impact your application performance. Not to mention that failure to close the connection properly or allowing limitless database connection can crash your application.\n\nUsing Connection Pooling means connections are reused rather than created each time a connection is requested. HikariCP is a very fast yet lightweight Database connection pooling in JVM. It is also very reliable and a “zero-overhead” JDBC connection pool.\n\nLink:\n\n5. Lombok\n\nIn modern days, Java is often criticized as a verbose and bloated programming language. Compared to other popular languages (JavaScript, Python, Scala, Kotlin), a developer needs to write lots of boilerplate code in Java. Although Java has introduced Records in JDK 15 to reduce boilerplate code in Java, it is not an LTS release. Fortunately, a library can already reduce your boilerplate code in Java significantly: Project Lombok. You can generate getters, setters, hashcode, equals, toString, Builder classes by adding a few annotations. Additionally, it offers null pointer check, logger, and many more.\n\nLink:\n\n6. VAVR\n\nJava finally released the much-awaited functional programming via Lambda and Streaming in version 8. If you are used to functional programming or want to dive deep into functional programming, you may find Java’s functional programming wanting. Compared to many other functional programming languages (Haskell, Scala), Java is pale. VAVR is a library that can fill the gap of the functional programming features in Java. It provides persistent collections, functional abstractions for error handling, concurrent programming, pattern matching, and much more.\n\nLink:\n\n7. Gson\n\nOver the years, JSON has become the de-facto data exchange format. In Java, there also exist several excellent libraries to deal with JSON. One of them is Jackson, which I have covered in my previous article. The other excellent library is Google’s Gson. Unlike Jackson, it is a minimalistic library and only supports JSON. It offers Data Binding, extensive Generic support, flexible customization. One of the major advantage (or disadvantage depending on your liking) of Gson is that it does not need annotation.\n\nLink:\n\n8. jsoup\n\nIf you are developing your application in Java and need to deal with HTML, you should use jsoup. It is a Java library to work with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data. It implements the WHATWG HTML5 specification and parses HTML using the best of HTML5 DOM methods. It supports parsing HTML from URL/string, find and extract data, manipulate the HTML elements, clean HTML, output HTML.\n\nLink:\n\n9. JIB\n\nIf you are working on an enterprise-grade application, it should be at least Cloud-ready. The first step to make your application cloud-ready is to containerize your application, i.e., put your artifactory binary into Docker image. Dockerizing a Java application is a bit tedious work: you need to have deep knowledge of Docker, you need to create a Dockerfile, and you will need Docker Daemon. Fortunately for the Java developers, Google has created an Open-source Java containerizer using already existing tools. You can use JIB as a Java library to build an optimized Docker and OCI image.\n\nLink\n\n10. Tink\n\nTink is yet another handy Java library in this list from Google. Cryptography and security are becoming increasingly more important in Software Development. Cryptographic techniques are used to secure user data. Implementing cryptography correctly requires a lot of expertise and effort. A group of Cryptographers and security engineers in Google has written the multi-language cryptographic library Tink. It offers easy-to-use but hard to misuse security API. Tink offers cryptographic functionalities via different primitives. It provides symmetric key encryption, streaming symmetric key encryption, deterministic symmetric key encryption, digital signature, hybrid encryption, and many other encryption functionalities.\n\nLink:\n\n11. Webmagic\n\nIf you work on Web crawling, you can write your own crawler, which is time-consuming and tedious. In Java, Webmagic is an excellent Web crawler library that covers the complete life-cycle of crawler: downloading, URL management, content extraction, persistence. It offers a simple yet flexible core, Annotation support, multi-threaded, and easy-to-use API.\n\nLink:\n\n12. ANTLR 4\n\nIf you work on parsing and processing data, then the ANTLR library could be handy. It is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It does this by giving us access to language processing primitives like lexers, grammars, parsers, and the runtime to process text against them.\n\nIt’s often used to build tools and frameworks.\n\nLink:\n\n13. Caffeine\n\nIf your application is read-heavy, then caching can dramatically improve your application’s data access performance. Java has many great caching libraries. Caffeine is the best among the lot. It is a high-performance, near-optimal caching library based on Java. It offers a fluent caching API and some advanced features like asynchronous loading of entries, asynchronous refresh, weak referenced keys, etc.\n\nLink:\n\n14. Metrics\n\nOnce your Java application runs into production, you will want to have insight into your application's critical components. Metrics from the Dropwizard framework is a simple yet compelling Java library that provides insight into your application and JVMs KPI, e.g., rate of events, pending jobs, service health check, and more. It is modular and offers modules for other libraries/frameworks.\n\nLink:\n\n15. gRPC-Java\n\nGoogle has created gRPC as a modern Remote Procedure Call system in 2015. Since then, gRPC became extremely popular and one of the most used RPC system in modern software development. The library gRPC-Java is the Java implementation of the gRPC client. If you want to use gRPC in Java, then this library can be handy for you.\n\nLink:\n\n16. Java WebSocket\n\nTraditional Client-Server communications unidirectional. WebSocket is a bi-directional communication protocol over a single TCP connection. Java WebSocket is a barebone WebSocket server and client implementation in Java. If you are a Java developer and want to work with WebSocket, this library is highly recommended.\n\nLink:\n\n17. JJWT\n\nJSON Web Token (JWT) is the de-facto Authorization and secure Information exchange format in modern software development. Whether you are using a simple session-based Authorization or highly advanced OAuth2 based Authorization, you will probably use JWT. JJWT is a simple Java library for creating and verifying JWT in Java and JVM landscape. It is fully RFC specification compliant on all implemented functionality. It supports readable and convenient fluent API.\n\nLink:\n\n18. Swagger-Core\n\nOpenAPI is the specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. Swagger-Core is the Java implementation of the OpenAPI specification. If you are exposing REST API in your Java/JavaEE application, you can automatically provide and expose your API definitions using Swagger-Core.\n\nLink:\n\n19. Async Http Client\n\nAsynchronous programming is becoming increasingly popular of late because of its non-blocking nature. Most of the popular Java HTTP client libraries offer limited to no asynchronous HTTP response processing. Async Http Client is a popular Java library that offers asynchronous HTTP response processing. As a bonus feature, this library also supports the WebSocket protocol.\n\nLink:\n\n20. Liquibase\n\nAs a software developer, we all know the importance of version control, DevOps, and CI/CD of our code. In a blog post: Evolutionary Database Design, the great Martin Fowler argued that we also need version control and CI/CD of our code. Liquibase is a tool that supports tracking, version controlling, and deployment of SQL database changes in Java Applications. If you are working with an SQL database where the database is evolving, this tool can greatly simplify your database migration.\n\nLink:\n\n21. Springfox\n\nI have already listed Swagger-Core in this list, which can automatically generate REST API documentation for vanilla Java or Java EE application. In enterprise application development, Spring MVC has surpassed Java EE as the number one application development platform. In Spring-based Java applications, the Springfox library can automatically generate REST API documentation from the source code.\n\nLink:\n\n22. JavaCV\n\nOpenCV is a computer vision and machine learning software library. It is open-source and was built to provide a common infrastructure for computer vision applications. JavaCV is a wrapper on OpenCV and many other popular libraries (FFmpeg, libdc 1394, PGR FlyCapture) in the field of computer vision. JavaCV also comes with hardware accelerated full-screen image display, easy-to-use methods to execute code in parallel on multiple cores, user-friendly geometric and the color calibration of cameras and projectors, detection and matching of feature points, and many other features.\n\nLink:\n\n23. Joda Time\n\nJava had a poor date and time functionalities in the pre-Java8 core library. Java8 released much needed advanced date and time functionalities in its java.time package. If you are working with an older version of Java (pre Java8), Joda time can provide you the advanced date and time functionalities. However, if you are working in a newer version of Java, you may not need this library.\n\nLink:\n\n24. Wiremock\n\nHTTP is the most preferred transport protocol in modern application development, whereas REST is the de-facto communication protocol in Micro-service based application development. During the writing Unit test, it is best to focus on SUT (System Under Test) and mock the services used in the SUT. Wiremock is a simulator for REST API and enables developers to write code against an API that does not exist or incomplete. In microservice-based software development, Wiremock can significantly boost development velocity.\n\nLink:\n\n25. MapStruct\n\nIn Java application development, you often need to convert one type of POJO to another type of POJO. One way to achieve this POJO or Bean conversion is to explicitly code the transformation, which is tedious. The smart way is to use a library that is specifically developed to transform POJO/Bean. MapStruct is a code generator that implements mapping between POJO/Bean on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe, and easy to understand.\n\nLink:\n\nConclusion\n\nIn this article, I have listed 25 Java libraries that can help your Software Development Job by leveraging the common tasks to the tested libraries. These libraries are not domain-specific and can help you whether you are developing Software for Business applications, Robotics, Android Apps or Personal projects. Please note that for a large and wide eco-system like Java, this list is not conclusive. There are many excellent Java libraries that I have not listed here but worth a try. But this list of libraries can provide a quick peek into the world of the Java eco-system.",
    "keywords": [
      "2020",
      "development",
      "lesserknown",
      "libraries",
      "try",
      "library",
      "25",
      "application",
      "java",
      "need",
      "offers",
      "programming",
      "software",
      "data"
    ]
  },
  {
    "url": "https://elemental.medium.com/the-first-signs-of-alcoholic-liver-cirrhosis-are-not-in-the-liver-2634b3968f00?source=extreme_main_feed---------8-73--------------------38c4d0f0_ee2e_4a44_983a_c6e460073e85-------",
    "title": "The First Signs of Alcoholic Liver Damage Are Not in the Liver",
    "publish_date": "2020-10-13 13:25:16",
    "authors": [
      "Gillian May"
    ],
    "summary": "The First Signs of Alcoholic Liver Damage Are Not in the LiverNot enough alcoholics are educated about thisMy father died of alcoholic liver cirrhosis four years ago.\nMost people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\nAnd in fact, many of the first signs of liver damage occur in other parts of the body.\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver.\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage.",
    "text": "The First Signs of Alcoholic Liver Damage Are Not in the Liver\n\nNot enough alcoholics are educated about this\n\nMy father died of alcoholic liver cirrhosis four years ago. It came as a surprise to all of us, even though it was clear he had a severe drinking problem for decades. It was especially surprising to me, as a former nurse and a recovering alcoholic. You would think I’d know more about liver problems and alcohol use than the average person. But the truth is, in the months before his death, I had no idea my father’s liver was struggling at all. Most people know about cirrhosis, but few people know how a liver goes from early damage to end-stage liver cirrhosis.\n\nThe combination of my father’s death and my personal background lit a fire in me to know more. He was admitted to the hospital on June 24, 2016, and he died on July 18. Only 24 days passed between the first sign there was a problem and his subsequent death.\n\nNow, hearing that he was in end-stage cirrhosis didn’t surprise me, given his heavy drinking. What did surprise me was that he’d visited several doctors and specialists in the months before his death, and no one knew his liver was struggling either.\n\nSo what happened? Does end-stage liver cirrhosis really sneak up that fast? Were there other signs that would have alerted someone to his failing liver?\n\nAs for why the doctors and specialists didn’t know what was happening, that mystery resolved reasonably quickly. The plain truth is that alcoholics rarely divulge the amount and frequency of their drinking to their doctors. This was the case for my dad. He had many health issues that he was trying to solve, but he protected his drinking habit fiercely. So he refused to spill the beans, even when it mattered.\n\nThe problem is that liver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nAs he was dying, my father told me that he didn’t think to tell the doctors how much he was drinking. He said it was as if he blanked out and “forgot” to mention it. As crazy as that sounds, this strange “forgetting” is a common part of the alcoholic mindset. It may also be due to the metabolic and physical changes of cirrhosis itself.\n\nThere are many signs of liver problems, but oddly, none seem to point to the liver at first. And in fact, many of the first signs of liver damage occur in other parts of the body. Knowing these signs may help educate alcoholics and their families if they want to understand their risk of developing liver cirrhosis.\n\nLiver damage has numerous multifaceted symptoms that are confusing and associated with many other illnesses. Unless a doctor knows that the patient is an alcoholic, they may not know how to interpret what’s happening until it’s too late.\n\nDigestive signs\n\nThe liver plays a huge part in our digestive process. It filters out all toxins from food as well as helping to break down fats and glucose.\n\nWhen a liver starts to slow down due to significant damage, it will reduce its digestive work. Instead, it will divert its energy toward vital functions like metabolizing medications and filtering toxins.\n\nThis means that symptoms like bloating, nausea, vomiting, gas, and diarrhea will start to increase. Over time, eating becomes more challenging. In the later stages of liver cirrhosis, toxins that can’t be filtered out begin to build in the bloodstream, which causes more nausea.\n\nCognitive signs\n\nAlthough confusion and brain fog happen in end-stage liver cirrhosis, they can also be early signs.\n\nThe liver is responsible for filtering dangerous substances in the blood. It also helps regulate hormones, blood glucose, and vitamin absorption. In the early stages of liver damage, these processes can be interrupted. Inevitably, this affects our brain and nervous system.\n\nThis means that early liver problems can make you feel tired, confused, slow, and foggy. You may have some memory issues as well.\n\nNeuromuscular signs\n\nThe liver stores vitamins required for the functioning of many organs and systems in the body — one of them is vitamin B1 or thiamine. A deficiency in this particular vitamin has been documented in many alcoholics with or without liver damage.\n\nUnfortunately, alcohol inhibits the absorption of thiamine in the intestine. Over time, as the liver becomes damaged, it can no longer store thiamine in enough quantities. Thiamine deficiency is responsible for many neurological issues in people with alcoholism.\n\nSymptoms of thiamine deficiency range from mild to severe and include things like: confusion, mental fog, lack of balance, pain and numbness in hands and feet, muscle weakness, rapid heart rate, digestive problems, flushing, and involuntary eye movements.\n\nThiamine deficiency happens in almost every alcoholic who consumes frequent and large amounts of alcohol. And if thiamine deficiency due to alcoholism is discovered, you can be sure the liver is suffering damage at the same time.\n\nMany of the first signs of liver damage occur in other parts of the body.\n\nVascular signs\n\nAll alcohol consumption can lead to blood vessel dilation, causing flushing in the face and hands. Over time, this can cause damage leading to permanent redness in the face. Although many alcoholics have rosacea or spider-like veins on their faces, this is often benign.\n\nHowever, spider angiomas are different from rosacea or spiderlike veins. They’re circular and have a central point called a spider nevus that is darker than the rest of the lesion. Spider angiomas are a sign of liver disease and can be present in the early stages. They often progress to more extensive and more numerous lesions.\n\nSpider angiomas are caused by increased estrogen levels in the blood. When the liver becomes damaged, it can’t properly metabolize estrogens, which causes them to build up in the body.\n\nMany women who are pregnant or taking birth control pills may have a few spider angiomas. However, in alcoholic liver disease, these lesions are often more frequent and accompanied by red palms and varicose veins in the esophagus.\n\nThese are a few of the main signs of alcoholic liver damage that happen outside of the liver. It’s important to know this because most of us have no idea how the liver functions and how it communicates distress.\n\nThe liver itself doesn’t show signs like pain or swelling in the early stages of liver damage. This contrasts with other organs like the heart or stomach, where any damage will emit pain or symptoms directly from these organs.\n\nWhat happens with liver damage is that its many diverse functions become interrupted, causing symptoms in other parts of the body. This may explain why most people never think they have a problem with their liver.\n\nUnfortunately, patients with alcoholism are rarely educated about these issues. This is because they often don’t reveal their drinking, to begin with. And even if they do, the symptoms are widespread and complex, which makes patient education challenging.\n\nMy goal in writing articles like this is to help educate regular people about alcoholic liver disease to understand their health and make better decisions.\n\nIt’s hard to say if my father would have changed his drinking habits if he knew more about his vague and complicated symptoms. But I think having proper education would have certainly helped him understand his risks and health problems better.",
    "keywords": [
      "alcoholic",
      "damage",
      "cirrhosis",
      "thiamine",
      "drinking",
      "know",
      "early",
      "symptoms",
      "liver",
      "signs"
    ]
  },
  {
    "url": "https://uxdesign.cc/29-of-my-favorite-websites-most-designers-have-never-heard-of-d7d99179cda7?source=extreme_main_feed---------9-73--------------------38c4d0f0_ee2e_4a44_983a_c6e460073e85-------",
    "title": "29 of My Favorite Design Tools & Websites You’ve Never Heard of",
    "publish_date": "2020-10-07 15:12:18",
    "authors": [
      "Danny Sapio"
    ],
    "summary": "The design space is awash with countless design tools, plugins, websites, resources, and more promising to improve your workflow and make you a savvier designer.\nI’ve tried my hand at a lot of them over the years, but there are only a few that really stand out.\nThis list is the cream of the crop — the most obscure, creative, unique, helpful or exceptional.\nSome are fun sites to be inspired from; others are tools and resources that will absolutely make you a better designer.\nLet me know what your favorite tools are on Twitter.",
    "text": "The design space is awash with countless design tools, plugins, websites, resources, and more promising to improve your workflow and make you a savvier designer. I’ve tried my hand at a lot of them over the years, but there are only a few that really stand out.\n\nThis list is the cream of the crop — the most obscure, creative, unique, helpful or exceptional. Some are fun sites to be inspired from; others are tools and resources that will absolutely make you a better designer.\n\nI hope you enjoy! Let me know what your favorite tools are on Twitter.\n\n1. The preposterous web portal of Erik Bernacchi\n\neeerik.com",
    "keywords": [
      "stand",
      "workflow",
      "heard",
      "resources",
      "favorite",
      "tools",
      "web",
      "design",
      "unique",
      "twitter1",
      "youve",
      "tried",
      "29",
      "websites"
    ]
  }
]